"use strict";(self.webpackChunkomp_web=self.webpackChunkomp_web||[]).push([["53407"],{4833:function(e,n,a){a.r(n),a.d(n,{frontMatter:()=>s,toc:()=>c,default:()=>h,metadata:()=>r,assets:()=>o,contentTitle:()=>l});var r=JSON.parse('{"id":"scripting/language/Variables","title":"Basics: Variables","description":"A beginner\'s guide to variables in Pawn","source":"@site/docs/scripting/language/Variables.md","sourceDirName":"scripting/language","slug":"/scripting/language/Variables","permalink":"/ru/docs/scripting/language/Variables","draft":false,"unlisted":false,"editUrl":"https://github.com/openmultiplayer/web/edit/master/frontend/docs/scripting/language/Variables.md","tags":[],"version":"current","frontMatter":{"title":"Basics: Variables","sidebar_label":"Basics: Variables","description":"A beginner\'s guide to variables in Pawn"},"sidebar":"docsSidebar","previous":{"title":"Scripting: Tags","permalink":"/ru/docs/scripting/language/Tags"},"next":{"title":"Component slots","permalink":"/ru/docs/scripting/resources/Componentslots"}}'),i=a(85893),t=a(50065);let s={title:"Basics: Variables",sidebar_label:"Basics: Variables",description:"A beginner's guide to variables in Pawn"},l=void 0,o={},c=[{value:"Variables",id:"variables",level:2},{value:"Declaring Variables",id:"declaring-variables",level:3},{value:"Scopes",id:"scopes",level:3},{value:"Naming Rules",id:"naming-rules",level:3},{value:"Examples :",id:"examples-",level:4},{value:"Storing different types of Data",id:"storing-different-types-of-data",level:3}];function d(e){let n={code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"variables",children:"Variables"}),"\n",(0,i.jsx)(n.p,{children:"One of the most important concepts in programming is the concept of \u2018variables\u2019. In programming, a variable is an entity that is changeable, but in terms of what ? In Pawn language a variable holds a \u2018value\u2019 at any time and that value-as the name suggests-is \u2018variable\u2019 or \u2018changeable\u2019."}),"\n",(0,i.jsx)(n.p,{children:"The reason why variables are so important is because they are basically small units of computer memory which can hold or \u2018remember\u2019 different values while the program is under execution (running), and that property turns out to be very useful in programming. For example, you want to keep track of the scores of 100 players in a game, you can do it easily by programming the computer to store (remember) and update those values. Later if you want to find the mean score of those players or want to create a leaderboard, those values from the variables can be easily accessed and used for that purpose."}),"\n",(0,i.jsx)(n.h3,{id:"declaring-variables",children:"Declaring Variables"}),"\n",(0,i.jsx)(n.p,{children:"Following is the syntax for variable declaration :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"// Creating (more appropriately, 'declaring') a variable named 'myVariable\n\nnew myVariable;\n\n// The 'new' keyword is used for declaring a variable\n// In the above line a variable is declared with the name 'myVariable'\n// Semi-colon is used in the end to close the declaration statement.\n"})}),"\n",(0,i.jsx)(n.p,{children:"The declaration syntax can be better understood by looking at some examples :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"new var;\nnew ammo;\nnew score;\nnew vehicles;\nnew topScore;\n"})}),"\n",(0,i.jsx)(n.p,{children:"Each of the above defined variable has a value by default, which is zero. There are different ways of assigning values to a variable. One method is directly assigning a value to the variable as it\u2019s declared :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"new letters = 25;\n"})}),"\n",(0,i.jsx)(n.p,{children:"In the above example, a variable named \u2018letters\u2019 is being declared, with a value of 25. You will notice an equal sign which is a simple Assignment Operator that can be used for assigning values to variables. It evaluates the expression on its right and assigns the resultant value to the variable referenced on its left side. Other than assigning values directly at the declaration, you can also do it in later parts of the code :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"new letters;\n\nletters = 25;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"scopes",children:"Scopes"}),"\n",(0,i.jsx)(n.p,{children:"Modifying a variable's value is possible only if the part of the code where you\u2019re referencing the variable is within the scope of that variable. Scope of a variable depends upon the code block or position where that variable was declared. For example a variable being declared outside any block of code, usually in the beginning of the script, has a \u2018Global\u2019 scope and can be accessed from anywhere within the script:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'#include <open.mp>\n\nnew g_var = 5;\n\npublic OnFilterScriptInit()\n{\n    g_var = 10;\n\n    printf("The value is %i", g_var);\n\n    return 1;\n}\n\npublic OnPlayerConnect(playerid)\n{\n    g_var = 100;\n\n    printf("The value is %i", g_var);\n\n    return 1;\n}\n\n// Output :\n// The value is 10\n// The value is 100\n\n// Note: The second output line is shown only when a player connects.\n'})}),"\n",(0,i.jsx)(n.p,{children:"Other than \u2018Global\u2019 (scoped) variables, there are \u2018local\u2019 or \u2018private\u2019 variables that can be accessed only from inside the block of code where they were declared."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"#include <open.mp>\n\npublic OnFilterScriptInit()\n{\n    new localVar;\n\n    localVar = 5;\n\n    return 1;\n}\n\npublic OnPlayerConnect(playerid)\n{\n    localVar = 10; // This line will show an error upon compilation\n\n    return 1;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you try to compile the code above, the compiler will show an error which is reasonable as a local variable is being references in a completely different block of code. Note: If it is a nested code block then the variable can be accessed from there."}),"\n",(0,i.jsx)(n.p,{children:"One important thing to note is that you cannot declare variables with the same names if their scopes intercede. For example if you already have a variable named \u2018score\u2019 on a global scope, you cannot create another variable named \u2018score\u2019 on the global scope as well as a local one, and this is true for other way around as well (if you already have a local variable, avoid declaring a global variable with the same name)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"#include <open.mp>\n\nnew g_score;\n\npublic OnFilterScriptInit()\n{\n    new g_score = 5; // This line will show an error.\n    return 1;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"naming-rules",children:"Naming Rules"}),"\n",(0,i.jsx)(n.p,{children:"Now that you know how to declare variables, you need to know the naming rules for declaring variable which are listed below :"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["All variable names must begin with a letter or an underscore (",(0,i.jsx)(n.code,{children:"_"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"After the first initial letter, variable names can contain letters and numbers but no spaces or special characters."}),"\n",(0,i.jsx)(n.li,{children:"The variable names are case sensitive i.e Uppercase letters are distinct from the lowercase letters."}),"\n",(0,i.jsx)(n.li,{children:"Using a reserved word (keyword) as a variable name will show an error."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"examples-",children:"Examples :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"new new; // Incorrect : Using a reserved word\nnew _new; // Correct\n\nnew 10letters; // Incorrect : Name starting with a number\nnew letters10; // Correct\nnew letters_10; // Correct\n\nnew my name; // Incorrect : Space in the name\nnew my_name; // Correct\n\nnew !nternet; // Incorrect\nnew Internet; // Correct\n"})}),"\n",(0,i.jsx)(n.h3,{id:"storing-different-types-of-data",children:"Storing different types of Data"}),"\n",(0,i.jsx)(n.p,{children:"After that, now lets look at some examples of what types of data can be stored in variable and how :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"new letter = 'M';\n\n\nnew value = 100;\n\n\nnew decimalValue = 1.0;\n// Works, but will show a compiler warning\n// warning 213: tag mismatch\n\n\nnew engineOn = true;\n// Works, and will not show a compiler warning but using a Tag is suggested\n\n\nnew sentence = \"This is a sentence\";\n// Will show an error.\n// error 006: must be assigned to an array\n"})}),"\n",(0,i.jsxs)(n.p,{children:["A variable is capable of holding a character, integer value, boolean (true or false) and a float value (decimal value). The comments in the above code show that storing a string in a variable results into an error (as strings can be stored in ",(0,i.jsx)(n.em,{children:"Arrays"})," only). Other than that, assigning a float value to a variable will result in a compiler warning, which can be avoided by adding \u2018tags\u2019. Without proper tags, the script will show warnings upon compilation but will be executable. Tags tell the compiler about the type of data that is intended to be stored in the variable, which in turn informs us in the form of errors or warning if we make a program-breaking mistake in the code. Example of tags :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"new decimalValue = 1.0; // Incorrect\nnew bool:decimalValue = 1.0 // Incorrect\nnew Float:decimalValue = 1.0; // Correct\n\nnew switchOn = 1.0; // Incorrect\nnew switchOn = true; // Incorrect, doesn't show a warning\nnew bool:switchOn = true; // Correct\n"})}),"\n",(0,i.jsx)(n.p,{children:"Using correct tags is important to avoid any bugs or errors during program execution."}),"\n",(0,i.jsx)(n.p,{children:"Pawn being a typeless language allows us to store different types of data in the same variable which can be useful in some cases and troublesome in others, but such usage of variables is not recommended."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'#include <open.mp>\n\npublic OnFilterScriptInit()\n{\n\n    new var;\n\n    var = \'a\';\n    printf("%c", var);\n\n    var = 1;\n    printf("%d", var);\n\n    var = 1.0;\n    printf("%f", var);\n\n    var = true;\n    printf("%d", var); // prints a value 0 or 1\n\n    return 1;\n}\n\n// Output :\na\n1\n1.000000\n1\n'})})]})}function h(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},50065:function(e,n,a){a.d(n,{Z:()=>l,a:()=>s});var r=a(67294);let i={},t=r.createContext(i);function s(e){let n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);