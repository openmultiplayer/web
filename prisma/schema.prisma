datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "go run github.com/prisma/prisma-client-go"
  output        = "../server/src/db"
  package       = "db"
  binaryTargets = ["native"]
}

enum AuthMethod {
  GITHUB
  DISCORD
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  authMethod AuthMethod
  github     GitHub?
  discord    Discord?

  name  String  @db.VarChar(30)
  bio   String?
  admin Boolean @default(false)

  servers Server[]
  posts   Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GitHub {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  accountId String @unique
  username  String @unique
  email     String @unique
}

model Discord {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  accountId String @unique
  username  String @unique
  email     String @unique
}

model Server {
  id String @id @default(uuid())

  // essential data (short names to save data!)
  ip String  @unique
  hn String
  pc Int
  pm Int
  gm String
  la String
  pa Boolean
  vn String
  ru Rule[]

  // domain name for de-duplication purposes
  domain String?

  // rich data (entered by server owners via the web UI)
  description String?
  banner      String?

  // user who owns this server
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  active    Boolean
  updatedAt DateTime @updatedAt
}

model Rule {
  id       Int     @id @default(autoincrement())
  name     String
  value    String
  Server   Server? @relation(fields: [serverId], references: [id])
  serverId String?

  @@unique([name, serverId], name: "Rule_serverId_rule_name_index")
}

model Post {
  id String @id @default(cuid())

  slug    String @unique
  title   String
  body    String
  short   String
  author  User   @relation(fields: [userId], references: [id])
  thread  Post?  @relation("PostToThread", fields: [postId], references: [id])
  replyTo Post?  @relation("PostToPost", fields: [postId], references: [id])
  replies Post[] @relation("PostToPost")
  tags    Tag[]  @relation("TagToPost")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userId String
  postId String?
  Post   Post[]  @relation("PostToThread")
}

model Tag {
  id String @id @default(cuid())

  name  String @unique
  posts Post[] @relation("TagToPost")
}
