datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "go run github.com/prisma/prisma-client-go"
  output          = "../internal/db"
  package         = "db"
  binaryTargets   = ["native"]
  previewFeatures = ["fullTextSearch"]
}

enum AuthMethod {
  GITHUB
  DISCORD
  UNDEFINED
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  authMethod AuthMethod
  github     GitHub?
  discord    Discord?

  name  String  @db.VarChar(64)
  bio   String?
  admin Boolean @default(false)

  servers       Server[]
  posts         Post[]
  reacts        React[]
  subscriptions Subscription[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model GitHub {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  accountId String @unique
  username  String @unique
  email     String @unique
}

model Discord {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  accountId String @unique
  username  String @unique
  email     String @unique
}

model Server {
  id String @id @default(uuid())

  // essential data (short names to save data!)
  ip String  @unique
  hn String
  pc Int
  pm Int
  gm String
  la String
  pa Boolean
  vn String
  ru Rule[]

  // domain name for de-duplication purposes
  domain String?

  // rich data (entered by server owners via the web UI)
  description String?
  banner      String?

  // user who owns this server
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  active    Boolean
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Rule {
  id       Int     @id @default(autoincrement())
  name     String
  value    String
  Server   Server? @relation(fields: [serverId], references: [id])
  serverId String?

  @@unique([name, serverId], name: "Rule_serverId_rule_name_index")
}

model Post {
  id String @id @default(cuid())

  // For threads
  title    String?
  slug     String?   @unique
  category Category? @relation(fields: [categoryId], references: [id])

  // For posts
  body    String
  short   String
  first   Boolean
  pinned  Boolean @default(false)
  author  User    @relation(fields: [userId], references: [id])
  root    Post?   @relation("PostToRoot", fields: [rootPostId], references: [id])
  posts   Post[]  @relation("PostToRoot")
  replyTo Post?   @relation("ReplyToPost", fields: [replyPostId], references: [id])
  replies Post[]  @relation("ReplyToPost")
  tags    Tag[]   @relation("TagToPost")
  reacts  React[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userId      String
  rootPostId  String?
  replyPostId String?
  categoryId  String?

  @@index([title])
}

model Tag {
  id String @id @default(cuid())

  name  String @unique
  posts Post[] @relation("TagToPost")
}

model Category {
  id String @id @default(cuid())

  name        String  @unique
  description String  @default("(No description)")
  colour      String  @default("#8577ce")
  sort        Int     @default(-1)
  admin       Boolean @default(false)
  posts       Post[]
}

model React {
  id String @id @default(cuid())

  emoji String

  user User @relation(fields: [userId], references: [id])
  Post Post @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())

  postId String
  userId String

  // User should only be able to post one of any react per post.
  @@unique([emoji, postId, userId])
}

enum NotificationType {
  /// A post in a thread the user authored, a post in a thread a user subscribed
  /// to, a post in a thread that's in-reply to a user's post.
  FORUM_POST_RESPONSE
}

model Subscription {
  id String @id @default(cuid())

  user          User             @relation(fields: [userId], references: [id])
  refersType    NotificationType
  refersTo      String
  notifications Notification[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userId String
}

model Notification {
  id String @id @default(cuid())

  title        String
  description  String
  link         String
  read         Boolean
  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  createdAt DateTime @default(now())

  subscriptionId String
}
