"use strict";(self.webpackChunkomp_web=self.webpackChunkomp_web||[]).push([["56827"],{6526:function(e,a,s){s.r(a),s.d(a,{frontMatter:()=>i,toc:()=>l,default:()=>p,metadata:()=>n,assets:()=>t,contentTitle:()=>d});var n=JSON.parse('{"id":"scripting/callbacks/OnPlayerKeyStateChange","title":"OnPlayerKeyStateChange","description":"Esta callback \xe9 chamada quando o estado de qualquer tecla suportada muda (pressionado/solto)","source":"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/scripting/callbacks/OnPlayerKeyStateChange.md","sourceDirName":"scripting/callbacks","slug":"/scripting/callbacks/OnPlayerKeyStateChange","permalink":"/pt-BR/docs/scripting/callbacks/OnPlayerKeyStateChange","draft":false,"unlisted":false,"editUrl":"https://github.com/openmultiplayer/web/edit/master/frontend/docs/scripting/callbacks/OnPlayerKeyStateChange.md","tags":[{"inline":true,"label":"player","permalink":"/pt-BR/docs/tags/player"}],"version":"current","frontMatter":{"title":"OnPlayerKeyStateChange","sidebar_label":"OnPlayerKeyStateChange","description":"Esta callback \xe9 chamada quando o estado de qualquer tecla suportada muda (pressionado/solto)","tags":["player"]},"sidebar":"docsSidebar","previous":{"title":"OnPlayerInteriorChange","permalink":"/pt-BR/docs/scripting/callbacks/OnPlayerInteriorChange"},"next":{"title":"OnPlayerLeaveCheckpoint","permalink":"/pt-BR/docs/scripting/callbacks/OnPlayerLeaveCheckpoint"}}'),o=s(85893),r=s(50065);let i={title:"OnPlayerKeyStateChange",sidebar_label:"OnPlayerKeyStateChange",description:"Esta callback \xe9 chamada quando o estado de qualquer tecla suportada muda (pressionado/solto)",tags:["player"]},d=void 0,t={},l=[{value:"Descri\xe7\xe3o",id:"descri\xe7\xe3o",level:2},{value:"Retornos",id:"retornos",level:2},{value:"Notas",id:"notas",level:2},{value:"Fun\xe7\xf5es Relaciondas",id:"fun\xe7\xf5es-relaciondas",level:2},{value:"Informa\xe7\xe3o Adicional",id:"informa\xe7\xe3o-adicional",level:2},{value:"Introdu\xe7\xe3o",id:"introdu\xe7\xe3o",level:3},{value:"Par\xe2metros",id:"par\xe2metros",level:3},{value:"Como n\xe3o verificar uma tecla",id:"como-n\xe3o-verificar-uma-tecla",level:3},{value:"Como verificar uma tecla corretamente",id:"como-verificar-uma-tecla-corretamente",level:3},{value:"Como verificar uma tecla que foi pressionada",id:"como-verificar-uma-tecla-que-foi-pressionada",level:3},{value:"Como verificar por uma tecla que est\xe1 sendo pressionada",id:"como-verificar-por-uma-tecla-que-est\xe1-sendo-pressionada",level:3},{value:"Como verificar por m\xfaltiplas teclas",id:"como-verificar-por-m\xfaltiplas-teclas",level:3},{value:"Simplifica\xe7\xe3o",id:"simplifica\xe7\xe3o",level:2},{value:"Detectando uma tecla sendo pressionada",id:"detectando-uma-tecla-sendo-pressionada",level:3},{value:"Detectando a primeira tecla que foi pressionada",id:"detectando-a-primeira-tecla-que-foi-pressionada",level:3},{value:"Detectando se o jogador, atualmente, est\xe1 pressionando uma tecla",id:"detectando-se-o-jogador-atualmente-est\xe1-pressionando-uma-tecla",level:3},{value:"Detectando uma tecla que foi solta",id:"detectando-uma-tecla-que-foi-solta",level:3},{value:"Exemplos",id:"exemplos",level:2},{value:"Anexar NOS quando o jogador pressionar &#39;fire&#39; (atirar)",id:"anexar-nos-quando-o-jogador-pressionar-fire-atirar",level:3},{value:"Super pulo",id:"super-pulo",level:3},{value:"Modo Deus ativado enquanto estiver pressionando uma tecla",id:"modo-deus-ativado-enquanto-estiver-pressionando-uma-tecla",level:3},{value:"Explica\xe7\xe3o",id:"explica\xe7\xe3o",level:3}];function c(e){let a={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components},{TipNPCCallbacksPT:s}=a;return s||function(e,a){throw Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("TipNPCCallbacksPT",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.h2,{id:"descri\xe7\xe3o",children:"Descri\xe7\xe3o"}),"\n",(0,o.jsxs)(a.p,{children:["Esta callback \xe9 chamada quando o estado de qualquer tecla ",(0,o.jsx)(a.a,{href:"/pt-BR/docs/scripting/resources/keys",children:"suportada"})," muda. (pressionado/solto). Teclas direcionais n\xe3o ativam o OnPlayerKeyStateChange (Para cima, baixo, direita, esquerda)."]}),"\n",(0,o.jsxs)(a.table,{children:[(0,o.jsx)(a.thead,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.th,{children:"Nome"}),(0,o.jsx)(a.th,{children:"Descri\xe7\xe3o"})]})}),(0,o.jsxs)(a.tbody,{children:[(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:"playerid"}),(0,o.jsx)(a.td,{children:"O ID do jogador que pressionou ou soltou uma tecla."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:"newkeys"}),(0,o.jsxs)(a.td,{children:["Um mapa (bitmask) das teclas atualmente pressionadas - ",(0,o.jsx)(a.a,{href:"/pt-BR/docs/scripting/resources/keys",children:"veja aqui"})]})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:"oldkeys"}),(0,o.jsxs)(a.td,{children:["Um mapa (bitmask) das teclas pressionadas antes da atual - ",(0,o.jsx)(a.a,{href:"/pt-BR/docs/scripting/resources/keys",children:"veja aqui"}),"."]})]})]})]}),"\n",(0,o.jsx)(a.h2,{id:"retornos",children:"Retornos"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"Esta callback n\xe3o suporta retornos."}),"\n",(0,o.jsx)(a.li,{children:"Sempre \xe9 chamado primeiro na gamemode."}),"\n"]}),"\n",(0,o.jsx)(a.h2,{id:"notas",children:"Notas"}),"\n",(0,o.jsx)(s,{}),"\n",(0,o.jsx)(a.admonition,{type:"tip",children:(0,o.jsxs)(a.p,{children:["Teclas direcionais n\xe3o ativam o OnPlayerKeyStateChange (Para cima, baixo, direita, esquerda). Estas podem apenas ser identificadas pelo ",(0,o.jsx)(a.a,{href:"/pt-BR/docs/scripting/functions/GetPlayerKeys",children:"GetPlayerKeys"})," no ",(0,o.jsx)(a.a,{href:"/pt-BR/docs/scripting/callbacks/OnPlayerUpdate",children:"OnPlayerUpdate"})," ou em um teporizador."]})}),"\n",(0,o.jsx)(a.h2,{id:"fun\xe7\xf5es-relaciondas",children:"Fun\xe7\xf5es Relaciondas"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.a,{href:"/pt-BR/docs/scripting/functions/GetPlayerKeys",children:"GetPlayerKeys"}),": Verifica qual tecla o jogador est\xe1 pressionando."]}),"\n"]}),"\n",(0,o.jsx)(a.h2,{id:"informa\xe7\xe3o-adicional",children:"Informa\xe7\xe3o Adicional"}),"\n",(0,o.jsx)(a.h3,{id:"introdu\xe7\xe3o",children:"Introdu\xe7\xe3o"}),"\n",(0,o.jsx)(a.p,{children:'Esta callback \xe9 chamada sempre que um jogador pressionar ou soltar uma das teclas suportadas como dito acima. As teclas suportadas n\xe3o s\xe3o exatamente teclas do teclado, mas sim, teclas mapeadas do San Andreas, isso significa que, por exemplo, voc\xea n\xe3o pode detectar quando algu\xe9m pressiona a tecla espa\xe7o, mas pode detecar quando algu\xe9m pressiona a "sprint key" (bot\xe3o de correr, que pode ou n\xe3o estar definido para o espa\xe7o, pois \xe9 o padr\xe3o).'}),"\n",(0,o.jsx)(a.h3,{id:"par\xe2metros",children:"Par\xe2metros"}),"\n",(0,o.jsx)(a.p,{children:"Os par\xe2metros desta fun\xe7\xe3o \xe9 uma lista de todoas as teclas que est\xe3o sendo pressionadas e de todas as teclas que foram pressionadas at\xe9 o momento. Esta callback \xe9 chamada quando o estado da tecla muda (pressionada/solta) e passa os estados de todas a teclas. Isso pode ser usado para ver o que exatamente acontece, pois as vari\xe1veis n\xe3o podem ser usadas diretamente como ocorre com os par\xe2metros de outras fun\xe7\xf5es, para reduzir o n\xfamero de vari\xe1vies um \xfanico BIT \xe9 utilizado para representar a tecla, isso significa que uma vari\xe1vel pode conter m\xfaltiplas teclas, ent\xe3o comparar os valores nem sempre ir\xe1 funcionar."}),"\n",(0,o.jsx)(a.h3,{id:"como-n\xe3o-verificar-uma-tecla",children:"Como n\xe3o verificar uma tecla"}),"\n",(0,o.jsx)(a.p,{children:"Vamos presumir que voc\xea deseja detectar quando um jogador pressiona o bot\xe3o FIRE (de atirar), o c\xf3digo \xf3bbio seria:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"if (newkeys == KEY_FIRE)\n"})}),"\n",(0,o.jsx)(a.p,{children:'Este c\xf3digo pode funcionar no seu teste, mas est\xe1 errado e seu teste \xe9 insuficiente. Tente agaixar e atirar, o seu c\xf3digo ir\xe1 para de funcionar instantaneamente. Por que? pois "newkeys" n\xe3o \xe9 mais "KEY_FIRE", agora \xe9 o mesmo que "KEY_FIRE" junto de "KEY_CROUCH" (tecla para abaixar).'}),"\n",(0,o.jsx)(a.h3,{id:"como-verificar-uma-tecla-corretamente",children:"Como verificar uma tecla corretamente"}),"\n",(0,o.jsx)(a.p,{children:"Ent\xe3o, se a vari\xe1vel pode conter m\xfaltiplas teclas, de uma vez, como voc\xea verifica por uma \xfanica tecla? Cada tecla cont\xe9m seu \xfanica bit na vari\xe1vel (algumas teclas cont\xe9m o mesmo bit, mas s\xe3o teclas a p\xe9/ve\xedculo, ent\xe3o n\xe3o podem ser pressionadas ao mesmo tempo de qualquer maneira) e voc\xea precisa verificar por aquele determinado e \xfanico bit:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"if (newkeys & KEY_FIRE)\n"})}),"\n",(0,o.jsxs)(a.p,{children:["Note that the single ",(0,o.jsx)("strong",{children:"&"})," is correct - this is a bitwise AND, not a logical AND, which is what the two ampersands are called."]}),"\n",(0,o.jsxs)(a.p,{children:["Note que o ",(0,o.jsx)("strong",{children:"&"})," sozinho est\xe1 correto, este \xe9 um AND bitwise e n\xe3o um AND l\xf3gico."]}),"\n",(0,o.jsx)(a.p,{children:'Agora se testar o c\xf3digo ir\xe1 funcionar, mesmo se agaixar ou levantar e pressionar a tecla de atirar. Entretanto, ainda h\xe1 um pequeno problema, ir\xe1 atirar desde que voc\xea esteja pressionando a tecla. OnPlayerKeyStateChange \xe9 chamado sempre que uma tecla muda, e aquele c\xf3digo \xe9 verdadeire sempre que a bot\xe3o de atirar e pressionado. Se voc\xea pressionar "fire" o c\xf3digo ser\xe1 chamado, por\xe9m se essa tecla estiver pressionada e voc\xea pressionar a tecla para agaixar o c\xf3digo ser\xe1 chamda de novo, pois pressinou a tecla para agaixar. Como detectar quando uma tecla \xe9 PRIMEIRAMENTE pressionada mas n\xe3o chamada novamente quando pressionada e segurada e outra tecla \xe9 pressionada?'}),"\n",(0,o.jsx)(a.h3,{id:"como-verificar-uma-tecla-que-foi-pressionada",children:"Como verificar uma tecla que foi pressionada"}),"\n",(0,o.jsx)(a.p,{children:'Aqui \xe9 onde o "oldkeys" entra. Para verificar se uma tecla acabou de ser pressionada voc\xea precisa primeiramente verificar se ela est\xe1 no "newkeys", isso quer dizer que est\xe1 pressionada, e verificar se n\xe3o est\xe1 no "oldkeys", isso quer dizer que apenas foi pressionada e segurada, o c\xf3digo a seguir exemplifica isso:'}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"if ((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE))\n"})}),"\n",(0,o.jsx)(a.p,{children:'Ser\xe1 verdadeiro quando a tecla "fire" for primeiramente pressionada, n\xe3o quando \xe9 pressionada e segurada e outra tecla muda.'}),"\n",(0,o.jsx)(a.h3,{id:"como-verificar-por-uma-tecla-que-est\xe1-sendo-pressionada",children:"Como verificar por uma tecla que est\xe1 sendo pressionada"}),"\n",(0,o.jsx)(a.p,{children:"O mesmo princ\xedpio que o visto acima, por\xe9m invertido:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"if ((oldkeys & KEY_FIRE) && !(newkeys & KEY_FIRE))\n"})}),"\n",(0,o.jsx)(a.h3,{id:"como-verificar-por-m\xfaltiplas-teclas",children:"Como verificar por m\xfaltiplas teclas"}),"\n",(0,o.jsx)(a.p,{children:'Se quer verificar se o jogador est\xe1 pressionando "crouch" e "fire" ent\xe3o o c\xf3digo a seguir funcionar\xe1:'}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"if ((newkeys & KEY_FIRE) && (newkeys & KEY_CROUCH))\n"})}),"\n",(0,o.jsx)(a.p,{children:'N\xe3o funcionar\xe1 se quiser detectar quando primeiramente pressionarem "fire" e ent\xe3o o "crouch".'}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"if ((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) && !(oldkeys & KEY_CROUCH))\n"})}),"\n",(0,o.jsx)(a.p,{children:'Why not? Because OnPlayerKeyStateChange is called every time a single key changes. So they press "KEY_FIRE" - OnPlayerKeyStateChange is called with "KEY_FIRE" in "newkeys" and not in "oldkeys", then they press "KEY_CROUCH" - OnPlayerKeyStateChange is called with "KEY_CROUCH" and "KEY_FIRE" in "newkeys", but "KEY_FIRE" is now also in "oldkeys" as it\'s already been pressed, so "!(oldkeys & KEY_FIRE)" will fail. Fortunately the solution is very simple (in fact simpler than the original code):'}),"\n",(0,o.jsx)(a.p,{children:'Por que n\xe3o? Pois OnPlayerKeyStateChange \xe9 chamada sempre que uma \xfanica tecla muda. Ent\xe3o ao pressionar "KEY_FIRE" OnPlayerKeyStateChange ser\xe1 chamado com "KEY_FIRE" no "newkeys" e n\xe3o no "oldkeys", ent\xe3o ao pressionar "KEY_CROUCH" OnPlayerKeyStateChange ser\xe1 chamado com "KEY_CROUCH" e "KEY_FIRE" no "newkeys", mas "KEY_FIRE" agora tamb\xe9m est\xe1 no "oldkeys" pois j\xe1 foi pressionado, ent\xe3o "!(oldkeys & KEY_FIRE)" ir\xe1 falhar. Felizmente, a solu\xe7\xe3o \xe9 bem simples:'}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"if ((newkeys & (KEY_FIRE | KEY_CROUCH)) == (KEY_FIRE | KEY_CROUCH) && (oldkeys & (KEY_FIRE | KEY_CROUCH)) != (KEY_FIRE | KEY_CROUCH))\n"})}),"\n",(0,o.jsx)(a.p,{children:'Parece complicado, mas ele verifica ambas as teclas que est\xe3o no "newkeys" e ambas as teclas que n\xe3o est\xe3o no "oldkeys", se uma delas estiver no "oldkeys" n\xe3o ir\xe1 importar pois n\xe3o \xe9 ambas que est\xe3o l\xe1. Tudo isso pode ser simplificado com bonitos e \xf3timos "defines".'}),"\n",(0,o.jsx)(a.h2,{id:"simplifica\xe7\xe3o",children:"Simplifica\xe7\xe3o"}),"\n",(0,o.jsx)(a.h3,{id:"detectando-uma-tecla-sendo-pressionada",children:"Detectando uma tecla sendo pressionada"}),"\n",(0,o.jsx)(a.p,{children:"A defini\xe7\xe3o:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"// HOLDING(keys)\n#define HOLDING(%0) \\\n	((newkeys & (%0)) == (%0))\n"})}),"\n",(0,o.jsx)(a.p,{children:"Pressionando uma tecla:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"if (HOLDING( KEY_FIRE ))\n"})}),"\n",(0,o.jsx)(a.p,{children:"Pressionando m\xfaltiplas teclas:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"if (HOLDING( KEY_FIRE | KEY_CROUCH ))\n"})}),"\n",(0,o.jsx)(a.h3,{id:"detectando-a-primeira-tecla-que-foi-pressionada",children:"Detectando a primeira tecla que foi pressionada"}),"\n",(0,o.jsx)(a.p,{children:"A defini\xe7\xe3o:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"// PRESSED(keys)\n#define PRESSED(%0) \\\n	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))\n"})}),"\n",(0,o.jsx)(a.p,{children:"Uma tecla que foi pressionada:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"if (PRESSED( KEY_FIRE ))\n"})}),"\n",(0,o.jsx)(a.p,{children:"M\xfaltiplas teclas que foram pressionadas:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"if (PRESSED( KEY_FIRE | KEY_CROUCH ))\n"})}),"\n",(0,o.jsx)(a.h3,{id:"detectando-se-o-jogador-atualmente-est\xe1-pressionando-uma-tecla",children:"Detectando se o jogador, atualmente, est\xe1 pressionando uma tecla"}),"\n",(0,o.jsx)(a.p,{children:"A defini\xe7\xe3o:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"// PRESSING(keyVariable, keys)\n#define PRESSING(%0,%1) \\\n	(%0 & (%1))\n"})}),"\n",(0,o.jsx)(a.p,{children:"Pressionando uma tecla:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"if (PRESSING( newkeys, KEY_FIRE ))\n"})}),"\n",(0,o.jsx)(a.p,{children:"Pressionando m\xfaltiplas teclas:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"if (PRESSING( newkeys, KEY_FIRE | KEY_CROUCH ))\n"})}),"\n",(0,o.jsx)(a.h3,{id:"detectando-uma-tecla-que-foi-solta",children:"Detectando uma tecla que foi solta"}),"\n",(0,o.jsx)(a.p,{children:"A defini\xe7\xe3o:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"// RELEASED(keys)\n#define RELEASED(%0) \\\n	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))\n"})}),"\n",(0,o.jsx)(a.p,{children:"Uma tecla solta:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"if (RELEASED( KEY_FIRE ))\n"})}),"\n",(0,o.jsx)(a.p,{children:"M\xfaltiplas teclas soltas:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"if (RELEASED( KEY_FIRE | KEY_CROUCH ))\n"})}),"\n",(0,o.jsx)(a.h2,{id:"exemplos",children:"Exemplos"}),"\n",(0,o.jsx)(a.h3,{id:"anexar-nos-quando-o-jogador-pressionar-fire-atirar",children:"Anexar NOS quando o jogador pressionar 'fire' (atirar)"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"public OnPlayerKeyStateChange(playerid, KEY:newkeys, KEY:oldkeys)\n{\n	if (PRESSED(KEY_FIRE))\n	{\n		if (IsPlayerInAnyVehicle(playerid))\n		{\n			AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);\n		}\n	}\n	return 1;\n}\n"})}),"\n",(0,o.jsx)(a.h3,{id:"super-pulo",children:"Super pulo"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"public OnPlayerKeyStateChange(playerid, KEY:newkeys, KEY:oldkeys)\n{\n	if (PRESSED(KEY_JUMP))\n	{\n		new\n			Float:x,\n			Float:y,\n			Float:z;\n		GetPlayerPos(playerid, x, y, z);\n		SetPlayerPos(playerid, x, y, z + 10.0);\n	}\n	return 1;\n}\n"})}),"\n",(0,o.jsx)(a.h3,{id:"modo-deus-ativado-enquanto-estiver-pressionando-uma-tecla",children:"Modo Deus ativado enquanto estiver pressionando uma tecla"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-c",children:"new\n	Float:gPlayerHealth[MAX_PLAYERS];\n\n#if !defined INFINITY\n	#define INFINITY (Float:0x7F800000)\n#endif\n\npublic OnPlayerKeyStateChange(playerid, KEY:newkeys, KEY:oldkeys)\n{\n	if (PRESSED(KEY_ACTION))\n	{\n		// Pressionaram a tecla, salve a vida antiga e ativa o modo Deus\n		GetPlayerHealth(playerid, gPlayerHealth[playerid]);\n		SetPlayerHealth(playerid, INFINITY);\n	}\n	else if (RELEASED(KEY_ACTION))\n	{\n		// Soltaram a tecla, restaura a vida antiga e desative o modo Deus\n		SetPlayerHealth(playerid, gPlayerHealth[playerid]);\n	}\n	return 1;\n}\n"})}),"\n",(0,o.jsx)(a.h3,{id:"explica\xe7\xe3o",children:"Explica\xe7\xe3o"}),"\n",(0,o.jsx)(a.p,{children:"Voc\xea n\xe3o precisa saber como \xe9 feito, apenas que \xe9 assim. HOLDING detecta se o jogador est\xe1 PRESSIONANDO uma tecla ou teclas, PRESSED detecta a tecla(s) que j\xe1 foram PRESSIONADAS, RELEASED detecta se uma tecla(s) foi SOLTA."}),"\n",(0,o.jsx)(a.p,{children:"O motivo de precisar fazer assim, e n\xe3o apenas usando & ou ==, \xe9 para exatamente detectar as teclas que deseja e ignorar as outra, as quais podem ou n\xe3o terem sido pressionadas, em bin\xe1rio KEY_SPRINT \xe9:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"0b00001000\n"})}),"\n",(0,o.jsx)(a.p,{children:"e KEY_JUMP \xe9:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"0b00100000\n"})}),"\n",(0,o.jsx)(a.p,{children:'Se apenas estivessemos usando & e OnPlayerKeyStateChange for chamado por um jogador pressiondo o "jump" poderiamos obter o c\xf3digo a seguir:'}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"newkeys = 0b00100000\nwanted  = 0b00101000\nANDed   = 0b00100000\n"})}),"\n",(0,o.jsx)(a.p,{children:"O AND dos dois n\xfameros n\xe3o \xe9 0, portanto o resultado \xe9 verdadeiro, o que n\xe3o \xe9 o que queremos."}),"\n",(0,o.jsx)(a.p,{children:"Se apenas usarmos == os dois n\xfameros claramente n\xe3o s\xe3o os mesmos, portanto a verifica\xe7\xe3o iria falhar, \xe9 o que queremos."}),"\n",(0,o.jsx)(a.p,{children:'Se o jogador estivesse pressionando "jump" (pulo), "sprint" (correr) e crouch (agaixar), n\xf3s teriamos o seguinte c\xf3digo:'}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"newkeys = 0b00101010\nwanted  = 0b00101000\nANDed   = 0b00101000\n"})}),"\n",(0,o.jsx)(a.p,{children:"A vers\xe3o ANDed \xe9 o mesmo que as teclas necess\xe1rias e tamb\xe9m n\xe3o \xe9 0, portante ir\xe1 dar a resposta correta, entretanto, os dois n\xfameros originais n\xe3o s\xe3o o mesmo, ent\xe3o == ir\xe1 falhar. Em ambos os exemplos um dos dois resultaram na resposta correta, e outra na errada. Se compararmos o primeiro usando & e == teremos:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"newkeys = 0b00100000\nwanted  = 0b00101000\nANDed   = 0b00100000\n"})}),"\n",(0,o.jsx)(a.p,{children:'Obviamente "wanted" e ANDed n\xe3o s\xe3o o mesmo, ent\xe3o a verifica\xe7\xe3o falha, o que \xe9 correto, para o segundo exemplo:'}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{children:"newkeys = 0b00101010\nwanted  = 0b00101000\nANDed   = 0b00101000\n"})}),"\n",(0,o.jsx)(a.p,{children:'"wanted" e ANDed s\xe3o o mesmo, ent\xe3o comparando-os ir\xe1 retornar verdadeiro, o que novamente \xe9 correto.'}),"\n",(0,o.jsx)(a.p,{children:'Ent\xe3o usando este m\xe9todo, podemos precisamente verificar se determinadas teclas foram ou n\xe3o pressionadas e ignorar todas as outras teclas. O "oldkeys" usa em sua verifica\xe7\xe3o != ao inv\xe9s de == para garantir que as teclas n\xe3o foram previamente pressionadas, ent\xe3o sabemos que uma delas foi pressionada.'})]})}function p(e={}){let{wrapper:a}={...(0,r.a)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},50065:function(e,a,s){s.d(a,{Z:()=>d,a:()=>i});var n=s(67294);let o={},r=n.createContext(o);function i(e){let a=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(r.Provider,{value:a},e.children)}}}]);