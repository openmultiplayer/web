"use strict";(self.webpackChunkomp_web=self.webpackChunkomp_web||[]).push([["28932"],{46281:function(e,a,n){n.r(a),n.d(a,{frontMatter:()=>i,toc:()=>c,default:()=>u,metadata:()=>o,assets:()=>l,contentTitle:()=>d});var o=JSON.parse('{"id":"scripting/language/ControlStructures","title":"Estruturas de Controle","description":"Condicionais","source":"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/scripting/language/ControlStructures.md","sourceDirName":"scripting/language","slug":"/scripting/language/ControlStructures","permalink":"/pt-BR/docs/scripting/language/ControlStructures","draft":false,"unlisted":false,"editUrl":"https://github.com/openmultiplayer/web/edit/master/frontend/docs/scripting/language/ControlStructures.md","tags":[],"version":"current","frontMatter":{"title":"Estruturas de Controle","sidebar_label":"Estruturas de Controle"},"sidebar":"docsSidebar","previous":{"title":"Appendices","permalink":"/pt-BR/docs/scripting/language/reference/Appendices"},"next":{"title":"Diretivas","permalink":"/pt-BR/docs/scripting/language/Directives"}}'),s=n(85893),r=n(50065);let i={title:"Estruturas de Controle",sidebar_label:"Estruturas de Controle"},d=void 0,l={},c=[{value:"Condicionais",id:"condicionais",level:2},{value:"if",id:"if",level:3},{value:"Operadores",id:"operadores",level:3},{value:"Par\xeanteses",id:"par\xeanteses",level:3},{value:"else",id:"else",level:3},{value:"else if",id:"else-if",level:3},{value:"?:",id:"",level:3},{value:"Loops",id:"loops",level:2},{value:"While",id:"while",level:3},{value:"for()",id:"for",level:3},{value:"do-while",id:"do-while",level:3},{value:"if-goto",id:"if-goto",level:3},{value:"OBOE",id:"oboe",level:3},{value:"Switch",id:"switch",level:2},{value:"switch",id:"switch-1",level:3},{value:"case",id:"case",level:3},{value:"default",id:"default",level:3},{value:"Declara\xe7\xf5es de linhas \xfanicas",id:"declara\xe7\xf5es-de-linhas-\xfanicas",level:2},{value:"goto",id:"goto",level:3},{value:"break",id:"break",level:3},{value:"continue",id:"continue",level:3},{value:"return",id:"return",level:3}];function t(e){let a={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"condicionais",children:"Condicionais"}),"\n",(0,s.jsx)(a.h3,{id:"if",children:"if"}),"\n",(0,s.jsx)(a.p,{children:'O uso de "if" (se) verifica se algo \xe9 verdadeiro e caso seja, realiza alguma coisa.'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:'new\n    a = 5;\nif (a == 5)\n{\n    print("a \xe9 5");\n}\n'})}),"\n",(0,s.jsx)(a.p,{children:'O c\xf3digo entre os par\xeanteses ap\xf3s o "if" \xe9 chamado de condi\xe7\xe3o, h\xe1 in\xfameras formas diferentes que voc\xea pode usar e testar este condicional (veja os operadores).'}),"\n",(0,s.jsx)(a.p,{children:'No exemplo acima, ambos "a" e "5" s\xe3o s\xedmbolos, fun\xe7\xf5es tamb\xe9m podem ser s\xedmbolos:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:'if (AlgumaFun\xe7\xe3o() == 5)\n{\n    print("AlgumaFun\xe7\xe3o() \xe9 5");\n}\n'})}),"\n",(0,s.jsx)(a.p,{children:'Isso retornar\xe1 o valor de AlgumaFun\xe7\xe3o (veja abaixo) e ir\xe1 comparar com "5".'}),"\n",(0,s.jsx)(a.p,{children:"Voc\xea tamb\xe9m podem combinar verifica\xe7\xf5es, para checar m\xfaltiplas coisas:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:'new\n    a = 5,\n    b = 3;\nif (a == 5 && b != 3)\n{\n    print("N\xe3o ser\xe1 impresso no log");\n}\n'})}),"\n",(0,s.jsx)(a.p,{children:'Esse exemplo verifica se "a" \xe9 igual a "5" E se "b" n\xe3o \xe9 igual a "3", por\xe9m, "b" \xe9 igual a "3", ent\xe3o a verifica\xe7\xe3o falha.'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:'new\n    a = 5,\n    b = 3;\nif (a == 5 || b != 3)\n{\n    print("Ser\xe1 impresso no log");\n}\n'})}),"\n",(0,s.jsx)(a.p,{children:'Esse exemplo verifica se "a" \xe9 igual a "5" OU se "b" n\xe3o \xe9 igual a "3", "b" \xe9 igual a "3" ent\xe3o a segunda parte falha, entretanto "a" \xe9 "5", ent\xe3o essa parte \xe9 verdadeira, n\xf3s estamos usando || (OU) ent\xe3o apenas uma das partes precisa ser verdadeira (se ambas as partes s\xe3o verdadeiras, a condi\xe7\xe3o continua sendo verdadeira, isso \xe9 levemente diferente do significado lingu\xedstico de "ou", significando apenas um, ou outro), ent\xe3o a condi\xe7\xe3o \xe9 verdadeira.'}),"\n",(0,s.jsx)(a.p,{children:"Do mesmo modo, tamb\xe9m \xe9 poss\xedvel encadear duas compara\xe7\xf5es sem a necessidade, explicitamente falando, de usar AND de duas compara\xe7\xf5es diferentes."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:'new\n    idx = 3;\n\nif (0 < idx < 5)\n{\n    print("idx \xe9 maior que 0 e menor que 5!");\n}\n'})}),"\n",(0,s.jsx)(a.h3,{id:"operadores",children:"Operadores"}),"\n",(0,s.jsx)(a.p,{children:'Os s\xedmbolos a seguir s\xe3o os que voc\xea pode utilizar em compara\xe7\xf5es, ao lado suas explica\xe7\xf5es. Alguns j\xe1 foram utilizados em exemplos. Atente-se pois utilizamos "Esquerda" para indicar o valor que est\xe1 ao lado esquerdo do operador, e "Direita" para indicar o valor que est\xe1 ao lado direito do operador.'}),"\n",(0,s.jsxs)(a.table,{children:[(0,s.jsx)(a.thead,{children:(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.th,{children:"Operador"}),(0,s.jsx)(a.th,{children:"Significado"}),(0,s.jsx)(a.th,{children:"Uso"})]})}),(0,s.jsxs)(a.tbody,{children:[(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"=="}),(0,s.jsx)(a.td,{children:"Esquerda \xe9 igual a Direita"}),(0,s.jsx)(a.td,{children:"if (Esquerda == Direita)"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"!="}),(0,s.jsx)(a.td,{children:"Esquerda n\xe3o \xe9 igual a Direita"}),(0,s.jsx)(a.td,{children:"if (Esquerda != Direita)"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:">"}),(0,s.jsx)(a.td,{children:"Esquerda \xe9 maior que a Direita"}),(0,s.jsx)(a.td,{children:"if (Esquerda > Direita)"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:">="}),(0,s.jsx)(a.td,{children:"Esquerda \xe9 maior que ou igual a Direita"}),(0,s.jsx)(a.td,{children:"if (Esquerda >= Direita)"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"<"}),(0,s.jsx)(a.td,{children:"Esquerda \xe9 menor que a Direita"}),(0,s.jsx)(a.td,{children:"if (Esquerda < Direita)"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"<="}),(0,s.jsx)(a.td,{children:"Esquerda \xe9 menor ou igual a Direita"}),(0,s.jsx)(a.td,{children:"if (Esquerda <= Direita)"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"&&"}),(0,s.jsx)(a.td,{children:"e"}),(0,s.jsx)(a.td,{children:"if (Esquerda && Direita)"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"||"}),(0,s.jsx)(a.td,{children:"ou"}),(0,s.jsx)(a.td,{children:"if (Esquerda || Direita)"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"!"}),(0,s.jsx)(a.td,{children:"n\xe3o"}),(0,s.jsx)(a.td,{children:"if (!Vari\xe1vel)"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{}),(0,s.jsx)(a.td,{children:"nem"}),(0,s.jsx)(a.td,{children:"if (!(Esquerda || Direita))"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{}),(0,s.jsx)(a.td,{children:"e n\xe3o"}),(0,s.jsx)(a.td,{children:"if (!(Esquerda && Direita))"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{}),(0,s.jsx)(a.td,{children:"exclusivamente ou (xor, eor) - apenas um ou outro \xe9 verdadeiro, ambos n\xe3o"}),(0,s.jsx)(a.td,{children:"if (!(Esquerda && Direita) && (Esquerda ||Direita))"})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{}),(0,s.jsx)(a.td,{children:"n\xe3o exclusivamente ou (nxor, neor) - ambos ou nenhum s\xe3o verdadeiros"}),(0,s.jsx)(a.td,{children:"if ((Esquerda && Direita) || !(Esquerda || Direita))"})]})]})]}),"\n",(0,s.jsx)(a.h3,{id:"par\xeanteses",children:"Par\xeanteses"}),"\n",(0,s.jsx)(a.p,{children:'Outro aspecto principal sobre condi\xe7\xf5es de "if" \xe9 os par\xeanteses, esses controlam a ordem de como tudo \xe9 feito em:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:'new\n    a = 3,\n    b = 3,\n    c = 1;\nif (a == 5 && b == 3 || c == 1)\n{\n    print("Isso ser\xe1 chamado?");\n}\n'})}),"\n",(0,s.jsx)(a.p,{children:"H\xe1 duas maneiras de olhar para a condi\xe7\xe3o acima:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"if ((a == 5 && b == 3) || c == 1)\n"})}),"\n",(0,s.jsx)(a.p,{children:"E:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"if (a == 5 && (b == 3 || c == 1))\n"})}),"\n",(0,s.jsx)(a.p,{children:'A primeira vers\xe3o ir\xe1 verificar se "a" \xe9 igual a "5" e se "b" \xe9 igual a "3", se isso for falso (ou seja, um ou ambos n\xe3o s\xe3o seus respectivos valores) ir\xe1 verificar se "c" \xe9 igual a "1". (a == 5 && b == 3) \xe9 falso como voc\xea p\xf4de ver acima, ent\xe3o voc\xea "substitui" esse grupo por FALSE:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"if (FALSE || c == 1)\n"})}),"\n",(0,s.jsx)(a.p,{children:'Sabemos que FALSE n\xe3o pode ser verdadeiro (assim sendo por defini\xe7\xe3o), todavia "c" \xe9 igual a "1", ent\xe3o esta parte \xe9 verdadeira e como estamos utilizando "OR" toda condi\xe7\xe3o torna-se verdadeira.'}),"\n",(0,s.jsx)(a.p,{children:'A segunda vers\xe3o verifica se "a" \xe9 igual a "5", caso seja o c\xf3digo verificar\xe1 se "b" \xe9 igual a "3" ou se "c" \xe9 igual a "1". O jogo ir\xe1 fazer a parte \'a == 5\' primeiro, mas para deixar claro iremos fazer de tr\xe1s para frente. (b == 3 || c == 1) \xe9 verdadeiro pois ambas as metades s\xe3o verdadeiras, apesar de que apenas uma delas precisa ser, ent\xe3o indo para nossa condi\xe7\xe3o temos:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"if (a == 5 && TRUE)\n"})}),"\n",(0,s.jsx)(a.p,{children:'(a == 5) \xe9 falso, pois "a" \xe9 igual a 3, ent\xe3o teremos:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"if (FALSE && TRUE)\n"})}),"\n",(0,s.jsx)(a.p,{children:"Claramente FALSE \xe9 falso, consequentemente a condi\xe7\xe3o n\xe3o pode ser verdadeira, ent\xe3o a verifica\xe7\xe3o ir\xe1 falhar."}),"\n",(0,s.jsx)(a.p,{children:"Estes pequenos exemplos mostram como o uso de par\xeanteses pode mudar a forma como a verifica\xe7\xe3o funciona, sem par\xeanteses o compilador ser\xe1 o primeiro das duas vers\xf5es demonstradas mas isso n\xe3o \xe9 sempre garantido, ent\xe3o deve sempre usar par\xeanteses, at\xe9 mesmo para esclarecer o que est\xe1 acontecendo para outras pessoas."}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsx)(a.li,{children:'(b != 3) no exemplo de "OR" n\xe3o falha realmente sendo que nunca \xe9 chamado, o compilador orgraniza o c\xf3digo usando um m\xe9todo chamado "short-circuiting" (curto-circuito), como a primeira parte j\xe1 \xe9 verdadeira, n\xe3o h\xe1 necessidade de verificar a segunda parte, sendo que isso n\xe3o afetar\xe1 no resultado, mas se fizesse, a verifica\xe7\xe3o iria falhar.'}),"\n"]}),"\n",(0,s.jsx)(a.h3,{id:"else",children:"else"}),"\n",(0,s.jsx)(a.p,{children:'"else" (sen\xe3o) basicamente faz alguma coisa, caso um "if" falhe:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:'new\n    a = 5;\nif (a == 3) // Falso\n{\n    print("N\xe3o ser\xe1 chamado");\n}\nelse\n{\n    print("Como a verifica\xe7\xe3o falhou, ser\xe1 chamado.");\n}\n'})}),"\n",(0,s.jsx)(a.h3,{id:"else-if",children:"else if"}),"\n",(0,s.jsx)(a.p,{children:'Um "else if" (sen\xe3o se) \xe9 uma verifica\xe7\xe3o que ocorre caso a primeira falhe para checar algo:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:'new\n    a = 5;\nif (a == 1)\n{\n    print("Ser\xe1 chamado caso a seja 1");\n}\nelse if (a == 5)\n{\n    print("Ser\xe1 chamado caso a seja 5");\n}\nelse\n{\n    print("Todos os outros n\xfameros");\n}\n'})}),"\n",(0,s.jsx)(a.p,{children:'Voc\xea pode ter quantos desses quiser (voc\xea apenas pode ter um "if" e um "else" em um grupo de verifica\xe7\xe3o):'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"new\n    a = 4;\nif (a == 1)\n{\n    // Falso\n}\nelse if (a == 2)\n{\n    // Falso\n}\nelse if (a == 3)\n{\n    // Falso\n}\nelse if (a == 4)\n{\n    // Verdadeiro\n}\nelse\n{\n    // Falso\n}\n"})}),"\n",(0,s.jsx)(a.p,{children:'Os "else if" ir\xe3o verificar o valor como era quando a sequ\xeancia come\xe7ou, ent\xe3o voc\xea n\xe3o pode fazer:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:'new\n    a = 5;\nif (a == 5)\n{\n    // Ser\xe1 chamado\n    a = 4;\n}\nelse if (a == 4)\n{\n    // N\xe3o ser\xe1 chamado, pois a primeira verifica\xe7\xe3o n\xe3o falhou, mesmo "a" sendo "4" agora\n}\n'})}),"\n",(0,s.jsx)(a.p,{children:'Para contornar isso, voc\xea apenas faria um "else" caso um "if".'}),"\n",(0,s.jsx)(a.h3,{id:"",children:"?:"}),"\n",(0,s.jsx)(a.p,{children:"'?' e ':' juntos s\xe3o chamados de um operador tri\xe1dico, eles basicamente agem como um \"if\" dentro de outra declara\xe7\xe3o:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"new\n    a,\n    b = 3;\nif (b == 3)\n{\n    a = 5;\n}\nelse\n{\n    a = 7;\n}\n"})}),"\n",(0,s.jsx)(a.p,{children:"Esse foi um exemplos simples para atribuir a uma vari\xe1vel um valor baseado em outra vari\xe1vel, por\xe9m pode ser simplificado:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"new\n    a,\n    b = 3;\na = (b == 3) ? (5) : (7);\n"})}),"\n",(0,s.jsx)(a.p,{children:"A parte antes do '?' \xe9 a condi\xe7\xe3o, \xe9 exatamente o mesmo que uma condi\xe7\xe3o normal. A parte entre o '?' e o ':' \xe9 o valor que ir\xe1 retornar se a condi\xe7\xe3o for verdadeira, a outro parte \xe9 o valor que ir\xe1 retornar se a condi\xe7\xe3o for falsa."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"new\n    a,\n    b = 3;\nif (b == 1)\n{\n    a = 2;\n}\nelse if (b == 2)\n{\n    a = 3;\n}\nelse if (b == 3)\n{\n    a = 4;\n}\nelse\n{\n    a = 5;\n}\n"})}),"\n",(0,s.jsx)(a.p,{children:"Pode ser escrito como:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"new\n    a,\n    b = 3;\na = (b == 1) ? (2) : ((b == 2) ? (3) : ((b == 3) ? (4) : (5)));\n"})}),"\n",(0,s.jsx)(a.p,{children:"Isso \xe9 pr\xf3ximo com fazer:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"new\n    a,\n    b = 3;\nif (b == 1)\n{\n    a = 2;\n}\nelse\n{\n    if (b == 2)\n    {\n        a = 3;\n    }\n    else\n    {\n        if (b == 3)\n        {\n            a = 4;\n        }\n        else\n        {\n            a = 5;\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(a.p,{children:"Mas eles s\xe3o equivalentes (neste exemplo tanto faz)"}),"\n",(0,s.jsx)(a.h2,{id:"loops",children:"Loops"}),"\n",(0,s.jsx)(a.h3,{id:"while",children:"While"}),"\n",(0,s.jsx)(a.p,{children:'"while" (enquanto) loops fazem algo enquanto uma condi\xe7\xe3o espec\xedfica for verdadeira. A condi\xe7\xe3o \xe9 exatamente no mesmo formato do que uma condi\xe7\xe3o em uma declara\xe7\xe3o de "if", ela \xe9 apenas verificada repetidamente e o c\xf3digo \xe9 feito todo vez que for verdadeiro quando verificado:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"new\n    a = 9;\nwhile (a < 10)\n{\n    // C\xf3digo no loop\n    a++;\n}\n// C\xf3digo ap\xf3s o loop\n"})}),"\n",(0,s.jsx)(a.p,{children:'O c\xf3digo ir\xe1 verificar se "a" \xe9 menor que "10". Caso seja, o c\xf3digo dentro das chaves (a++;) ser\xe1 executado, portanto incrementando "a". Quando as chaves s\xe3o alca\xe7adas o c\xf3digo pula de volta para a verifica\xe7\xe3o e faz a mesmo coisa novamente, dessa vez a verifica\xe7\xe3o ir\xe1 falhar, pois "a" \xe9 igual a "10" e a execu\xe7\xe3o ir\xe1 pular para depois do loop. Se "a" fosse igual a "8" o c\xf3digo seria executado duas vezes, assim por diante.'}),"\n",(0,s.jsx)(a.h3,{id:"for",children:"for()"}),"\n",(0,s.jsx)(a.p,{children:'Um "for" (para) loop \xe9 essencialmente um "while" comprimido. Um "for" cont\xe9m tr\xeas se\xe7\xf5es: "Inicializa\xe7\xe3o, Condi\xe7\xe3o e Finaliza\xe7\xe3o". Para escrever o exemplo de "while" acima como um loop "for":'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"for (new a = 9; a < 10; a++)\n{\n    // C\xf3digo no loop\n}\n// C\xf3digo ap\xf3s o loop\n"})}),"\n",(0,s.jsx)(a.p,{children:"Este \xe9 um simples c\xf3digo para realizar um loop atrav\xe9s de todos os players:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"for(new i,a = GetMaxPlayers(); i < a; i++)\n{\n        if(IsPlayerConnected(i))\n        {\n                 //Fa\xe7a algo\n        }\n}\n"})}),"\n",(0,s.jsx)(a.p,{children:"Ambas as condi\xe7\xf5es podem ser omitidas simplesmente n\xe3o colocando c\xf3digo nelas:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"new\n    a = 9;\nfor ( ; a < 10; )\n{\n    // C\xf3digo no loop\n    a++;\n}\n// C\xf3digo ap\xf3s o loop\n"})}),"\n",(0,s.jsx)(a.p,{children:'Esse exemplo torna f\xe1cil demonstrar como que um "for" encaixa-se com um "while". H\xe1 duas simples diferen\xe7as entre os dois "for" loops dados. O primeiro \xe9 que o segundo exemplo declara "a" fora do loop "for", isso significa que tamb\xe9m pode ser usado fora do loop, no primeiro exemplo o escopo de "a" (se\xe7\xe3o do c\xf3digo para qual a vari\xe1vel existe) est\xe1 apenas dentro do loop. A segunda diferen\xe7a \xe9 que o "a++" no segundo exemplo \xe9 na verdade feito ap\xf3s o "a++" do primeiro exemplo, 99% dos casos isso n\xe3o faz diferen\xe7a alguma, isso importa apenas quando voc\xea estiver usando "continue" (veja abaixo), "continue" ir\xe1 chamar o "a++" no primeiro exemplo, mas ir\xe1 pular no segundo exemplo.'}),"\n",(0,s.jsx)(a.h3,{id:"do-while",children:"do-while"}),"\n",(0,s.jsx)(a.p,{children:'Um "do-while" (fa\xe7a enquanto) loop \xe9 um loop onde a condi\xe7\xe3o vem ap\xf3s o c\xf3digo dentre do loop, ao inv\xe9s de antes. Isso significa que o c\xf3digo dentro sempre ser\xe1 executado ao menos uma vez, pois a verifica\xe7\xe3o ocorre ap\xf3s o c\xf3digo dentro do loop.'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"new\n    a = 10;\ndo\n{\n    // C\xf3digo no loop\n    a++;\n}\nwhile (a < 10); // Note o ponto e v\xedrgula\n// C\xf3digo ap\xf3s o loop\n"})}),"\n",(0,s.jsx)(a.p,{children:'Se esse fosse um "while" b\xe1sico "a" n\xe3o seria incrementado, pois (a < 10) \xe9 falso, mas aqui \xe9 incrementado antes da verifica\xe7\xe3o. Caso fosse "9" o loop seria executado apenas uma vez, "8" duas vezses, assim em diante.'}),"\n",(0,s.jsx)(a.h3,{id:"if-goto",children:"if-goto"}),"\n",(0,s.jsx)(a.p,{children:"Esse \xe9 essencialmente o que os loops acima fazem, o seu uso n\xe3o \xe9 geralmente aconselhado, entretanto \xe9 interessante ver como exatamente o loop funciona:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"new\n    a = 9;\n\nloop_start:\nif (a < 10)\n{\n    // C\xf3digo no loop\n    a++;\n    goto loop_start;\n}\n// C\xf3digo ap\xf3s o loop\n"})}),"\n",(0,s.jsx)(a.h3,{id:"oboe",children:"OBOE"}),"\n",(0,s.jsx)(a.p,{children:'OBOE significa "Off By One Error" (Desligado por um erro). Esse \xe9 um erro muito comum onde o loop \xe9 executado muitas vezes ou poucas vezes, por exemplo:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"new\n    a = 0,\n    b[10];\nwhile (a <= sizeof (b))\n{\n    b[a] = 0;\n}\n"})}),"\n",(0,s.jsx)(a.p,{children:'Este exemplo simples demonstra um dos mais comuns OBOE\'s, de primeiro relance as possoes podem pensar que isso ir\xe1 realizar um loop atrav\xe9s de todo conte\xfado de "b" e coloca-los como "0", entretanto, este loop ir\xe1 rodar 11 vezes e tentar\xe1 acessar "b[10], que n\xe3o existe (pois seria o 11\xba slot em "b" come\xe7ando em 0), entretando pode causar todos os tipos de problemas. Esse \xe9 conhecido como um erro "Out Of Bounds" (Fora dos Limites).'}),"\n",(0,s.jsx)(a.p,{children:'Voc\xea deve ser muito cuidadose com OBOEs quando estiver usando um "do-while" loop, pois eles SEMPRE rodam pelo menos uma vez.'}),"\n",(0,s.jsx)(a.h2,{id:"switch",children:"Switch"}),"\n",(0,s.jsx)(a.h3,{id:"switch-1",children:"switch"}),"\n",(0,s.jsx)(a.p,{children:'Um "switch" (troca) \xe9 basicamente uma forma estruturada de if/else (assim como "for" \xe9 uma forma estruturada de "while"). A forma mais f\xe1cil de explicar \xe9 com um exemplo:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"new\n    a = 5;\nswitch (a)\n{\n    case 1:\n    {\n        // N\xe3o ser\xe1 chamado\n    }\n    case 2:\n    {\n        // N\xe3o ser\xe1 chamado\n    }\n    case 5:\n    {\n        // Ser\xe1 chamado\n    }\n    default:\n    {\n        // N\xe3o ser\xe1 chamado\n    }\n}\n"})}),"\n",(0,s.jsx)(a.p,{children:"Isso \xe9, funcionalmente falando, equivalente a:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"new\n    a = 5;\nif (a == 1)\n{\n    // N\xe3o ser\xe1 chamado\n}\nelse if (a == 2)\n{\n    // N\xe3o ser\xe1 chamado\n}\nelse if (a == 5)\n{\n    // Ser\xe1 chamado\n}\nelse\n{\n    // N\xe3o ser\xe1 chamado\n}\n"})}),"\n",(0,s.jsx)(a.p,{children:"Entretanto, \xe9 levemente mais claro de ver o que est\xe1 acontecendo."}),"\n",(0,s.jsx)(a.p,{children:'Um ponto importante para notar aqui, \xe9 as diferentes formas em que um "if" e um "switch" s\xe3o processados.'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"switch (AlgumaFun\xe7\xe3o())\n{\n    case 1: {}\n    case 2: {}\n    case 3: {}\n}\n"})}),"\n",(0,s.jsx)(a.p,{children:"Isso ir\xe1 chamar AlgumaFun\xe7\xe3o() UMA VEZ e ir\xe1 comparar seu resultado 3 vezes."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"if (AlgumaFun\xe7\xe3o() == 1) {}\nelse if (AlgumaFun\xe7\xe3o() == 2) {}\nelse if (AlgumaFun\xe7\xe3o() == 3) {}\n"})}),"\n",(0,s.jsx)(a.p,{children:'Isso ir\xe1 chamar AlgumaFun\xe7\xe3o() 3 vezes, que \xe9 muito ineficiente, um "switch" \xe9 como fazer:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"new\n    result = AlgumaFun\xe7\xe3o();\nif (result == 1) {}\nelse if (result == 2) {}\nelse if (result == 3) {}\n"})}),"\n",(0,s.jsx)(a.p,{children:'Para aqueles que conhecem C, o "switch" do PAWN \xe9 levemente diferente, as condi\xe7\xf5es individuais N\xc3O S\xc3O "fall-through" e s\xe3o limitadas por chaves, ent\xe3o n\xe3o h\xe1 necessidade de colocar um "break".'}),"\n",(0,s.jsx)(a.h3,{id:"case",children:"case"}),"\n",(0,s.jsx)(a.p,{children:'Um "case" (caso) (as partes individuais do "switch") pode conter outras op\xe7\xf5es al\xe9m de um \xfanico n\xfamero. Voc\xea pode comparar um valor a uma lista de n\xfameros (substituindo "fall-through" em C) ou at\xe9 mesmo um alcance de determinados valores.'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"case 1, 2, 3, 4:\n"})}),"\n",(0,s.jsx)(a.p,{children:'Esse caso ir\xe1 ativar se o s\xedmbolo sendo testado for "1","2","3" ou "4", \xe9 o mesmo que fazer:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"if (bla == 1 || bla == 2 || bla == 3 || bla == 4)\n"})}),"\n",(0,s.jsx)(a.p,{children:"mas para ser mais conciso. N\xfameros em listas n\xe3o necessitam ser consecutivos, de fato se eles forem \xe9 melhor fazer:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"case 1 .. 4:\n"})}),"\n",(0,s.jsx)(a.p,{children:"Esse caso ir\xe1 fazer exatamente o mesmo que o acima, por\xe9m checando em um determinado alcance da lista, \xe9 o mesmo que fazer:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"if (bla >= 1 && bla <= 4)\n"})}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"new\n    a = 4;\nswitch (a)\n{\n    case 1 .. 3:\n    {\n    }\n    case 5, 8, 11:\n    {\n    }\n    case 4:\n    {\n    }\n    default:\n    {\n    }\n}\n"})}),"\n",(0,s.jsx)(a.h3,{id:"default",children:"default"}),"\n",(0,s.jsx)(a.p,{children:'Um "default" (padr\xe3o) \xe9 equivalente a um "else", ele realiza algo caso todos os outros falharem.'}),"\n",(0,s.jsx)(a.h2,{id:"declara\xe7\xf5es-de-linhas-\xfanicas",children:"Declara\xe7\xf5es de linhas \xfanicas"}),"\n",(0,s.jsx)(a.h3,{id:"goto",children:"goto"}),"\n",(0,s.jsx)(a.p,{children:"goto is essentially a jump, it goes to a label without question (i.e. there's no condition to need to be true). You can see an example above in the if-goto loop."}),"\n",(0,s.jsx)(a.p,{children:'Um "goto" (v\xe1 at\xe9) \xe9 essencialmente um pulo, ele vai at\xe9 determinada "label" sem a necessidade de uma condi\xe7\xe3o. Voc\xea pode ver em um exemplo acima um if-goto loop.'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:'goto my_label;\n\n// Esta se\xe7\xe3o ser\xe1 pulada\n\nmy_label: // "Labels" terminam com dois pontos em sua pr\xf3pria linha\n\n// Esta se\xe7\xe3o ser\xe1 processada como normal\n'})}),"\n",(0,s.jsx)(a.p,{children:'O uso de "gotos" \xe9 severamente desaconselhado devido aos seus efeitos no seguimento (flow) do programa.'}),"\n",(0,s.jsx)(a.h3,{id:"break",children:"break"}),"\n",(0,s.jsx)(a.p,{children:'Um "break" (quebra) para e coloca o fim em um loop prematuramente (antes de seu fim padr\xe3o):'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"for (new a = 0; a < 10; a++)\n{\n    if (a == 5) break;\n}\n"})}),"\n",(0,s.jsx)(a.p,{children:"Esse loop ir\xe1 executar 6 vezes, at\xe9 que atinja o break, colocando fim ao loop antes mesmo de acabar."}),"\n",(0,s.jsx)(a.h3,{id:"continue",children:"continue"}),"\n",(0,s.jsx)(a.p,{children:'Um "continue" (continue) pula parte do loop em uma determinada itera\xe7\xe3o:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:'for (new a = 0; a < 3; a++)\n{\n    if (a == 1) continue;\n    printf("a = %d", a);\n}\n'})}),"\n",(0,s.jsx)(a.p,{children:"Isso ir\xe1 resultar em um 'output' de:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"a = 0 a = 2\n"})}),"\n",(0,s.jsx)(a.p,{children:'O "continue" basicamente pula uma parte fechada de chaves dentro do loop, como dito acima, voc\xea precisa ser cuidadoso ao utilizar "continue" em determinados loops:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:'new\n    a = 0;\nwhile (a < 3)\n{\n    if (a == 1) continue;\n    printf("a = %d", a);\n    a++;\n}\n'})}),"\n",(0,s.jsx)(a.p,{children:'Esse \xe9 muito similar ao outro exemplo, entretanto desta vez o "continue" ir\xe1 pular a linha do "a++", ent\xe3o o loop ficar\xe1 preso e repetir\xe1 infinitamente, pois sempre ser\xe1 "1".'}),"\n",(0,s.jsx)(a.h3,{id:"return",children:"return"}),"\n",(0,s.jsx)(a.p,{children:'Um "return" (retorno) ir\xe1 parar uma fun\xe7\xe3o e voltar ao ponto em que a mesma foi chamada:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:'main()\n{\n    print("1");\n    MinhaFun\xe7\xe3o(1);\n    print("3");\n}\n\nMinhaFun\xe7\xe3o(num)\n{\n    if (num == 1)\n    {\n        return;\n    }\n    print("2");\n}\n'})}),"\n",(0,s.jsx)(a.p,{children:"Esse c\xf3digo ir\xe1 gerar um resultado de:"}),"\n",(0,s.jsx)(a.p,{children:"1 3"}),"\n",(0,s.jsx)(a.p,{children:'Pois a linha de "print("2");" nunca ser\xe1 alcan\xe7ada.'}),"\n",(0,s.jsx)(a.p,{children:'Voc\xea tamb\xe9m pode usar um "return" para retornar um valor:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:'main()\n{\n    print("1");\n    if (MinhaFun\xe7\xe3o(1) == 27)\n    {\n        print("3");\n    }\n}\n\nMinhaFun\xe7\xe3o(num)\n{\n    if (num == 1)\n    {\n        return 27;\n    }\n    print("2");\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(a.p,{children:'Esse c\xf3digo ir\xe1 gerar o mesmo resultado que o visto acima, entretanto, note que um "return" adicional foi adicionado ao fim da fun\xe7\xe3o. O fim de uma fun\xe7\xe3o tem um "return" impl\xedcito nela, por\xe9m este retorno n\xe3o tem valor, voc\xea n\xe3o pode retornar um valor e n\xe3o retornar um valor na mesma fun\xe7\xe3o, ent\xe3o precisamos explicitamente retornar um valor.'}),"\n",(0,s.jsx)(a.p,{children:"O s\xedmbolo que voc\xea retorna pode ser um n\xfamero, uma vari\xe1vel ou at\xe9 mesmo outra fun\xe7\xe3o, no caso de outra fun\xe7\xe3o ser chamada, ir\xe1 retornar um valor (ela PRECISA retornar um valor se voc\xea usa-la como um valor de retorno) e esse valor ser\xe1 retornado para a primeira fun\xe7\xe3o."}),"\n",(0,s.jsx)(a.p,{children:'Voc\xea tamb\xe9m pode guardar o valor de um "return" para usar depois:'}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:'main()\n{\n    print("1");\n    new\n        ret = MinhaFun\xe7\xe3o(1);\n    if (ret == 27)\n    {\n        print("3");\n    }\n}\n\nMinhaFun\xe7\xe3o(num)\n{\n    if (num == 1)\n    {\n        return 27;\n    }\n    print("2");\n    return 0;\n}\n'})})]})}function u(e={}){let{wrapper:a}={...(0,r.a)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}},50065:function(e,a,n){n.d(a,{Z:()=>d,a:()=>i});var o=n(67294);let s={},r=o.createContext(s);function i(e){let a=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:a},e.children)}}}]);