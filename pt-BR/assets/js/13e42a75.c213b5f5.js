"use strict";(self.webpackChunkomp_web=self.webpackChunkomp_web||[]).push([["23980"],{82712:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>r,toc:()=>l,default:()=>d,metadata:()=>a,assets:()=>h,contentTitle:()=>o});var a=JSON.parse('{"id":"scripting/language/reference/A-tutorial-introduction","title":"A tutorial introduction","description":"---","source":"@site/docs/scripting/language/reference/02-A-tutorial-introduction.md","sourceDirName":"scripting/language/reference","slug":"/scripting/language/reference/A-tutorial-introduction","permalink":"/pt-BR/docs/scripting/language/reference/A-tutorial-introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/openmultiplayer/web/edit/master/frontend/docs/scripting/language/reference/02-A-tutorial-introduction.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Foreword","permalink":"/pt-BR/docs/scripting/language/reference/Foreword"},"next":{"title":"Data-and-declarations","permalink":"/pt-BR/docs/scripting/language/reference/Data-and-declarations"}}'),i=t(85893),s=t(50065);let r={},o="A tutorial introduction",h={},l=[{value:"\u2217 This should not be confused with the \u201Cstate\u201D entry functions, which are called entry, but serve a different purpose \u2014 see page 42.",id:"-this-should-not-be-confused-with-the-state-entry-functions-which-are-called-entry-but-serve-a-different-purpose--see-page-42",level:6},{value:"\u2217 In the language specification, the term \u201Cparser\u201D refers to any implementation that processes and runs on conforming Pawn programs \u2014either interpreters or compilers.",id:"-in-the-language-specification-the-term-parser-refers-to-any-implementation-that-processes-and-runs-on-conforming-pawn-programs-either-interpreters-or-compilers",level:6},{value:"\u2022 Arithmetic",id:"-arithmetic",level:3},{value:"\u2022 Arrays and constants",id:"-arrays-and-constants",level:3},{value:"\u2022 Functions",id:"-functions",level:3},{value:"\u2022 Call-by-reference &amp; call-by-value",id:"-call-by-reference--call-by-value",level:3},{value:"\u2217 The exact value for the Golden Ratio is 1/2(\u221A5 + 1). The relation between Fibonacci numbers and the Golden Ratio also allows for a \u201Cdirect\u201D calculation of any sequence number, instead of the iterative method described here.",id:"-the-exact-value-for-the-golden-ratio-is-125--1-the-relation-between-fibonacci-numbers-and-the-golden-ratio-also-allows-for-a-direct-calculation-of-any-sequence-number-instead-of-the-iterative-method-described-here",level:6},{value:"\u2217 There is some debate on exactly what Josephus Scaliger invented and who or what he called it after.",id:"-there-is-some-debate-on-exactly-what-josephus-scaliger-invented-and-who-or-what-he-called-it-after",level:6},{value:"\u2217 The Gregorian calendar was decreed to start on 15 October 1582 by pope Gregory XIII, which means that earlier dates do not really exist in the Gregorian calendar. When extending the Gregorian calendar to days before 15 October 1582, we refer to it as the proleptic Gregorian calendar.",id:"-the-gregorian-calendar-was-decreed-to-start-on-15-october-1582-by-pope-gregory-xiii-which-means-that-earlier-dates-do-not-really-exist-in-the-gregorian-calendar-when-extending-the-gregorian-calendar-to-days-before-15-october-1582-we-refer-to-it-as-the-proleptic-gregorian-calendar",level:6},{value:"\u2022 Rational numbers",id:"-rational-numbers",level:3},{value:"\u2217 Actually, this is already true of all native functions, including all native functions that the examples in this manual use.",id:"-actually-this-is-already-true-of-all-native-functions-including-all-native-functions-that-the-examples-in-this-manual-use",level:6},{value:"\u2022 Strings",id:"-strings",level:3},{value:"\u2022 Arrays and enumerations (structured data)",id:"-arrays-and-enumerations-structured-data",level:3},{value:"\u2022 Bit operations to manipulate \u2018\u2018sets\u2019\u2019",id:"-bit-operations-to-manipulate-sets",level:3},{value:"\u2022 A simple RPN calculator",id:"-a-simple-rpn-calculator",level:3},{value:"\u2217 These rules are often summarized in a mnemonic like \u201CPlease Excuse My Dear Aunt Sally\u201D (Parentheses, Exponentiation, Multiplication, Division, Addition, Subtraction)",id:"-these-rules-are-often-summarized-in-a-mnemonic-like-please-excuse-my-dear-aunt-sally-parentheses-exponentiation-multiplication-division-addition-subtraction",level:6},{value:"* Polish Notation is completely unrelated to \u201CHungarian Notation\u201D \u2014which is just the habit of adding \u201Ctype\u201D or \u201Cpurpose\u201D identification warts to names of variables or functions",id:"-polish-notation-is-completely-unrelated-to-hungarian-notation-which-is-just-the-habit-of-adding-type-or-purpose-identification-warts-to-names-of-variables-or-functions",level:6},{value:"\u2022 Event-driven programming",id:"-event-driven-programming",level:3},{value:"\u2022 Multiple events",id:"-multiple-events",level:3},{value:"\u2217 As this script makes no attempt to separate received messages from typed messages (for example, in two different scrollable regions), the terminal/console will look confusing when this happens. With an improved user-interface, this simple script could indeed be a nice message-base chat program",id:"-as-this-script-makes-no-attempt-to-separate-received-messages-from-typed-messages-for-example-in-two-different-scrollable-regions-the-terminalconsole-will-look-confusing-when-this-happens-with-an-improved-user-interface-this-simple-script-could-indeed-be-a-nice-message-base-chat-program",level:6},{value:"\u2217 With the exception of \u201Cnative functions\u201D and user-defined operators.",id:"-with-the-exception-of-native-functions-and-user-defined-operators",level:6},{value:"\u2022 Entry functions and automata theory",id:"-entry-functions-and-automata-theory",level:3},{value:"* A function that has the same implementation for all states, does not need a state classifierat all \u2014see printchar.",id:"-a-function-that-has-the-same-implementation-for-all-states-does-not-need-a-state-classifierat-all-see-printchar",level:6},{value:"Figure 1: Pedestrian crossing lights",id:"figure-1-pedestrian-crossing-lights",level:6},{value:"Figure 2: Documentation generated from the source code",id:"figure-2-documentation-generated-from-the-source-code",level:6},{value:"\u2022 Warnings and errors",id:"-warnings-and-errors",level:3},{value:"\u2022 In closing",id:"-in-closing",level:3},{value:"\u2217 It is no longer the only book on Pawn.",id:"-it-is-no-longer-the-only-book-on-pawn",level:6}];function c(e){let n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h3:"h3",h6:"h6",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"a-tutorial-introduction",children:"A tutorial introduction"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"pawn is a simple programming language with a syntax reminiscent to the \u201CC\u201D\nprogramming language. A pawn program consists of a set of functions and\na set of variables. The variables are data objects and the functions contain\ninstructions (called \u201Cstatements\u201D) that operate on the data objects or that perform tasks."}),"\n",(0,i.jsx)(n.p,{children:"The first program in almost any computer language is one that prints a simple\nstring; printing \u201CHello world\u201D is a classic example. In pawn, the program would look like:"}),"\n",(0,i.jsx)(n.p,{children:"Listing: hello.p"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\nmain()\n    printf  "Hello  world\\n"\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"This manual assumes that you know how to run a pawn program; if not, please\nconsult the application manual (more hints are at page 168)."}),"\n",(0,i.jsx)(n.p,{children:"A pawn program starts execution in an \u201Centry\u201D function\u2217 \u2014in nearly all ex-\namples of this manual, this entry function is called \u201Cmain\u201D. Here, the function\nmain contains only a single instruction, which is at the line below the function\nhead itself. Line breaks and indenting are insignificant; the invocation of the\nfunction print could equally well be on the same line as the head of function main."}),"\n",(0,i.jsx)(n.p,{children:"The definition of a function requires that a pair of parentheses follow the func-\ntion name. If a function takes parameters, their declarations appear between\nthe parentheses. The function main does not take any parentheses. The rules\nare different for a function invocation (or a function call); parentheses are\noptional in the call to the print function."}),"\n",(0,i.jsx)(n.p,{children:"The single argument of the print function is a string, which must be enclosed\nin double quotes. The characters \\n near the end of the string form an escape\nsequence, in this case they indicate a \u201Cnewline\u201D symbol. When print encoun-\nters the newline escape sequence, it advances the cursor to the first column of\nthe next line. One has to use the \\n escape sequence to insert a \u201Cnewline\u201D into\nthe string, because a string may not wrap over multiple lines."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h6,{id:"-this-should-not-be-confused-with-the-state-entry-functions-which-are-called-entry-but-serve-a-different-purpose--see-page-42",children:"\u2217 This should not be confused with the \u201Cstate\u201D entry functions, which are called entry, but serve a different purpose \u2014 see page 42."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Compiling and running scripts: see page 168"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"String literals: 99 Escape sequence: 99"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"pawn is a \u201Ccase sensitive\u201D language: upper and lower case letters are considered\nto be different letters. It would be an error to spell the function printf in the\nabove example as \u201CPrintF\u201D. Keywords and predefined symbols, like the name\nof function \u201Cmain\u201D, must be typed in lower case."}),"\n",(0,i.jsx)(n.p,{children:"If you know the C language, you may feel that the above example does not\nlook much like the equivalent \u201CHello world\u201D program in C/C++. pawn can\nalso look very similar to C, though. The next example program is also valid\npawn syntax (and it has the same semantics as the earlier example):"}),"\n",(0,i.jsx)(n.p,{children:"Listing: hello.p \u2014 C style"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\n#include  <console>\n\nmain()\n{\n    printf("Hello  world\\n");\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"These first examples also reveal a few differences between pawn and the C language:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"there is usually no need to include any system-defined \u201Cheader file\u201D;"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"semicolons are optional (except when writing multiple statements on one line);"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"when the body of a function is a single instruction, the braces (for a compound instruction) are optional;"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"when you do not use the result of a function in an expression or assignment, parentheses around the function argument are optional."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["As an aside, the few preceding points refer to optional syntaxes. It is\nyour choice what syntax you wish to use: neither style is \u201Cdeprecated\u201D or",(0,i.jsx)(n.br,{}),"\n","\u201Cconsidered harmful\u201D. The examples in this manual position the braces and use\nan indentation that is known as the \u201CWhitesmith\u2019s style\u201D, but pawn is a free\nformat language and other indenting styles are just as good."]}),"\n",(0,i.jsx)(n.p,{children:"Because pawn is designed to be an extension language for applications,\nthe function set/library that a pawn program has at its disposal depends on the\nhost application. As a result, the pawn language has no intrinsic knowledge\nof any function. The print function, used in this first example, must be made\navailable by the host application and be \u201Cdeclared\u201D to the pawn parser."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h6,{id:"-in-the-language-specification-the-term-parser-refers-to-any-implementation-that-processes-and-runs-on-conforming-pawn-programs-either-interpreters-or-compilers",children:"\u2217 In the language specification, the term \u201Cparser\u201D refers to any implementation that processes and runs on conforming Pawn programs \u2014either interpreters or compilers."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"More function descriptions at page 124"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"It is assumed, however, that all host applications provide a minimal set of common\nfunctions, like print and printf."}),"\n",(0,i.jsxs)(n.p,{children:["In some environments, the display or terminal must be enabled before any text\ncan be output onto it. If this is the case, you must add a call to the function\n\u201Cconsole\u201D before the first call to function print or printf. The console\nfunction also allows you to specify device characteristics, such as the number\nof lines and columns of the display. The example programs in this",(0,i.jsx)(n.br,{}),"\n","manual do not use the console functions, because many platforms do not require or provide it."]}),"\n",(0,i.jsx)(n.h3,{id:"-arithmetic",children:"\u2022 Arithmetic"}),"\n",(0,i.jsxs)(n.p,{children:["Fundamental elements of most programs are calculations, decisions",(0,i.jsx)(n.br,{}),"\n","(conditional execution), iterations (loops) and variables to store input data, output\ndata and intermediate results. The next program example illustrates many of\nthese concepts. The program calculates the greatest common divisor of two\nvalues using an algorithm invented by Euclides."]}),"\n",(0,i.jsx)(n.p,{children:"Listing: gcd.p"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\n/*  the  greatest  common  divisor  of  two  values,  using  Euclides\u2019\nalgorithm  */\n\nmain()\n{\n    print  "Input  two  values\\n"\n    new  a  =  getvalue()\n    new  b  =  getvalue()\n    while  (a  !=  b)\n    if  (a  >  b)\n        a  =  a  -  b\n    else\n        b  =  b  -  a\n    printf  "The  greatest  common  divisor  is  %d\\n",  a\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"Function main now contains more than just a single \u201Cprint\u201D statement. When\nthe body of a function contains more than one statement, these statements\nmust be embodied in braces \u2014the \u201C{\u201D and \u201C}\u201D characters. This groups the in-\nstructions to a single compound statement. The notion of grouping statements\nin a compound statement applies as well to the bodies of if\u2013else and loop instructions."}),"\n",(0,i.jsx)(n.p,{children:"The new keyword creates a variable. The name of the variable follows new.\nIt Data declarations is common, but not imperative,\nto assign a value to the variable already at the moment of its creation."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Compound statement: 112"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Data declarations are covered in detail starting at page 62"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Variables must be declared before they are used in an expression.\nThe getvalue function (also common predefined function)\nreads in a value from the keyboard and returns the result. Note that pawn\nis a typeless language, all variables are numeric\ncells that can hold a signed integral value."}),"\n",(0,i.jsxs)(n.p,{children:["The getvalue function name is followed by a pair of parentheses. These are\nrequired because the value that getvalue returns is stored in a variable. Nor-\nmally, the function\u2019s arguments (or parameters) would appear between",(0,i.jsx)(n.br,{}),"\n","the parentheses, but getvalue (as used in this program) does not take any\nexplicit arguments. If you do not assign the result of a function to a variable\nor use it in a expression in another way, the parentheses are optional. For\nexample, the result of the print and printf statements are not used. You\nmay still use parentheses around the arguments, but it is not required."]}),"\n",(0,i.jsxs)(n.p,{children:["Loop instructions, like \u201Cwhile\u201D, repeat a single instruction as long as the loop\ncondition (the expression between parentheses) is \u201Ctrue\u201D. One can",(0,i.jsx)(n.br,{}),"\n","execute multiple instructions in a loop by grouping them in a compound statement.\nThe if\u2013else instruction has one instruction for the \u201Ctrue\u201D clause and one for the \u201Cfalse\u201D."]}),"\n",(0,i.jsxs)(n.p,{children:["Observe that some statements, like while and if\u2013else, contain (or",(0,i.jsx)(n.br,{}),"\n","\u201Cfold around\u201D) another instruction \u2014in the case of if\u2013else even two other instructions.\nThe complete bundle is, again, a single instruction. That is:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"the assignment statements \u201Ca = a - b\u201D below the if and \u201Cb = b - a\u201D below the else are statements;"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"the if\u2013else statement folds around these two assignment statements and forms a single statement of itself;"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"the while statement folds around the if\u2013else statement and forms, again, a single statement."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"It is common to make the nesting of the statements explicit by indenting any\nsub-statements below a statement in the source text. In the \u201CGreatest Com-\nmon Divisor\u201D example, the left margin indent increases by four space characters\nafter the while statement, and again after the if and else keywords. State-\nments that belong to the same level, such as both printf invocations and the\nwhile loop, have the same indentation."}),"\n",(0,i.jsxs)(n.p,{children:["The loop condition for the while loop is \u201C(a != b)\u201D; the symbol != is the\n\u201Cnot equal to\u201D operator. That is, the if\u2013else instruction is repeated",(0,i.jsx)(n.br,{}),"\n","until \u201Ca\u201D equals \u201Cb\u201D. It is good practice to indent the instructions that run under\ncontrol of another statement, as is done in the preceding example."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The call to printf, near the bottom of the example, differs from the print call\nright below the opening brace (\u201C{\u201D). The \u201Cf\u201D in printf stands for \u201Cformatted\u201D,\nwhich means that the function can format and print numeric values and other\ndata (in a user-specified format), as well as literal text. The %d symbol in the\nstring is a token that indicates the position and the format that the subsequent\nargument to function printf should be printed. At run time, the token %d is\nreplaced by the value of variable \u201Ca\u201D (the second argument of printf)."}),"\n",(0,i.jsx)(n.p,{children:"Function print can only print text; it is quicker than printf. If you want to\nprint a literal \u201C%\u201D at the display, you have to use print, or you have to double\nit in the string that you give to printf. That is:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'print "20% of the personnel accounts for 80% of the costs\\n"'})}),"\n",(0,i.jsx)(n.p,{children:"and"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'printf "20%% of the personnel accounts for 80%% of the costs\\n"'})}),"\n",(0,i.jsx)(n.p,{children:"print the same string."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'"while" loop: 116'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'"if else": 114'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Relational operators: 107"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"-arrays-and-constants",children:"\u2022 Arrays and constants"}),"\n",(0,i.jsx)(n.p,{children:"Next to simple variables with a size of a single cell, pawn supports \u201Carray\nvariables\u201D that hold many cells/values. The following example program displays\na series of prime numbers using the well known \u201Csieve of Eratosthenes\u201D. The\nprogram also introduces another new concept: symbolic constants.\nSymbolic constants look like variables, but they cannot be changed."}),"\n",(0,i.jsx)(n.p,{children:"Listing: sieve.p"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\n/*  Print  all  primes  below  100,  using  the  "Sieve  of  Eratosthenes"  */\n\nmain()\n{\n    const  max_primes  =  100\n    new  series[max_primes]  =  {  true,  ...  }\n    for  (new  i  =  2;  i  <  max_primes;  ++i)\n    if  (series[i])\n    {\n        printf  "%d  ",  i\n        /*  filter  all  multiples  of  this  "prime"  from  the  list  */\n        for  (new  j  =  2  *  i;  j  <  max_primes;  j  +=  i)\n            series[j]  =  false\n    }\n}\n\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"When a program or sub-program has some fixed limit built-in, it is good prac-\ntice create a symbolic constant for it. In the preceding example, the symbol\nmax_primes is a constant with the value 100. The program uses the symbol\nmax_primes three times after its definition: in the declaration of the variable\nseries and in both for loops. If we were to adapt the program to print all\nprimes below 500, there is now only one line to change."}),"\n",(0,i.jsx)(n.p,{children:"Like simple variables, arrays may be initialized upon creation. pawn offers a\nconvenient shorthand to initialize all elements to a fixed value:\nall hundred\nelements of the \u201Cseries\u201D array are set to true \u2014without requiring that the\nprogrammer types in the word \u201Ctrue\u201D a hundred times. The symbols true\nand false are predefined constants."}),"\n",(0,i.jsxs)(n.p,{children:["When a simple variable, like the variables i and j in the primes sieve example,\nis declared in the first expression of a for loop, the variable is",(0,i.jsx)(n.br,{}),"\n","valid only inside the loop.\nVariable declaration has its own rules; it is not a\nstatement \u2014 although it looks like one.\nOne of those rules is that the first expression\nof a for loop may contain a variable declaration."]}),"\n",(0,i.jsx)(n.p,{children:"Both for loops also introduce new operators in their third expression.\nThe ++ operator increments its operand by one; that is, ++i is equal to i = i + 1.\nThe += operator adds the expression on its right to the variable on its left;\nthat is, j += i is equal to j = j + i."}),"\n",(0,i.jsx)(n.p,{children:"There is an \u201Coff-by-one\u201D issue that you need to be aware if when working with\narrays. The first element in the series array is series[0], so if the array\nholds max_primes elements, the last element in the array is series[max_primes 1].\nIf max_primes is 100, the last element, then, is series[99]. Accessing series[100] is invalid."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Constant declaration: 101"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Progressive initiallers: 65"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'"for" loop: 113'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"An overview of all operators: 104"})}),"\n",(0,i.jsx)(n.h3,{id:"-functions",children:"\u2022 Functions"}),"\n",(0,i.jsx)(n.p,{children:"Larger programs separate tasks and operations into functions. Using functions\nincreases the modularity of programs and functions, when well written, are\nportable to other programs. The following example implements a function to\ncalculate numbers from the Fibonacci series."}),"\n",(0,i.jsx)(n.p,{children:"The Fibonacci sequence was discovered by Leonardo \u201CFibonacci\u201D of Pisa, an\nItalian mathematician of the 13th century\u2014whose greatest achievement was\npopularizing for the Western world the Hindu-Arabic numerals. The goal of\nthe sequence was to describe the growth of a population of (idealized) rabbits;"}),"\n",(0,i.jsx)(n.p,{children:"and the sequence is 1, 1, 2, 3, 5, 8, 13, 21,. . .\n(every next value is the sum of its two predecessors)."}),"\n",(0,i.jsx)(n.p,{children:"Listing: fib.p"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\n/*  Calculation  of  Fibonacci  numbers  by  iteration  */\n\nmain()\n{\n    print  "Enter  a  value:  "\n    new  v  =  getvalue()\n    if  (v  >  0)\n        printf  "The  value  of  Fibonacci  number  %d  is  %d\\n", v,  fibonacci(v)\n    else\n        printf  "The  Fibonacci  number  %d  does  not  exist\\n",  v\n}\nfibonacci(n)\n{\n    assert  n  >  0\n    new  a  =  0,  b  =  1\n    (new  i  =  2;  i  <  n;  i++)\n    {\n        new  c  =  a  +  b\n        a  =  b\n        b  =  c\n    }\n    return  a  +  b\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"The assert instruction at the top of the fibonacci function deserves explicit\nmention; it guards against \u201Cimpossible\u201D or invalid conditions. A negative Fi-\nbonacci number is invalid, and the assert statement flags it as a programmer\u2019s\nerror if this case ever occurs. Assertions should only flag programmer\u2019s\nerrors, never user input errors."}),"\n",(0,i.jsx)(n.p,{children:"The implementation of a user-defined function is not much different than that\nof function main. Function fibonacci shows two new concepts, though: it\nreceives an input value through a parameter and it returns a value (it has a\n\u201Cresult\u201D)."}),"\n",(0,i.jsxs)(n.p,{children:["Function parameters are declared in the function header; the single parameter\nin this example is \u201Cn\u201D. Inside the function, a parameter behaves as a",(0,i.jsx)(n.br,{}),"\n","local variable, but one whose value is passed from the outside at\nthe call to the function."]}),"\n",(0,i.jsx)(n.p,{children:"The return statement ends a function and sets the result of the function.\nIt need not appear at the very end of the function; early exits are permitted."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'"assert" statement: 112'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Funcitons: properties & features: 70"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The main function of the Fibonacci example calls predefined \u201Cnative\u201D functions,\nlike getvalue and printf, as well as the user-defined function fibonacci.\nFrom the perspective of calling a function (as in function main), there is no\ndifference between user-defined and native functions."}),"\n",(0,i.jsx)(n.p,{children:"The Fibonacci numbers sequence describes a surprising variety of natural phe-\nnomena. For example, the two or three sets of spirals in pineapples, pine cones\nand sunflowers usually have consecutive Fibonacci numbers between 5 and 89\nas their number of spirals. The numbers that occur naturally in branching\npatterns (e.g. that of plants) are indeed Fibonacci numbers. Finally, although\nthe Fibonacci sequence is not a geometric sequence, the further the sequence\nis extended, the more closely the ratio between successive terms approaches\nthe Golden Ratio, of 1.618. . . \u2217 that appears so often in art and architecture."}),"\n",(0,i.jsx)(n.h3,{id:"-call-by-reference--call-by-value",children:"\u2022 Call-by-reference & call-by-value"}),"\n",(0,i.jsx)(n.p,{children:"Dates are a particularly rich source of algorithms and conversion routines,\nbecause the calenders that a date refers to have known such a diversity,\nthrough time and around the world."}),"\n",(0,i.jsx)(n.p,{children:"The \u201CJulian Day Number\u201D is attributed to Josephus Scaliger\u2020 and it counts\nthe number of days since November 24, 4714 BC (proleptic Gregorian cal-\nendar\u2021). Scaliger chose that date because it marked the coincidence of three\nwell-established cycles: the 28-year Solar Cycle (of the old Julian calendar),\nthe 19-year Metonic Cycle and the 15-year Indiction Cycle (periodic taxes or gov-\nernmental requisitions in ancient Rome), and because no literature or recorded\nhistory was known to predate that particular date in the remote past. Scaliger\nused this concept to reconcile dates in historic documents, later astronomers\nembraced it to calculate intervals between two events more easily."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h6,{id:"-the-exact-value-for-the-golden-ratio-is-125--1-the-relation-between-fibonacci-numbers-and-the-golden-ratio-also-allows-for-a-direct-calculation-of-any-sequence-number-instead-of-the-iterative-method-described-here",children:"\u2217 The exact value for the Golden Ratio is 1/2(\u221A5 + 1). The relation between Fibonacci numbers and the Golden Ratio also allows for a \u201Cdirect\u201D calculation of any sequence number, instead of the iterative method described here."}),"\n",(0,i.jsx)(n.h6,{id:"-there-is-some-debate-on-exactly-what-josephus-scaliger-invented-and-who-or-what-he-called-it-after",children:"\u2217 There is some debate on exactly what Josephus Scaliger invented and who or what he called it after."}),"\n",(0,i.jsx)(n.h6,{id:"-the-gregorian-calendar-was-decreed-to-start-on-15-october-1582-by-pope-gregory-xiii-which-means-that-earlier-dates-do-not-really-exist-in-the-gregorian-calendar-when-extending-the-gregorian-calendar-to-days-before-15-october-1582-we-refer-to-it-as-the-proleptic-gregorian-calendar",children:"\u2217 The Gregorian calendar was decreed to start on 15 October 1582 by pope Gregory XIII, which means that earlier dates do not really exist in the Gregorian calendar. When extending the Gregorian calendar to days before 15 October 1582, we refer to it as the proleptic Gregorian calendar."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Native function interface: 85"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Julian Day numbers (sometimes denoted with unit \u201Cjd\u201D) should not be con-\nfused with Julian Dates (the number of days since the start of the same year),\nor with the Julian calendar that was introduced by Julius Caesar."}),"\n",(0,i.jsx)(n.p,{children:"Below is a program that calculates the Julian Day number from a date in\nthe (proleptic) Gregorian calendar, and vice versa. Note that in the proleptic\nGregorian calendar, the first year is 1 AD (Anno Domini) and the year before\nthat is 1 BC (Before Christ): year zero does not exist! The program uses\nnegative year values for BC years and positive (non-zero) values for AD years."}),"\n",(0,i.jsx)(n.p,{children:"Listing: julian.p"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\n/*  calculate  Julian  Day  number  from  a  date,  and  vice  versa  */\n\nmain()\n{\n    new  d,  m,  y,  jdn\n    print  "Give  a  date  (dd-mm-yyyy):  "\n\n    d  =  getvalue(_,  \u2019-\u2019,  \u2019/\u2019)\n    m  =  getvalue(_,  \u2019-\u2019,  \u2019/\u2019)\n    y  =  getvalue()\n    jdn  =  DateToJulian(d,  m,  y)\n\n    printf("Date  %d/%d/%d  =  %d  JD\\n",  d,  m,  y,  jdn)\n    print  "Give  a  Julian  Day  Number:  "\n\n    jdn  =  getvalue()\n    JulianToDate  jdn,  d,  m,  y\n\n    printf  "%d  JD  =  %d/%d/%d\\n",  jdn,  d,  m,  y\n}\n\nDateToJulian(day,  month,  year)\n{\n    /*  The  first  year  is  1.  Year  0  does  not  exist:  it  is  1  BC  (or  -1)  */\n\n    assert  year  !=  0\n    if  (year  <  0)\n    year++\n\n    /*  move  January  and  February  to  the  end  of  the  previous  year  */\n\n    if  (month  <=  2)\n    year--,  month  +=  12\n    new  jdn  =  365*year  +  year/4  -  year/100  +  year/400\n    +  (153*month  -  457)  /  5\n    +  day  +  1721119\n\n    return  jdn\n}\n\nJulianToDate(jdn,  &day,  &month,  &year)\n{\n    jdn  -=  1721119\n\n    /*  approximate  year,  then  adjust  in  a  loop  */\n\n    year  =  (400  *  jdn)  /  146097\n    while  (365*year  +  year/4  -  year/100  +  year/400  <  jdn)\n        year++\n    year--\n    /*  determine  month  */\n\n    jdn  -=  365*year  +  year/4  -  year/100  +  year/400\n    month  =  (5*jdn  +  457)  /  153\n\n    /*  determine  day  */\n\n    day  =  jdn  -  (153*month  -  457)  /  5\n\n    /*  move  January  and  February  to  start  of  the  year  */\n\n    if  (month  >  12)\n        month  -=  12,  year++\n\n    /*  adjust  negative  years  (year  0  must  become  1  BC,  or  -1)  */\n\n    if  (year  <=  0)\n        year--\n}\n\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Function main starts with creating variables to hold the day, month and year,\nand the calculated Julian Day number. Then it reads in a date \u2014three calls to\ngetvalue\u2014 and calls function DateToJulian to calculate the day number. Af-\nter calculating the result, main prints the date that you entered and the Julian\nDay number for that date. Now, let us focus on function DateToJulian. . ."}),"\n",(0,i.jsx)(n.p,{children:"Near the top of function DateToJulian, it increments the year value if it is\nnegative; it does this to cope with the absence of a \u201Czero\u201D year in the\nproleptic Gregorian calendar. In other words, function DateToJulian modifies its func-\ntion arguments (later, it also modifies month). Inside a function, an argument\nbehaves like a local variable: you may modify it. These modifications remain\nlocal to the function DateToJulian, however. Function main passes the values\nof d, m and y into DateToJulian, who maps them to its function arguments\nday, month and year respectively. Although DateToJulian modifies year and\nmonth, it does not change y and m in function main; it only changes local copies\nof y and m. This concept is called \u201Ccall by value\u201D."}),"\n",(0,i.jsx)(n.p,{children:"The example intentionally uses different names for the local variables in the\nfunctions main and DateToJulian, for the purpose of making the above ex-\nplanation easier. Renaming main\u2019s variables d, m and y to day, month\nand year respectively, does not change the matter: then you just happen to have\ntwo local variables called day, two called month and two called year, which is\nperfectly valid in pawn."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'"Call by value" versus "Call by reference": 71'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The remainder of function DateToJulian is, regarding the\npawn language, uninteresting arithmetic."}),"\n",(0,i.jsx)(n.p,{children:"Returning to the second part of the function main we see that it now asks\nfor a day number and calls another function, JulianToDate, to find the date\nthat matches the day number. Function JulianToDate is interesting because\nit takes one input argument (the Julian Day number) and needs to calculate\nthree output values, the day, month and year. Alas, a function can only have\na single return value \u2014that is, a return statement in a function may\nonly contain one expression. To solve this, JulianToDate specifically requests that\nchanges that it makes to some of its function arguments are copied back to the\nvariables of the caller of the function. Then, in main, the variables that must\nhold the result of JulianToDate are passed as arguments to JulianToDate."}),"\n",(0,i.jsx)(n.p,{children:"Function JulianToDate marks the appropriate arguments for being \u201Ccopied\nback to caller\u201D by prefixing them with an & symbol. Arguments with an & are\ncopied back, arguments without is are not. \u201CCopying back\u201D is actually not the\ncorrect term. An argument tagged with an & is passed to the function in a\nspecial way that allows the function to directly modify the original variable.\nThis is called \u201Ccall by reference\u201D and an argument that uses it is a \u201Creference argument\u201D."}),"\n",(0,i.jsx)(n.p,{children:"In other words, if main passes y to JulianToDate \u2014who maps it to its function\nargument year\u2014 and JulianToDate changes year, then JulianToDate really\nchanges y. Only through reference arguments can a function directly modify\na variable that is declared in a different function."}),"\n",(0,i.jsx)(n.p,{children:"To summarize the use of call-by-value versus call-by-reference: if a function\nhas one output value, you typically use a return statement; if a function has\nmore output values, you use reference arguments. You may combine the two\ninside a single function, for example in a function that returns its \u201Cnormal\u201D\noutput via a reference argument and an error code in its return value."}),"\n",(0,i.jsxs)(n.p,{children:["As an aside, many desktop application use conversions to and from",(0,i.jsx)(n.br,{}),"\n","Julian Day numbers (or varieties of it) to conveniently calculate the number of days\nbetween to dates or to calculate the date that is 90 days from now \u2014for example.---"]}),"\n",(0,i.jsx)(n.h3,{id:"-rational-numbers",children:"\u2022 Rational numbers"}),"\n",(0,i.jsx)(n.p,{children:"All calculations done up to this point involved only whole numbers \u2014integer\nvalues. pawn also has support for numbers that can hold fractional values:"}),"\n",(0,i.jsx)(n.p,{children:"these are called \u201Crational numbers\u201D. However, whether this support is enabled\ndepends on the host application."}),"\n",(0,i.jsx)(n.p,{children:"Rational numbers can be implemented as either floating-point or fixed-point\nnumbers. Floating-point arithmetic is commonly used for general-purpose and\nscientific calculations, while fixed-point arithmetic is more suitable for\nfinancial processing and applications where rounding errors should not come into"}),"\n",(0,i.jsx)(n.p,{children:"play (or at least, they should be predictable). The pawn toolkit has both a\nfloating-point and a fixed-point module, and the details (and\ntrade-offs) for\nthese modules in their respective documentation. The issue is, however, that a\nhost application may implement either floating-point or fixed-point, or both\nor neither.\u2217 The program below requires that at least either kind of rational\nnumber support is available; it will fail to run if the host application does\nnot support rational numbers at all."}),"\n",(0,i.jsx)(n.p,{children:"Listing: c2f.p"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\nmain()\n{\n    new  Rational:  Celsius\n    new  Rational:  Fahrenheit\n    print  "Celsius\\t  Fahrenheit\\n"\n    for  (Celsius  =  5;  Celsius  <=  25;  Celsius++)\n    {\n        Fahrenheit  =  (Celsius  *  1.8)  +  32\n        printf  "%r  \\t  %r\\n",  Celsius,  Fahrenheit\n    }\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"The example program converts a table of degrees Celsius to degrees Fahrenheit.\nThe first directive of this program is to import definitions for rational number\nsupport from an include file. The file \u201Crational\u201D includes either support\nfor floating-point numbers or for fixed-point numbers, depending on what is available."}),"\n",(0,i.jsx)(n.p,{children:"The variables Celsius and Fahrenheit are declared with a tag \u201CRational:\u201D\nbetween the keyword new and the variable name. A tag name denotes the\npurpose of the variable, its permitted use and, as a special\ncase for rational numbers, its memory lay-out."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h6,{id:"-actually-this-is-already-true-of-all-native-functions-including-all-native-functions-that-the-examples-in-this-manual-use",children:"\u2217 Actually, this is already true of all native functions, including all native functions that the examples in this manual use."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Tag names: 68"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The Rational: tag tells the pawn parser that the variables Celsius and Fahrenheit\ncontain fractional values, rather than whole numbers."}),"\n",(0,i.jsx)(n.p,{children:"The equation for obtaining degrees Fahrenheit from degrees Celsius is"}),"\n",(0,i.jsx)(n.p,{children:"\xb0F = \u2079\u2044\u2085 + 32 \xb0C"}),"\n",(0,i.jsxs)(n.p,{children:["The program uses the value 1.8 for the quotient 9/\u2085. When rational number\nsupport is enabled, pawn supports values with a fractional part behind",(0,i.jsx)(n.br,{}),"\n","the decimal point."]}),"\n",(0,i.jsx)(n.p,{children:"The only other non-trivial change from earlier programs is that the format\nstring for the printf function now has variable placeholders denoted with\n\u201C%r\u201D instead of \u201C%d\u201D. The placeholder %r prints a rational number at\nthe position; %d is only for integers (\u201Cwhole numbers\u201D)."}),"\n",(0,i.jsx)(n.p,{children:"I used the include file \u201Crational\u201D rather than \u201Cfloat\u201D or \u201Cfixed\u201D in an\nattempt to make the example program portable. If you know that the host\napplication supports floating point arithmetic, it may be more convenient to\n\u201C#include\u201D the definitions from the file float and use the tag Float: instead\nof Rational \u2014when doing so, you should also replace %r by %f in the call to\nprintf. For details on fixed point and floating point support, please see the\napplication notes \u201CFixed Point Support Library\u201D and \u201CFloating Point Support\nLibrary\u201D that are available separately."}),"\n",(0,i.jsx)(n.h3,{id:"-strings",children:"\u2022 Strings"}),"\n",(0,i.jsx)(n.p,{children:"pawn has no intrinsic \u201Cstring\u201D type; character strings are stored in arrays, with\nthe convention that the array element behind the last valid character is zero.\nWorking with strings is therefore equivalent with working with arrays."}),"\n",(0,i.jsx)(n.p,{children:"Among the simplest of encryption schemes is the one called \u201CROT13\u201D \u2014\nactually the algorithm is quite \u201Cweak\u201D from a cryptographical point of view. It\nis most widely used in public electronic forums (BBSes, Usenet) to hide texts\nfrom casual reading, such as the solution to puzzles or riddles. ROT13 simply\n\u201Crotates\u201D the alphabet by half its length, i.e. 13 characters. It is a symmetric\noperation: applying it twice on the same text reveals the original."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Listing: rot13.p"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\n/*  Simple  encryption,  using  ROT13  */\n\nmain()\n{\n    printf  "Please  type  the  string  to  mangle:  "\n\n    new  str[100]\n    getstring  str,  sizeof  str\n    rot13  str\n\n    printf  "After  mangling,  the  string  is:  \\"%s\\"\\n",  str\n}\n\nrot13(string[])\n{\n    for  (new  index  =  0;  string[index];  index++)\n    if  (\u2019a\u2019  <=  string[index]  <=  \u2019z\u2019)\n        string[index]  =  (string[index]  -  \u2019a\u2019  +  13)  %  26  +  \u2019a\u2019\n    else  if  (\u2019A\u2019  <=  string[index]  <=  \u2019Z\u2019)\n        string[index]  =  (string[index]  -  \u2019A\u2019  +  13)  %  26  +  \u2019A\u2019\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"In the function header of rot13, the parameter \u201Cstring\u201D is declared as an\narray, but without specifying the size of the array \u2014there is no value between\nthe square brackets. When you specify a size for an array in a function header,\nit must match the size of the actual parameter in the function call. Omitting\nthe array size specification in the function header removes this restriction and\nallows the function to be called with arrays of any size. You must then have\nsome other means of determining the (maximum) size of the array. In the case\nof a string parameter, one can simply search for the zero terminator."}),"\n",(0,i.jsx)(n.p,{children:"The for loop that walks over the string is typical for string processing func-\ntions. Note that the loop condition is \u201Cstring[index]\u201D. The rule for true/\nfalse conditions in pawn is that any value is \u201Ctrue\u201D, except zero. That is,\nwhen the array cell at string[index] is zero, it is \u201Cfalse\u201D and the loop aborts."}),"\n",(0,i.jsx)(n.p,{children:"The ROT13 algorithm rotates only letters; digits, punctuation and special\ncharacters are left unaltered. Additionally, upper and lower case letters must\nbe handled separately. Inside the for loop, two if statements filter out the\ncharacters of interest. The way that the second if is chained to the \u201Celse\u201D\nclause of the first if is noteworthy, as it is a typical method of\ntesting for multiple non-overlapping conditions."}),"\n",(0,i.jsx)(n.p,{children:"Earlier in this chapter, the concept of \u201Ccall by value\u201D versus \u201Ccall by\nreference\u201D were discussed. When you are working with strings, or arrays in general, note\nthat pawn always passes arrays by reference. It does this to conserve memory\nand to increase performance \u2014arrays can be large data structures and passing\nthem by value requires a copy of this data structure to be made, taking both memory and time."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"A function that takes an array as an argument and that does not change it, may mark the argument as \u201Cconst\u201D; see page 72"})}),"\n",(0,i.jsx)(n.p,{children:"Due to this rule, function rot13 can modify its function\nparameter (called \u201Cstring\u201D in the example) without needing to declare as a\nreference argument."}),"\n",(0,i.jsx)(n.p,{children:"Another point of interest are the conditions in the two if statements. The first\nif, for example, holds the condition \u201C\u2019a\u2019 <= string[index] <= \u2019z\u2019\u201D, which\nmeans that the expression is true if (and only if) both \u2019a\u2019 <= string[index]\nand string[index] <= \u2019z\u2019 are true. In the combined expression, the rela-\ntional operators are said to be \u201Cchained\u201D, as they chain multiple comparisons\nin one condition."}),"\n",(0,i.jsx)(n.p,{children:'Finally, note how the last printf in function main uses the escape sequence\n" to print a double quote. Normally a double quote ends the literal string;\nthe escape sequence \u201C"\u201D inserts a double quote into the string.'}),"\n",(0,i.jsx)(n.p,{children:"Staying on the subject of strings and arrays, below is a program that separates\na string of text into individual words and counts them. It is a simple program\nthat shows a few new features of the pawn language."}),"\n",(0,i.jsx)(n.p,{children:"Listing: wcount.p"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\n/*  word  count:  count  words  on  a  string  that  the  user  types  */\n\nmain()\n{\n    print  "Please  type  a  string:  "\n    new  string[100]\n    getstring  string,  sizeof  string\n\n    new  count  =  0\n\n    new  word[20]\n    new  index\n    for (  ;;  )\n    {\n        word  =  strtok(string,  index)\n        if  (strlen(word)  ==  0)\n            break\n        count++\n        printf  "Word  %d:  \u2019%s\u2019\\n",  count,  word\n    }\n    printf  "\\nNumber  of  words:  %d\\n",  count\n}\n\nstrtok(const  string[],  &index)\n{\n    new  length  =  strlen(string)\n\n    /*  skip  leading  white  space  */\n    while  (index  <  length  &&  string[index]  <=  \u2019  \u2019)\n        index++\n    /*  store  the  word  letter  for  letter  */\n    new  offset  =  index                            /*  save  start position  of  token  */\n    new  result[20]                                  /*  string  to store  the  word  in  */\n    while  (index  <  length\n        &&  string[index]  >  \u2019  \u2019\n        &&  index  -  offset  <  sizeof  result  -  1)\n    {\n        result[index  -  offset]  =  string[index]\n        index++\n    }\n    result[index  -  offset]  =  EOS                 /*  zero-terminate  the string  */\n    return  result\n}\n\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Relational operators: 107"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Escape sequence: 99"})}),"\n",(0,i.jsxs)(n.p,{children:["Function main first displays a message and retrieves a string that",(0,i.jsx)(n.br,{}),"\n","the user must type. Then it enters a loop: writing \u201Cfor (;;)\u201D creates a loop\nwithout initialisation, without increment and without test \u2014it is an infinite loop,"]}),"\n",(0,i.jsx)(n.p,{children:"equivalent to \u201Cwhile (true)\u201D. However, where the pawn parser will give you\na warning if you type \u201Cwhile (true)\u201D (something along the line \u201Credundant\ntest expression; always true\u201D), \u201Cfor (;;)\u201D passes the parser without warning."}),"\n",(0,i.jsxs)(n.p,{children:["A typical use for an infinite loop is a case where you need a loop",(0,i.jsx)(n.br,{}),"\n","with the test in the middle \u2014a hybrid between a while and a do. . . while loop, so to\nspeak. pawn does not support loops-with-a-test-in-the middle directly,",(0,i.jsx)(n.br,{}),"\n","but you can imitate one by coding an infinite loop with a conditional break. In\nthis example program, the loop:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"gets a word from the string \u2014code before the test ;"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"tests wether a new word is available, and breaks out of the loop if not \u2014the test in the middle;"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"prints the word and its sequence number \u2014code after the test ."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"As is apparent from the line \u201Cword = strtok(string, index)\u201D (and the\ndeclaration of variable word), pawn supports array assignment and functions\nreturning arrays. The pawn parser verifies that the array that strtok returns\nhas the same size and dimensions as the variable that it is assigned into."}),"\n",(0,i.jsx)(n.p,{children:"Function strlen is a native function (predefined), but strtok is not: it must be\nimplemented by ourselves. The function strtok was inspired by the function of\nthe same name from C/C++, but it does not modify the source string. Instead"}),"\n",(0,i.jsx)(n.p,{children:"it copies characters from the source string, word for word, into a local array,\nwhich it then returns."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"-arrays-and-enumerations-structured-data",children:"\u2022 Arrays and enumerations (structured data)"}),"\n",(0,i.jsxs)(n.p,{children:["In a typeless language, we might assign a different purpose to some",(0,i.jsx)(n.br,{}),"\n","array elements than to other elements in the same array. pawn supports enumerated\nconstants with an extension that allows it to mimic some functionality that\nother languages implement with \u201Cstructures\u201D or \u201Crecords\u201D."]}),"\n",(0,i.jsxs)(n.p,{children:["The example to illustrate enumerations and arrays is longer than",(0,i.jsx)(n.br,{}),"\n","previous pawn programs, and it also displays a few other features, such as global\nvariables and named parameters.\nListing: queue.p"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\n/*  Priority  queue  (for  simple  text  strings)  */\n\nenum  message\n{\n    text[40  char],\n    priority\n}\n\nmain()\n{\n    new  msg[message]\n\n    /*  insert  a  few  items  (read  from  console  input)  */\n\n    printf  "Please  insert  a  few  messages  and  their  priorities;  \\\n        end  with  an  empty  string\\n"\n    for  (  ;;  )\n    {\n        printf  "Message:    "\n        getstring  .string  =  msg[text],  .maxlength  =  40,  .pack  =  true\n        if  (strlen(msg[text])  ==  0)\n            break\n        printf  "Priority:  "\n        msg[priority]  =  getvalue()\n        if  (!insert(msg))\n        {\n            printf  "Queue  is  full,  cannot  insert  more  items\\n"\n            break\n        }\n    }\n    /*  now  print  the  messages  extracted  from  the  queue  */\n    printf  "\\nContents  of  the  queue:\\n"\n    while  (extract(msg))\n        printf  "[%d]  %s\\n",  msg[priority],  msg[text]\n}\n\nconst  queuesize  =  10\nnew  queue[queuesize][message]\nnew  queueitems  =  0\ninsert(const  item[message])\n{\n    /*  check  if  the  queue  can  hold  one  more  message  */\n    if  (queueitems  ==  queuesize)\n        return  false                         /*  queue  is  full  */\n\n    /*  find  the  position  to  insert  it  to  */\n    new  pos  =  queueitems                 /*  start  at  the  bottom  */\n    while  (pos  >  0  &&  item[priority]  >  queue[pos-1][priority])\n        --pos                                        /*  higher  priority:  move  one  position  up  */\n\n    /*  make  place  for  the  item  at  the  insertion  spot  */\n    for  (new  i  =  queueitems;  i  >  pos;  --i)\n        queue[i]  =  queue[i-1]\n\n    /*  add  the  message  to  the  correct  slot  */\n        queue[pos]  =  item\n    queueitems++\n\n    return  true\n}\n\nextract(item[message])\n{\n    /*  check  whether  the  queue  has  one  more  message  */\n    if  (queueitems  ==  0)\n        return  false                         /*  queue  is  empty  */\n\n    /*  copy  the  topmost  item  */\n    item  =  queue[0]\n    --queueitems\n\n    /*  move  the  queue  one  position  up  */\n    for  (new  i  =  0;  i  <  queueitems;  ++i)\n        queue[i]  =  queue[i+1]\n\n    return  true\n}\n\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'"for" loop: 113'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'"enum" statement: 101'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'"char" operator: 110'})}),"\n",(0,i.jsxs)(n.p,{children:["Near the top of the program listing is the declaration of the enumeration mes-\nsage. This enumeration defines two constants: text, which is zero, and pri-\nority, which is 11 (assuming a 32-bit cell). The idea behind an enumeration\nis to quickly define a list of symbolic constants without duplicates. By\ndefault, every constant in the list is 1 higher than its predecessor and the very",(0,i.jsx)(n.br,{}),"\n","first constant in the list is zero. However, you may give an extra increment for a\nconstant so that the successor has a value of 1 plus that extra increment. The"]}),"\n",(0,i.jsx)(n.p,{children:"text constant specifies an extra increment of 40 char. In pawn, char is an\noperator, it returns the number of cells needed to\nhold a packed string of the"}),"\n",(0,i.jsx)(n.p,{children:"specified number of characters. Assuming a 32-bit cell and a 8-bit character,\n10 cells can hold 40 packed characters."}),"\n",(0,i.jsx)(n.p,{children:"Immediately at the top of function main, a new array variable is declared with\nthe size of message. The symbol message is the name of the enumeration. It\nis also a constant with the value of the last constant in the enumeration list\nplus the optional extra increment for that last element. So in this example,\nmessage is 12. That is to say, array msg is declared to hold 12 cells."}),"\n",(0,i.jsxs)(n.p,{children:["Further in main are two loops. The for loop reads strings and priority values\nfrom the console and inserts them in a queue. The while loop below",(0,i.jsx)(n.br,{}),"\n","that\nextracts element by element from the queue and prints the information on the\nscreen. The point to note, is that the for loop stores both the string and the\npriority number (an integer) in the same variable msg; indeed, function main\ndeclares only a single variable. Function getstring stores the message text\nthat you type starting at array msg[text] while the priority value is stored\n(by an assignment a few lines lower) in msg[priority]. The printf function\nin the while loop reads the string and the value from those positions as well."]}),"\n",(0,i.jsx)(n.p,{children:"At the same time, the msg array is an entity on itself: it is passed in its\nentirety\nto function insert. That function, near the end, says \u201Cqueue[queueitems]"}),"\n",(0,i.jsxs)(n.p,{children:["= item\u201D, where item is an array with size message and queue is a",(0,i.jsx)(n.br,{}),"\n","two-\ndimensional array that holds queuesize elements of size message. The decla-\nration of queue and queuesize are just above function insert."]}),"\n",(0,i.jsxs)(n.p,{children:["The example implements a \u201Cpriority queue\u201D. You can insert a number",(0,i.jsx)(n.br,{}),"\n","of\nmessages into the queue and when these messages all have the same priority,\nthey are extracted from the queue in the same order. However, when",(0,i.jsx)(n.br,{}),"\n","the\nmessages have different priorities, the one with the highest priority comes out\nfirst. The \u201Cintelligence\u201D for this operation is inside function insert: it\nfirst\ndetermines the position of the new message to add, then moves a few messages\none position upward to make space for the new message. Function extract\nsimply always retrieves the first element of the queue and shifts all remaining\nelements down by one position."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that both functions insert and extract work on two shared variables,\nqueue and queueitems. A variable that is declared inside a function,",(0,i.jsx)(n.br,{}),"\n","like\nvariable msg in function main can only be accessed from within that function.\nA \u201Cglobal variable\u201D is accessible by all functions, and that variable is\ndeclared\noutside the scope of any function. Variables must still be declared before they\nare used, so main cannot access variables queue and queueitems, but both\ninsert and extract can."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Function extract returns the messages with the highest priority via its func-\ntion argument item. That is, it changes its function argument by copying the\nfirst element of the queue array into item. Function insert copies in the other\ndirection and it does not change its function argument item. In such a case,\nit is advised to mark the function argument as \u201Cconst\u201D. This helps the pawn\nparser to both check for errors and to generate better (more compact, quicker) code."}),"\n",(0,i.jsx)(n.p,{children:"A final remark on this latest sample is the call to getstring in function main:\nnote how the parameters are attributed with a description. The first param-\neter is labeled \u201C.string\u201D, the second \u201C.maxlength\u201D and the third \u201C.pack\u201D.\nFunction getstring receives \u201Cnamed parameters\u201D rather than positional pa-\nrameters. The order in which named parameters are listed is not important.\nNamed parameters are convenient in specifying \u2014and deciphering\u2014 long pa-\nrameter lists."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Named parameters: 74"})}),"\n",(0,i.jsx)(n.h3,{id:"-bit-operations-to-manipulate-sets",children:"\u2022 Bit operations to manipulate \u2018\u2018sets\u2019\u2019"}),"\n",(0,i.jsx)(n.p,{children:"A few algorithms are most easily solved with \u201Cset operations\u201D, like\nintersection,\nunion and inversion. In the figure below, for example, we want to design an\nalgorithm that returns us the points that can be reached from some other point\nin a specified maximum number of steps. For example, if we ask it to\nreturn the points that can be reached in two steps starting from B, the algorithm has\nto return C, D, E and F, but not G because G takes three steps from B."}),"\n",(0,i.jsxs)(n.p,{children:["Our approach is to keep, for each point in the graph, the set of other points\nthat it can reach in one step \u2014this is the \u201Cnext_step\u201D set. We",(0,i.jsx)(n.br,{}),"\n","also have a \u201Cresult\u201D set that keeps all points that we have found so far. We start by\nsetting the result set equal to the next_step set for the departure point. Now\nwe have in the result set all points that one can reach in one step. Then, for\nevery point in our result set, we create a union of the result set and the\nnext_step set for that point. This process is iterated for a specified number of loops."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"An example may clarify the procedure outlined above. When the departure\npoint is B, we start by setting the result set to D and E \u2014these are the\npoints that one can reach from B in one step. Then, we walk through\nthe result set. The first point that we encounter in the set is D, and we check\nwhat points can be reached from D in one step: these are C and F. So we add\nC and F to the result set. We knew that the points that can be reached from\nD in one step are C and F, because C and F are in the next_step set for"}),"\n",(0,i.jsx)(n.p,{children:"D. So what we do is to merge the next_step set for point D into the result\nset. The merge is called a \u201Cunion\u201D in set theory. That handles D. The original\nresult set also contained point E, but the next_step set for E is empty, so\nno more point is added. The new result set therefore now contains C, D, E and F."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://i.ibb.co/m9Dq7x2/image.png",alt:"img"})}),"\n",(0,i.jsx)(n.p,{children:"A set is a general purpose container for elements. The only information that\na set holds of an element is whether it is present in the set or not. The order\nof elements in a set is insignificant and a set cannot contain the same element"}),"\n",(0,i.jsx)(n.p,{children:"multiple times. The pawn language does not provide a \u201Cset\u201D data type or\noperators that work on sets. However, sets with up to 32 elements can be\nsimulated by bit operations. It takes just one bit to store a \u201Cpresent/absent\u201D\nstatus and a 32-bit cell can therefore maintain the status for 32 set elements\n\u2014provided that each element is assigned a unique bit position."}),"\n",(0,i.jsx)(n.p,{children:"The relation between set operations and bitwise operations is summarized in\nthe following table. In the table, an upper case letter stands for a set and a\nlower case letter for an element from that set."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"concept"}),(0,i.jsx)(n.th,{children:"mathematical notation"}),(0,i.jsx)(n.th,{children:"pawn expression"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"intersection"}),(0,i.jsx)(n.td,{children:"A \u2229 B"}),(0,i.jsx)(n.td,{children:"A & B"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"union"}),(0,i.jsx)(n.td,{children:"A \u222A B"}),(0,i.jsx)(n.td,{children:"A I B"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"complement"}),(0,i.jsx)(n.td,{children:"A"}),(0,i.jsx)(n.td,{children:"~A"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"empty set"}),(0,i.jsx)(n.td,{children:"\u03B5"}),(0,i.jsx)(n.td,{children:"0"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"membership"}),(0,i.jsx)(n.td,{children:"x \u2208 A"}),(0,i.jsx)(n.td,{children:"(1 << x ) & A"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"To test for membership \u2014that is, to query whether a set holds a particular\nelement, create a set with just one element and take the intersection. If the\nresult is 0 (the empty set) the element is not in the set. Bit numbering starts\ntypically at zero; the lowest bit is bit 0 and the highest bit in a 32-bit cell\nis bit 31. To make a cell with only bit 7 set, shift the value 1 left by seven\n\u2014or in a pawn expression: \u201C1 << 7\u201D."}),"\n",(0,i.jsx)(n.p,{children:"Below is the program that implements the algorithm described earlier to find\nall points that can be reached from a specific departure in a given number of\nsteps. The algorithm is completely in the findtargets function."}),"\n",(0,i.jsx)(n.p,{children:"Listing: set.p"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\n/*  Set  operations,  using  bit  arithmetic  */\n\nmain()\n{\n    enum  (<<=  1)  {  A  =  1,  B,  C,  D,  E,  F,  G  }\n    new  nextstep[]  =\n\n        {  C  |  E,       /*  A  can  reach  C  and  E  */\n           D  |  E,          /*  B    "        "      D  and  E  */\n           G,                /*  C    "        "      G  */\n           C  |  F,          /*  D    "        "      C  and  F  */\n           0,                /*  E    "        "      none  */\n           0,                /*  F    "        "      none  */\n           E  |  F,          /*  G    "        "      E  and  F  */\n        }\n    #pragma  unused  A,  B\n\n    print  "The  departure  point:  "\n    new  source  =  clamp(  .value  =  toupper(getchar())  -  \u2019A\u2019,\n                .min  =  0,\n                .max  =  sizeof  nextstep  -  1\n                 )\n    print  "\\nThe  number  of  steps:  "\n    new  steps  =  getvalue()\n\n    /*  make  the  set  */\n    new  result  =  findtargets(source,  steps,  nextstep)\n    printf  "The  points  reachable  from  %c  in  %d  steps:  ",  source+\u2019A\u2019,\n    steps\n    for  (new  i  =  0;  i  <  sizeof  nextstep;  i++)\n        if  (result  &  1  <<  i)\n            printf  "%c  ",  i  +  \u2019A\u2019\n}\n\nfindtargets(source,  steps,  nextstep[],  numpoints  =  sizeof  nextstep)\n{\n    new  result  =  0\n    new  addedpoints  =  nextstep[source]\n    while  (steps--  >  0  &&  result  !=  addedpoints)\n    {\n        result  =  addedpoints\n        for  (new  i  =  0;  i  <  numpoints;  i++)\n            if  (result  &  1  <<  i)\n                addedpoints  |=  nextstep[i]\n    }\n    return  result\n}\n\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The enum statement just below the header of the main function declares the\nconstants for the nodes A to G, but with a twist. Usually, the enum starts\ncounting from zero; here, the value of the first constant, A, is explicitly set to"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"More noteworthy is the expression \u201C(<<= 1)\u201D between the enum keyword\nand the opening brace that starts the constant list: it specifies a \u201Cbit\nshifting\u201D increment. By default, every constant in an enum list gets a value that is\n1 above its predecessor, but you can specify every successive constant\nin an enumeration to have a value that is:"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"its predecessor incremented by any value (not just 1) \u2014e.g., \u201C(+= 5)\u201D;"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"its predecessor multiplied by any value \u2014e.g., \u201C("}),"= 3)\u201D;_"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"its predecessor bit-shifted to the left by any value \u2014e.g., \u201C(<<= 1)\u201D;"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that, in binary arithmetic, shifting left by one bit amounts to the same\nas multiplying by two, meaning that ",(0,i.jsx)(n.code,{children:"(/*= 2)"})," and ",(0,i.jsx)(n.code,{children:"(<<= 1)"})," do the same thing."]}),"\n",(0,i.jsx)(n.p,{children:"When working with sets, a typical task that pops up is to determine the number\nof elements in the set. A straightforward function that does this is below:"}),"\n",(0,i.jsx)(n.p,{children:"Listing: simple bitcount function"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"\nbitcount(set)\n{\n    new  count  =  0\n    for  (new  i  =  0;  i  <  cellbits;  i++)\n        if  (set  &  (1  <<  i))\n            count++\n    return  count\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["With a cell size of 32 bits, this function\u2019s loop iterates 32 times to check for\na single bit at each iteration. With a bit of binary arithmetic magic, we can\nreduce it to loop only for the number of bits that are \u201Cset\u201D.",(0,i.jsx)(n.br,{}),"\n","That is, the following function iterates only once if the input value has only one bit set:"]}),"\n",(0,i.jsx)(n.p,{children:"Listing: improved bitcount function"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"\nbitcount(set)\n{\n    new  count  =  0\n    if  (set)\n        do\n            count++\n        while  ((set  =  set  &  (set  -  1)))\n    return  count\n}\n\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"\u201Cenum\u201D statement: 101"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"\u201Ccellbits\u201D constant: 102"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"-a-simple-rpn-calculator",children:"\u2022 A simple RPN calculator"}),"\n",(0,i.jsxs)(n.p,{children:["The common mathematical notation, with expressions like \u201C26 3 (5 + 2)\u201D,\nis known as the algebraic notation. It is a compact notation and",(0,i.jsx)(n.br,{}),"\n","we have\ngrown accustomed to it. pawn and by far most other programming languages\nuse the algebraic notation for their programming expressions. The algebraic"]}),"\n",(0,i.jsxs)(n.p,{children:["notation does have a few disadvantages, though. For instance, it occasionally\nrequires that the order of operations is made explicit by folding a part of the\nexpression in parentheses. The expression at the top of this paragraph",(0,i.jsx)(n.br,{}),"\n","can\nbe rewritten to eliminate the parentheses, but at the cost of nearly doubling\nits length. In practice, the algebraic notation is augmented with precedence\nlevel rules that say, for example, that multiplication goes before addition and\nsubtraction.\u2217 Precedence levels greatly reduce the need for parentheses, but it\ndoes not fully avoid them. Worse is that when the number of operators grows large,\nthe hierarchy of precedence levels and the particular precedence",(0,i.jsx)(n.br,{}),"\n","level for each operator becomes hard to memorize \u2014which is why an operator-rich\nlanguage as APL does away with precedence levels altogether."]}),"\n",(0,i.jsx)(n.p,{children:"Around 1920, the Polish mathematician Jan \xb4Lukasiewicz demonstrated that\nby putting the operators in front of their operands, instead of between them,"}),"\n",(0,i.jsx)(n.p,{children:"precedence levels became redundant and parentheses were never necessary.\nThis notation became known as the \u201CPolish Notation\u201D.\u2020 Charles Hamblin\nproposed later to put operators behind the operands, calling it the \u201CReverse Polish Notation\u201D."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h6,{id:"-these-rules-are-often-summarized-in-a-mnemonic-like-please-excuse-my-dear-aunt-sally-parentheses-exponentiation-multiplication-division-addition-subtraction",children:"\u2217 These rules are often summarized in a mnemonic like \u201CPlease Excuse My Dear Aunt Sally\u201D (Parentheses, Exponentiation, Multiplication, Division, Addition, Subtraction)"}),"\n",(0,i.jsx)(n.h6,{id:"-polish-notation-is-completely-unrelated-to-hungarian-notation-which-is-just-the-habit-of-adding-type-or-purpose-identification-warts-to-names-of-variables-or-functions",children:"* Polish Notation is completely unrelated to \u201CHungarian Notation\u201D \u2014which is just the habit of adding \u201Ctype\u201D or \u201Cpurpose\u201D identification warts to names of variables or functions"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Algebraic notation is also called \u201Cinfix\u201D notation"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Reverse Polish Notation is also called \u201Cpostfix\u201D notation"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["The advantage of reversing the order is that the operators\nare listed in the same order as they must be executed: when",(0,i.jsx)(n.br,{}),"\n","reading the operators from the left to the right, you also have the operations to perform in\nthat order. The algebraic expression from the beginning of this section would\nread in rpn as:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"26 3 5 2 + \xd7 \u2212"})}),"\n",(0,i.jsxs)(n.p,{children:["When looking at the operators only, we have: first an addition, then a mul-\ntiplication and finally a subtraction. The operands of each operator are read\nfrom right to left: the operands for the + operator are the values 5",(0,i.jsx)(n.br,{}),"\n","and 2, those for the operator are the result of the previous addition\nand the value 3, and so on."]}),"\n",(0,i.jsx)(n.p,{children:"It is helpful to imagine the values to be stacked on a pile, where the operators\ntake one or more operands from the top of the pile and put a result back on top\nof the pile. When reading through the rpn expression, the values 26, 3, 5 and\n2 are \u201Cstacked\u201D in that order. The operator + removes the top two elements"}),"\n",(0,i.jsx)(n.p,{children:"from the stack (5 and 2) and pushes the sum of these values back \u2014the stack\nnow reads \u201C26 3 7\u201D. Then, the operator removes 3 and 7 and pushes the\nproduct of the values onto the stack \u2014the stack is \u201C26 21\u201D. Finally, the\noperator subtracts 21 from 26 and stores the single value 5, the end result of\nthe expression, back onto the stack."}),"\n",(0,i.jsx)(n.p,{children:"Reverse Polish Notation became popular because it was easy to understand and\neasy to implement in (early) calculators. It also opens the way to operators\nwith more than two operands (e.g. integration) or operators with more than\none result (e.g. conversion between polar and cartesian coordinates)."}),"\n",(0,i.jsx)(n.p,{children:"The main program for a Reverse Polish Notation calculator is below:"}),"\n",(0,i.jsx)(n.p,{children:"Listing: rpn.p"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\n/*  a  simple  RPN  calculator  */\n#include  strtok\n#include  stack\n#include  rpnparse\n\nmain()\n{\n    print  "Type  an  expression  in  Reverse  Polish  Notation:  "\n    new  string[100]\n    getstring  string,  sizeof  string\n    rpncalc  string\n}\n\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The main program contains very little code itself; instead it includes the re-\nquired code from three other files, each of which implements a few functions\nthat, together, build the rpn calculator. When programs or scripts get larger,\nit is usually advised to spread the implementation over several files, in\norder to make maintenance easier."}),"\n",(0,i.jsxs)(n.p,{children:["Function main first puts up a prompt and calls the native function getstring\nto read an expression that the user types. Then it calls the custom function\nrpncalc to do the real work. Function rpncalc is implemented in the",(0,i.jsx)(n.br,{}),"\n","file rpnparse.inc, reproduced below:"]}),"\n",(0,i.jsx)(n.p,{children:"Listing: rpnparse.inc"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\n/*  main  rpn  parser  and  lexical  analysis,  part  of  the  RPN  calculator  */\n#include  <rational>\n#include  <string>\n\nenum  token\n{\n    t_type,                       /*  operator  or  token  type  */\n    Rational:  t_value,           /*  value,  if  t_type  is  "Number"  */\n    t_word[20],                   /*  raw  string  */\n\n}\n\nconst  Number     =  \u20190\u2019\nconst  EndOfExpr  =  \u2019#\u2019\n\nrpncalc(const  string[])\n{\n    new  index\n    new  field[token]\n    for  (  ;;  )\n    {\n        field  =  gettoken(string,  index)\n        switch  (field[t_type])\n        {\n            case  Number:\n                push  field[t_value]\n            case  \u2019+\u2019:\n                push  pop()  +  pop()\n            case  \u2019-\u2019:\n                push  -  pop()  +  pop()\n            case  \u2019*\u2019:\n                push  pop()  *  pop()\n            case  \u2019/\u2019,  \u2019:\u2019:\n                push  1.0  /  pop()  *  pop()\n            case  EndOfExpr:\n                break      /*  exit  "for"  loop  */\n            default:\n                printf  "Unknown  operator  \u2019%s\u2019\\n",  field[t_word]\n        }\n    }\n    printf  "Result  =  %r\\n",  pop()\n    if  (clearstack())\n        print  "Stack  not  empty\\n",  red\n}\n\ngettoken(const  string[],  &index)\n{\n    /*  first  get  the  next  "word"  from  the  string  */\n    new  word[20]\n    word  =  strtok(string,  index)\n\n    /*  then  parse  it  */\n    new  field[token]\n    field[t_word]  =  word\n    if  (strlen(word)  ==  0)\n    {\n        field[t_type]  =  EndOfExpr  /*  special  "stop"  symbol  */\n        field[t_value]  =  0\n    }\n    else  if  (\u20190\u2019  <=  word[0]  <=  \u20199\u2019)\n    {\n        field[t_type]  =  Number\n        field[t_value]  =  rationalstr(word)\n    }\n    else\n    {\n        field[t_type]  =  word[0]\n        field[t_value]  =  0\n    }\n    return  field\n\n}\n\n```***\n\nThe rpn calculator uses rational number support and rpnparse.inc includes\nthe \u201Crational\u201D file for that purpose. Almost all of the operations on rational\nnumbers is hidden in the arithmetic. The only direct references to\nrational numbers are the \u201C%r\u201D format code in the printf statement near the bottom\nof function rpncalc and the call to rationalstr halfway function gettoken.\n\nThe first remarkable element in the file rpnparse.inc is the enum\ndeclaration, where one element has a tag (t_field) and the other element has a size\n(t_word). Function rpncalc declares variable field as an array using\nthe enumeration symbol as its size. Behind the screens, this declaration does more\nthan just create an array with 22 cells:\n\n/*The index tag of the array is set to the tag name \u201Ctoken:\u201D. This means that you can index the array with any of the elements from the enumeration, but not with values that have a different tag. In other words, field[t_type] is okay, but field[1] gives a parser diagnostic.\n\n/*The tag name of the enumeration overrules the tag name of the array variable, if any. The field variable is untagged, but field[t_value] has the tag Rational:, because the enumeration element t_value is declared as such. This, hence, allows you to create an array whose elements have different tag names.\n\n/*When the enumeration element has a size, the array element indicated with that element is sometimes treated as a sub-array. In rpncalc, expression \u201Cfield[t_type]\u201D is a single cell, \u201Cfield[t_value]\u201D is a single cell, but \u201Cfield[t_word]\u201D is a one-dimensional array of 20 cells. We see that specifically in the line:\n\n    printf  "Unknown  operator  \u2019%s\u2019\\n",  field[t_word]\n\nwhere the format code %s expects a string \u2014a zero-terminated array.\n\n\n\n\n\n`Rational numbers, see also the \u201CCelsius to Fahrenheit\u201D example on page page 16`\n\n`\u201Cenum\u201D statement: 101`\n\n`Another example of an index tag: page 68`\n\n\n\n// came to here\n\n\n\n\n***\n\nIf you know C/C\u207A\u207A  or Java, you may want to look at the switch statement.\nThe switch statement differs in a number of ways from the other languages\nthat provide it. The cases are not fall-through, for example, which in\nturn means that the break statement for the case EndOfExpr breaks out of the\nenclosing loop, instead of out of the switch.\n\nOn the top of the for loop in function rpncalc, you will find the\ninstruction \u201Cfield = gettoken(string, index)\u201D. As already exemplified in the\nwcount.p (\u201Cword count\u201D) program on page 19, functions may return arrays.\nIt gets more interesting for a similar line in function gettoken:\n\nfield[t_word] = word\n\nwhere word is an array of 20 cells and field is an array of 22 cells.\nHowever, as the t_word enumeration field is declared as having a size of 20 cells,\n\u201Cfield[t_word]\u201D is considered a sub-array of 20 cells, precisely matching the\narray size of word.\n\nListing: strtok.inc\n\n```c\n\n/* extract words from a string (words must be separated by white space) */\n#include <string>\n\nstrtok(const string[], &index)\n{\n    new length = strlen(string)\n\n    /* skip leading white space */\n    while (index < length && string[index] <= \u2019 \u2019)\n        index++\n\n    /* store the word letter for letter */\n    new offset = index     /* save start position of token */\n    new result[20]         /* string to store the word in */\n    while (index < length\n        && string[index] > \u2019 \u2019\n        && index - offset < sizeof result - 1)\n        {\n            result[index - offset] = string[index]\n            index++\n        }\n    result[index - offset] = EOS /* zero-terminate the string */\n\n    return result\n}\n\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"\u201Cswitch\u201D statement: page 115"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Function strtok is the same as the one used in the wcount.p example. It is\nimplemented in a separate file for the rpn calculator program. Note that the\nstrtok function as it is implemented here can only handle words with up to 19"}),"\n",(0,i.jsxs)(n.p,{children:["characters \u2014the 20th character is the zero terminator. A truly general purpose\nre-usable implementation of an strtok function would pass the destination\narray as a parameter, so that it could handle words of any size. Supporting\nboth packed and unpack strings would also be a useful feature of a",(0,i.jsx)(n.br,{}),"\n","general purpose function."]}),"\n",(0,i.jsxs)(n.p,{children:["When discussing the merits of Reverse Polish Notation, I mentioned that a\nstack is both an aid in \u201Cvisualizing\u201D the algorithm as well as a",(0,i.jsx)(n.br,{}),"\n","convenient method to implement an rpn parser. This example rpn calculator, uses\na stack with the ubiquitous functions push and pop. For error checking",(0,i.jsx)(n.br,{}),"\n","and resetting the stack, there is a third function that clears the stack."]}),"\n",(0,i.jsx)(n.p,{children:"Listing: stack.inc"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"\n/* stack functions, part of the RPN calculator */\n#include <rational>\n\nstatic Rational: stack[50]\nstatic stackidx = 0\n\npush(Rational: value)\n{\n    assert stackidx < sizeof stack\n    stack[stackidx++] = value\n}\n\nRational: pop()\n{\n    assert stackidx > 0\n    return stack[--stackidx]\n}\n\nclearstack()\n{\n    assert stackidx >= 0\n    if (stackidx == 0)\n        return false\n    stackidx = 0\n    return true\n}\n\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"wcount.p: page 19"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The file stack.inc includes the file rational again. This is technically not\nnecessary (rpnparse.inc already included the definitions for rational number\nsupport), but it does not do any harm either and, for the sake of code re-use,\nit is better to make any file include the definitions of the libraries that it\ndepends on."}),"\n",(0,i.jsxs)(n.p,{children:["Notice how the two global variables stack and stackidx are declared",(0,i.jsx)(n.br,{}),"\n","as \u201Cstatic\u201D variables; using the keyword static instead of new. Doing this makes\nthe global variables \u201Cvisible\u201D in that file only. For all other files in a",(0,i.jsx)(n.br,{}),"\n","larger project, the symbols stack and stackidx are invisible and they cannot (ac-\ncidentally) modify the variables. It also allows the other modules to declare\ntheir own private variables with these names, so it avoids name clashing."]}),"\n",(0,i.jsx)(n.p,{children:"The rpn calculator is actually still a fairly small program, but it has been set\nup as if it were a larger program. It was also designed to demonstrate a set\nof elements of the pawn language and the example program could have been\nimplemented more compactly."}),"\n",(0,i.jsx)(n.h3,{id:"-event-driven-programming",children:"\u2022 Event-driven programming"}),"\n",(0,i.jsx)(n.p,{children:"All of the example programs that were developed in this chapter so far, have\nused a \u201Clineal\u201D programming model: they start with main and the code deter-\nmines what to do and when to request input. This programming model is easy\nto understand and it nicely fits most programming languages, but it is also a\nmodel does not fit many \u201Creal life\u201D situations. Quite often, a program cannot\nsimply process data and suggest that the user provides input only when it is\nready for him/her. Instead, it is the user who decides when to provide input,\nand the program or script should be prepared to process it in an acceptable\ntime, regardless of what it was doing at the moment."}),"\n",(0,i.jsx)(n.p,{children:"The above description suggests that a program should therefore be able to in-\nterrupt its work and do other things before picking up the original task. In\nearly implementations, this was indeed how such functionality was implemented: a\nmulti-tasking system where one task (or thread) managed the background tasks\nand a second task/thread that sits in a loop continuously requesting user input.\nThis is a heavy-weight solution, however. A more light-weight implementation\nof a responsive system is what is called the \u201Cevent-driven\u201D programming model."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"In the event-driven programming model, a program or script decomposes any\nlengthy (background) task into short manageable blocks and in between, it is\navailable for input. Instead of having the program poll for input, however, the\nhost application (or some other sub-system) calls a function that is attached\nto the event \u2014but only if the event occurs."}),"\n",(0,i.jsxs)(n.p,{children:["A typical event is \u201Cinput\u201D. Observe that input does not only come from human\noperators. Input packets can arrive over serial cables, network stacks,\ninternal\nsub-systems such as timers and clocks, and all kinds of other equipment that\nyou may have attached to your system. Many of the apparatus that produce\ninput, just send it. The arrival of such input is an event, just like a key\npress.\nIf you do not catch the event, a few of them may be stored in an",(0,i.jsx)(n.br,{}),"\n","internal\nsystem queue, but once the queue is saturated the events are simply dropped."]}),"\n",(0,i.jsx)(n.p,{children:"pawn directly supports the event-driven model, because it supports multiple\nentry points. The sole entry point of a lineal program is main; an event-driven\nprogram has an entry point for every event that it captures. When compared to\nthe lineal model, event-driven programs often appear \u201Cbottom-up\u201D: instead of"}),"\n",(0,i.jsxs)(n.p,{children:["your program calling into the host application and deciding what to do next,\nyour program is being called from the outside and it is required to",(0,i.jsx)(n.br,{}),"\n","respond\nappropriately and promptly."]}),"\n",(0,i.jsx)(n.p,{children:"pawn does not specify a standard library, and so there is no guarantee that in\na particular implementation, functions like printf and getvalue. Although\nit is suggested that every implementation provides a minimal console/terminal\ninterface with a these functions, their availability is ultimately\nimplementation-"}),"\n",(0,i.jsx)(n.p,{children:"dependent. The same holds for the public functions \u2014the entry points for a\nscript. It is implementation-dependent which public functions a host applica-\ntion supports. The script in this section may therefore not run on your platform\n(even if all previous scripts ran fine). The tools in the standard\ndistribution of\nthe pawn system support all scripts developed in this manual, provided that"}),"\n",(0,i.jsx)(n.p,{children:"your operating system or environment supports standard terminal functions"}),"\n",(0,i.jsx)(n.p,{children:"such as setting the cursor position."}),"\n",(0,i.jsx)(n.p,{children:"An early programming language that was developed solely for teaching the\nconcepts of programming to children was \u201CLogo\u201D. This dialect of LISP made\nprogramming visual by having a small robot, the \u201Cturtle\u201D, drive over the floor\nunder control of a simple program. This concept was then copied to moving\na (usually triangular) cursor of the computer display, again under control of a\nprogram. A novelty was that the turtle now left a trail behind it, allowing you\nto create drawings by properly programming the turtle \u2014it became known as turtle graphics."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Public functions: 83"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The term \u201Cturtle graphics\u201D was also used for drawing inter-\nactively with the arrow keys on the keyboard and a \u201Cturtle\u201D for the current\nposition. This method of drawing pictures on the computer was briefly popular\nbefore the advent of the mouse."}),"\n",(0,i.jsx)(n.p,{children:"Listing: turtle.p"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"\n@keypressed(key)\n{\n    /_ get current position */\n    new x, y\n    wherexy x, y\n\n    /_ determine how the update the current position */\n    switch (key)\n    {\n        case \u2019u\u2019: y-- /_ up */\n        case \u2019d\u2019: y++ /_ down */\n        case \u2019l\u2019: x-- /_ left */\n        case \u2019r\u2019: x++ /_ right */\n        case \u2019\\e\u2019: exit /_ Escape = exit */\n    }\n\n    /_ adjust the cursor position and draw something */\n    moveturtle x, y\n}\n\nmoveturtle(x, y)\n{\n    gotoxy x, y\n    print \u2019/*\u2019\n    gotoxy x, y\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The entry point of the above program is @keypressed \u2014it is called on a\nkey press. If you run the program and do not type any key, the",(0,i.jsx)(n.br,{}),"\n","function @keypressed never runs; if you type ten keys, @keypressed runs ten times.\nContrast this behaviour with main: function main runs immediately after you\nstart the script and it runs only once."]}),"\n",(0,i.jsxs)(n.p,{children:["It is still allowed to add a main function to an event-driven program: the main\nfunction will then serve for one-time initialization. A simple addition to this\nexample program is to add a main function, in order to clear the",(0,i.jsx)(n.br,{}),"\n","console/\nterminal window on entry and perhaps set the initial position of the \u201Cturtle\u201D\nto the centre."]}),"\n",(0,i.jsx)(n.p,{children:"Support for function keys and other special keys (e.g. the arrow keys) is highly\nsystem-dependent. On ANSI terminals, these keys produce different codes\nthan in a Windows \u201CDOS box\u201D."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"In the spirit of keeping the example program\nportable, I have used common letters (\u201Cu\u201D for up, \u201Cl\u201D for left, etc.). This\ndoes not mean, however, that special keys are beyond pawn\u2019s capabilities."}),"\n",(0,i.jsxs)(n.p,{children:["In the \u201Cturtle\u201D script, the \u201CEscape\u201D key terminates the host application through\nthe instruction exit. For a simple pawn run-time host, this will indeed work.\nWith host applications where the script is an add-on, or",(0,i.jsx)(n.br,{}),"\n","host-applications"]}),"\n",(0,i.jsx)(n.p,{children:"that are embedded in a device, the script usually cannot terminate the host application."}),"\n",(0,i.jsx)(n.h3,{id:"-multiple-events",children:"\u2022 Multiple events"}),"\n",(0,i.jsxs)(n.p,{children:["The advantages of the event-driven programming model, for building reactive\nprograms, become apparent in the presence of multiple events. In fact,\nthe event-driven model is only useful if you have more that one entry",(0,i.jsx)(n.br,{}),"\n","point; if your script just handles a single event, it might as well enter a polling\nloop for that single event. The more events need to be handled, the",(0,i.jsx)(n.br,{}),"\n","harder the lineal programming model becomes. The script below implements a bare-bones\n\u201Cchat\u201D program, using only two events: one for sending and one for receiving.\nThe script allows users on a network (or perhaps over another connection) to\nexchange single-line messages."]}),"\n",(0,i.jsx)(n.p,{children:"The script depends on the host application to provide the native and public\nfunctions for sending and receiving \u201Cdatagrams\u201D and for responding to keys\nthat are typed in. How the host application sends its messages, over a serial\nline or using TCP/IP, the host application may decide itself. The tools in the"}),"\n",(0,i.jsx)(n.p,{children:"standard pawn distribution push the messages over the TCP/IP network, and\nallow for a \u201Cbroadcast\u201D mode so that more than two people can chat with each other."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Listing: chat.p"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\n#include <datagram>\n\n@receivestring(const message[], const source[])\nprintf "[%s] says: %s\\n", source, message\n\n@keypressed(key)\n{\n    static string[100 char]\n    static index\n\n    if (key == \u2019\\e\u2019)\n        exit /* quit on \u2019Esc\u2019 key */\n\n    echo key\n\n    if (key == \u2019\\r\u2019 || key == \u2019\\n\u2019 || index char == sizeof string)\n    {\n        string{index} = \u2019\\0\u2019 /* terminate string */\n        sendstring string\n\n        index = 0\n        string[index] = \u2019\\0\u2019\n    }\n    else\n        string{index++} = key\n}\n\necho(key)\n{\n    new string[2 char] = { 0 }\n    string{0} = key == \u2019\\r\u2019 ? \u2019\\n\u2019 : key\n    printf string\n}\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The bulk of the above script handles gathering received key-presses",(0,i.jsx)(n.br,{}),"\n","into a string and sending that string after seeing the enter key. The \u201CEscape\u201D key\nends the program. The function echo serves to give visual feedback of what\nthe user types: it builds a zero-terminated string from the key and prints it."]}),"\n",(0,i.jsx)(n.p,{children:"Despite its simplicity, this script has the interesting property that there is\nno fixed or prescribed order in which the messages are to be sent or received \u2014\nthere is no query\u2013reply scheme where each host takes its turn in talking &\nlistening. A new message may even be received while the user is typing its\nown message.\u2217"}),"\n",(0,i.jsx)(n.p,{children:"\u2022 State programming"}),"\n",(0,i.jsx)(n.p,{children:"In a program following the event-driven model, events arrive individually, and\nthey are also responded to individually. On occasion, though, an event is part\nof a sequential flow, that must be handled in order. Examples are data transfer\nprotocols over, for example, a serial line. Each event may carry a command,\na snippet of data that is part of a larger file, an acknowledgement, or\nother signals that take part in the protocol."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h6,{id:"-as-this-script-makes-no-attempt-to-separate-received-messages-from-typed-messages-for-example-in-two-different-scrollable-regions-the-terminalconsole-will-look-confusing-when-this-happens-with-an-improved-user-interface-this-simple-script-could-indeed-be-a-nice-message-base-chat-program",children:"\u2217 As this script makes no attempt to separate received messages from typed messages (for example, in two different scrollable regions), the terminal/console will look confusing when this happens. With an improved user-interface, this simple script could indeed be a nice message-base chat program"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"For the stream of events (and the data packets that they carry) to make sense,\nthe event-driven program must follow a precise hand-shaking protocol."}),"\n",(0,i.jsx)(n.p,{children:"To adhere to a protocol, an event-driven program must respond to each event in\ncompliance with the (recent) history of events received earlier and the\nresponses to those events. In other words, the handling of one event may set\nup a \u201Ccondition\u201D or \u201Cenvironment\u201D for the handling any one or more subsequent events."}),"\n",(0,i.jsx)(n.p,{children:"A simple, but quite effective, abstraction for constructing reactive systems\nthat need to follow (partially) sequential protocols, is that of the \u201Cautomaton\u201D or\nstate machine. As the number of states are usually finite, the theory often\nrefers to such automatons as Finite State Automatons or Finite State Machines. In\nan automaton, the context (or condition) of an event is its state. An event\nthat arrives may be handled differently depending on the state of the automaton,\nand in response to an event, the automaton may switch to another state \u2014\nthis is called a transition. A transition, in other words, as a response of the\nautomaton to an event in the context of its state."}),"\n",(0,i.jsx)(n.p,{children:"Automatons are very common in software as well as in mechanical devices (you\nmay see the Jacquard Loom as an early state machine). Automatons, with a\nfinite number of states, are deterministic (i.e. predictable in behaviour)\nand their relatively simple design allows a straightforward\nimplementation from a \u201Cstate diagram\u201D."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://i.ibb.co/k3kWVvy/image.png",alt:"State diagram"})}),"\n",(0,i.jsxs)(n.p,{children:["In a state diagram, the states are usually represented as circles or",(0,i.jsx)(n.br,{}),"\n","rounded rectangles and the arrows represent the transitions. As transitions are\nthe response of the automaton to events, an arrow may also be seen as an event \u201Cthat does something\u201D."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"An event/transition that is not defined in a particular\nstate is assumed to have no effect \u2014it is silently ignored. A filled dot\nrepresents the entry state, which your program (or the host application) must set in start-\nup. It is common to omit in a state diagram all event arrows that drop back\ninto the same state, but here I have chosen to make the response to all events explicit."}),"\n",(0,i.jsxs)(n.p,{children:["This state diagram is for \u201Cparsing\u201D comments that start with ",(0,i.jsx)(n.code,{children:"/*"})," and end\nwith ",(0,i.jsx)(n.code,{children:"*/"}),". There are states for plain text and for text inside a comment, plus\ntwo states for tentative entry into or exit from a comment. The automaton\nis intended to parse the comments interactively, from characters that the user\ntypes on the keyboard. Therefore, the only events that the automaton reacts\non are key presses. Actually, there is only one event (\u201Ckey-press\u201D) and",(0,i.jsx)(n.br,{}),"\n","the state switches are determined by event\u2019s parameter: the key."]}),"\n",(0,i.jsx)(n.p,{children:"pawn supports automatons and states directly in the language. Every func-\ntion\u2217 may optionally have one or more states assigned to it. pawn also supports\nmultiple automatons, and each state is part of a particular automaton. The"}),"\n",(0,i.jsx)(n.p,{children:"following script implements the preceding state diagram (in a single, anony-\nmous, automaton). To differentiate plain text from comments, both are output\nin a different colour."}),"\n",(0,i.jsx)(n.p,{children:"Listing: comment.p"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\n/* parse C comments interactively, using events and a state machine */\n\nmain()\n    state plain\n\n@keypressed(key) <plain>\n{\n    state (key == \u2019/\u2019) slash\n    if (key != \u2019/\u2019)\n        echo key\n}\n\n@keypressed(key) <slash>\n{\n    state (key != \u2019/\u2019) plain\n    state (key == \u2019/*\u2019) comment\n    echo \u2019/\u2019    /* print \u2019/\u2019 held back from previous state */\n    if (key != \u2019/\u2019)\n        echo key\n}\n\n@keypressed(key) <comment>\n{\n    echo key\n    state (key == \u2019/*\u2019) star\n}\n\n@keypressed(key) <star>\n{\n    echo key\n    state (key != \u2019/*\u2019) comment\n    state (key == \u2019/\u2019) plain\n}\n\necho(key) <plain, slash>\n    printchar key, yellow\n\necho(key) <comment, star>\n    printchar key, green\n\nprintchar(ch, colour)\n{\n    setattr .foreground = colour\n    printf "%c", ch\n}\n\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h6,{id:"-with-the-exception-of-native-functions-and-user-defined-operators",children:"\u2217 With the exception of \u201Cnative functions\u201D and user-defined operators."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["Function main sets the starting state to main and exits; all logic",(0,i.jsx)(n.br,{}),"\n","is eventdriven. when a key arrives in state plain, the program checks for",(0,i.jsx)(n.br,{}),"\n","a slash and conditionally prints the received key. The interaction between the states\nplain and slash demonstrates a complexity that is typical for automatons:\nyou must decide how to respond to an event when it arrives, without being\nable to \u201Cpeek ahead\u201D or undo responses to earlier events. This is usually the\ncase for event-driven systems \u2014you neither know what event you will receive\nnext, nor when you will receive it, and whatever your response to the current\nevent, there is a good chance that you cannot erase it on a future event and\npretend that it never happened."]}),"\n",(0,i.jsxs)(n.p,{children:["In our particular case, when a slash arrives, this might be the start of a\ncomment sequence (",(0,i.jsx)(n.code,{children:"/*"}),"), but it is not necessarily so. By inference, we cannot decide\non reception of the slash character what colour to print it in. Hence, we hold\nit back. However, there is no global variable in the script that says\nthat a character is held back \u2014in fact, apart from function parameters, no variable\nis declared at all in this script. The information about a character being held\nback is \u201Chidden\u201D in the state of the automaton."]}),"\n",(0,i.jsx)(n.p,{children:"As is apparent in the script, state changes may be conditional. The condition\nis optional, and you can also use the common if\u2013else construct to change states."}),"\n",(0,i.jsx)(n.p,{children:"Being state-dependent is not reserved for the event functions. Other functions\nmay have state declarations as well, as the echo function demonstrates. When\na function would have the same implementation for several states, you\njust need to write a single implementation and mention all applicable states. For\nfunction echo there are two implementations to handle the four states.\u2020"}),"\n",(0,i.jsxs)(n.p,{children:["That said, an automaton must be prepared to handle all events in any state.\nTypically, the automaton has neither control over which events arrive nor over\nwhen they arrive, so not handling an event in some state could lead to wrong\ndecisions. It frequently happens, then, that a some events are meaningful only\nin a few specific states and that they should trigger an error or \u201Creset\u201D pro-\ncedure in all other cases. The function for handling the event in such \u201Cerror\u201D\ncondition might then hold a lot of state names, if you were to mention them\nexplicitly. There is a shorter way: by not mentioning any name between the\nangle brackets, the function matches all states that have not explicit imple-\nmentation elsewhere. So, for example, you could use the signature ",(0,i.jsx)(n.code,{children:"echo(key) <>"}),"\nfor either of the two implementations (but not for both)."]}),"\n",(0,i.jsxs)(n.p,{children:["A single anonymous automaton is pre-defined. If a program contains more\nthan one automaton, the others must be explicitly mentioned, both in",(0,i.jsx)(n.br,{}),"\n","the state classifier of the function and in the state instruction. To do so, add the\nname of the automaton in front of the state name and separate the names of\nthe automaton and the state with a colon. That is, \u201Cparser",":slash","\u201D stands\nfor the state slash of the automaton parser. A function can only be part of a\nsingle automaton; you can share one implementation of a function for several\nstates of the same automaton, but you cannot share that function for states\nof different automatons."]}),"\n",(0,i.jsx)(n.h3,{id:"-entry-functions-and-automata-theory",children:"\u2022 Entry functions and automata theory"}),"\n",(0,i.jsx)(n.p,{children:"State machines, and the foundation of \u201Cautomata theory\u201D, originate from me-\nchanical design and pneumatic/electric switching circuits (using relays rather\nthan transistors). Typical examples are coin acceptors, traffic light control\nand communication switching circuits. In these applications, robustness and pre-\ndictability are paramount, and it was found that these goals were best achieved\nwhen actions (output) were tied to the states rather than to the events (input)."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h6,{id:"-a-function-that-has-the-same-implementation-for-all-states-does-not-need-a-state-classifierat-all-see-printchar",children:"* A function that has the same implementation for all states, does not need a state classifierat all \u2014see printchar."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://i.ibb.co/PYnBGS9/image.png",alt:"pcl"})}),"\n",(0,i.jsx)(n.h6,{id:"figure-1-pedestrian-crossing-lights",children:"Figure 1: Pedestrian crossing lights"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Entering a state (optionally) causes activity; events cause state changes, but\ndo not carry out other operations."}),"\n",(0,i.jsxs)(n.p,{children:["In a pedestrian crossing lights system, the lights for the vehicles and the\npedestrians must be synchronized. Obviously, the combination of a green light for\nthe traffic and a \u201Cwalk\u201D sign for the pedestrians is recipe for disaster. We\ncan also immediately dismiss the combination of yellow /walk as too",(0,i.jsx)(n.br,{}),"\n","dangerous. Thus, four combinations remain to be handled. The figure below is a",(0,i.jsx)(n.br,{}),"\n","state diagram for the pedestrian crossing lights. The entire process is activated with\na button, and operates on a timer."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://i.ibb.co/9wNR3ry/image.png",alt:"pcl"})}),"\n",(0,i.jsxs)(n.p,{children:["When the state red/walk times out, the state cannot immediately go back to\ngreen/wait, because the pedestrians that are busy crossing the road at",(0,i.jsx)(n.br,{}),"\n","that moment need some time to clear the road \u2014the state red/wait\nallows for this."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["For purpose of demonstration, this pedestrian crossing has the added\nfunctionality that when a pedestrian pushes the button while the light for the\ntraffic is already red, the time that the pedestrian has for crossing is lengthened.\nIf the state is red/wait and the button is pressed, it switches back to red/walk.\nThe englobing box around the states red/walk and red/wait for handling the\nbutton event is just a notational convenience: I could also have",(0,i.jsx)(n.br,{}),"\n","drawn two arrows from either state back to red/walk. The script source code",(0,i.jsx)(n.br,{}),"\n","(which follows below) reflects this same notational convenience, though."]}),"\n",(0,i.jsx)(n.p,{children:"In the implementation in the pawn language, the event functions now always\nhave a single statement, which is either a state change or an empty statement.\nEvents that do not cause a state change are absent in the diagram, but they\nmust be handled in the script; hence, the \u201Cfall-back\u201D event functions that do nothing."}),"\n",(0,i.jsxs)(n.p,{children:["The output, in this example program only messages printed on the\nconsole, is all done in the special functions entry. The function entry may\nbe seen as a main for a state: it is implicitly called when the",(0,i.jsx)(n.br,{}),"\n","state that it is attached to is entered. Note that the entry function is also called",(0,i.jsx)(n.br,{}),"\n","when \u201Cswitching\u201D to the state that the automaton is already in: when the state is\nred_walk an invocation of the @keypressed sets the state to red_walk (which\nit is already in) and causes the entry function of red_walk to run \u2014this is a\nre-entry of the state."]}),"\n",(0,i.jsx)(n.p,{children:"Listing: traffic.p"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\n/* traffic light synchronizer, using states in an event-driven model */\n#include <time>\n\nmain()                     state green_wait\n\n@keypressed(key) <green_wait>         state yellow_wait\n@keypressed(key) <red_walk, red_wait>     state red_walk\n@keypressed(key) <>             {} /* fallback */\n\n@timer() <yellow_wait>            state red_walk\n@timer() <red_walk>             state red_wait\n@timer() <red_wait>             state green_wait\n@timer() <>                 {} /* fallback */\n\nentry() <green_wait>\n    print "Green / Don\u2019t walk\\n"\n\nentry() <yellow_wait>\n{\n    print "Yellow / Don\u2019t walk\\n"\n    settimer 2000\n}\n\nentry() <red_walk>\n{\n    print "Red / Walk\\n"\n    settimer 5000\n}\n\nentry() <red_wait>\n{\n    print "Red / Don\u2019t walk\\n"\n    settimer 2000\n}\n\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"This example program has an additional dependency on the host application/\nenvironment: in addition to the \u201C@keypressed\u201D event function, the host must\nalso provide an adjustable \u201C@timer\u201D event. Because of the timing functions,\nthe script includes the system file time.inc near the top of the script."}),"\n",(0,i.jsxs)(n.p,{children:["The event functions with the state changes are all on the top part of the\nscript. The functions are laid out to take a single line each, to suggest a",(0,i.jsx)(n.br,{}),"\n","table-like structure. All state changes are unconditional in this example, but conditional\nstate changes may be used with entry functions too. The bottom part are the\nevent functions."]}),"\n",(0,i.jsxs)(n.p,{children:["Two transitions to the state red_walk exist \u2014or three if you consider",(0,i.jsx)(n.br,{}),"\n","the affection of multiple states to a single event function as a mere",(0,i.jsx)(n.br,{}),"\n","notational convenience: from yellow_wait and from the combination of red_walk and\nred_wait. These transitions all pass through the same entry function, thereby\nreducing and simplifying the code."]}),"\n",(0,i.jsx)(n.p,{children:"In automata theory, an automaton that associates output with state entries,\nsuch as this pedestrian traffic lights example, is a \u201CMoore automaton\u201D; an au-\ntomaton that associates output with (state-dependent) events or transitions is\na \u201CMealy automaton\u201D. The interactive comment parser on page 40 is a typical\nMealy automaton. The two kinds are equivalent: a Mealy automaton can be\nconverted to a Moore automaton and vice versa, although a Moore automa-\nton may need more states to implement the same behaviour. In practice, the\nmodels are often mixed, with an overall \u201CMoore automaton\u201D design, and a few\n\u201CMealy states\u201D where that saves a state."}),"\n",(0,i.jsx)(n.p,{children:"\u2022 State variables"}),"\n",(0,i.jsxs)(n.p,{children:["The previous example was crafted to demonstrate a few properties of",(0,i.jsx)(n.br,{}),"\n","state programming with pawn, but its model of a pedestrian crossing light is not"]}),"\n",(0,i.jsx)(n.p,{children:"very realistic. The first thing that is lacking is a degree of fairness : pedestrians\nshould not be able to block car traffic indefinitly. The car traffic should\nsee a green light for a period of some minimum duration after pedestrians have had\ntheir time slot for crossing the road. Secondly, many traffic lights have a kind\nof remote control ability, so that emergency traffic (ambulance, firetruck, . . . )\ncan force green lights on their path. A well-known example of such remote"}),"\n",(0,i.jsx)(n.p,{children:"control is the mirt system (Mobile Infra-Red Transmitter) but not de facto\nstandard exists \u2014the Netherlands use a radiographic system called vetag for\ninstance."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The new state diagram for the pedestrian crossing light has two more states,\nbut more importantly: it needs to save data across events and share it between\nstates. When the pedestrian presses the button while the state is red_wait, we\nneither want to react on the button immediately (this was our \u201Cfairness rule\u201D),\nnor the button to be ignored or \u201Cforgotten\u201D. In other words, we move to the\nstate green_wait_interim regardless of the button press, but memorize the\npress for a decision made at the point of leaving state green_wait_interim."}),"\n",(0,i.jsxs)(n.p,{children:["Automatons excel in modelling control flow in reactive/interactive\nsystems, but data flow has traditionally been a weak point. To see why, consider that\neach event is handled individually by a function and that the local variables in\nthat function disappear when the function returns. Local variables can, hence,\nnot be used to pass data from one event to the next. Global variables, while\nproviding a work-around, have drawbacks: global scope and and",(0,i.jsx)(n.br,{}),"\n","\u201Ceternal\u201D lifespan. If a variable is used only in the event handlers of a single state,\nit is desirable to hide it from the other states, in order to protect it from\naccidental modification. Likewise, shortening the lifespan to the state(s) that the\nvariable is active in, reduces the memory footprint. \u201CState variables\u201D provide\nthis mix of variable scope and variable lifespan that are tied to a series of states,\nrather than to functions or modules."]}),"\n",(0,i.jsxs)(n.p,{children:["pawn enriches the standard finite state machine (or automaton) with variables\nthat are declared with a state classifier. These variables are only\naccessible from the listed states and the memory these variable hold may be",(0,i.jsx)(n.br,{}),"\n","reused by other purposes while the automaton is in a different state (different than\nthe ones listed). Apart from the state classifier, the declaration of a state"]}),"\n",(0,i.jsx)(n.p,{children:"variable is similar to that of a global variable. The declaration of the\nvariable button_memo in the next listing illustrates the concept."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Listing: traffic2.p"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\n/* a more realistic traffic light synchronizer, including an\n * "override" for emergency vehicles\n */\n\n#include <time>\n\nmain()\n    state green_wait_interim\n\nnew bool: button_memo <red_wait, green_wait_interim, yellow_wait>\n\n@keypressed(key)\n{\n    switch (key)\n    {\n        case \u2019 \u2019: button_press\n        case \u2019/*\u2019: mirt_detect\n    }\n}\n\nbutton_press() <green_wait>\n    state yellow_wait\n\nbutton_press() <red_wait, green_wait_interim>\n    button_memo = true\n\nbutton_press() <>         /* fallback */\n    {}\n\nmirt_detect()\n    state mirt_override\n\n@timer() <yellow_wait>\n    state red_walk\n\n@timer() <red_walk>\n    state red_wait\n\n@timer() <red_wait>\n    state green_wait_interim\n\n@timer() <green_wait_interim>\n{\n    state (!button_memo) green_wait\n    state (button_memo) yellow_wait\n}\n\n@timer() <mirt_override>\n    state green_wait\n\n@timer() <>             /* fallback */\n    {}\n\nentry() <green_wait_interim>\n{\n    print "Green / Don\u2019t walk\\n"\n    settimer 5000\n}\n\nentry() <yellow_wait>\n{\n    print "Yellow / Don\u2019t walk\\n"\n    button_memo = false\n    settimer 2000\n}\n\nentry() <red_walk>\n{\n    print "Red / Walk\\n"\n    settimer 5000\n}\n\nentry() <red_wait>\n{\n    print "Red / Don\u2019t walk\\n"\n    settimer 2000\n}\n\nentry() <mirt_override>\n{\n    print "Green / Don\u2019t walk\\n"\n    settimer 5000\n}\n\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["If a pedestrian pushes the button during mirt activity, that button press\nis\nforgotten. Unless emergencies are a frequent occurence, this is",(0,i.jsx)(n.br,{}),"\n","probably a\nminor nuisance; and it is easy to fix, too."]}),"\n",(0,i.jsx)(n.p,{children:"\u2022 State programming wrap-up"}),"\n",(0,i.jsx)(n.p,{children:"States are ubiquitous, even if we do not always recognize them as such. The\nconcept of finite state machines has traditionally been applied mostly to pro-"}),"\n",(0,i.jsx)(n.p,{children:"grams mimicking mechanical apparatus and software that implements commu-\nnication protocols. With the appearance of event-driven windowing systems,\nstate machines now also appear in the GUI design of desktop programs. States\nabound in web programs, because the browser and the web-site scripting host\nhave only a weak link, but the state machine in web applications is typically\nimplemented in an ad-hoc manner."}),"\n",(0,i.jsx)(n.p,{children:"States can also be recognized in common problems and riddles. In the well\nknown riddle of the man that must move a cabbage, a sheep and a wolf across a river,\n\u2217 the states are obvious \u2014the trick of the riddle is to avoid the forbidden\nstates. But now that we are seeing states everywhere, the task is not to overdo it."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"For example, in the second implementation of a pedestrian crossing light, see\npage 47, I used a variable (button_memo) to hold a criterion for a decision made\nat a later time. An alternative implementation would be to throw in a couple\nof more states to hold the situations \u201Cred-wait-&-button-pressed\u201D and \u201Cgreen-\nwait-interim-&-button-pressed\u201D. No more variable would then be needed, but\nat the cost of a more complex state diagram and implementation. In general,\nthe number of states should be kept small."}),"\n",(0,i.jsx)(n.p,{children:"Although automata provide a good abstraction to model reactive and interac-\ntive systems, coming to a correct diagram is not straightforward \u2014and some-\ntimes just outright hard. Too often, the \u201Csunny day scenario\u201D of states and\nevents is plotted out first, and everything straying from this path is then\nadded on an impromptu basis. This approach carries the risk that some combinations\nof events & states are forgotten, and indeed I have encountered two comment\nparser diagrams (like the one at page 40) by different book/magazine authors\nthat were flawed in such way. Instead, I advise to focus on the\nevents and on the responses for individual events. For every state, every event should be\nconsidered; do not route events through a general purpose fall-back too eagerly."}),"\n",(0,i.jsxs)(n.p,{children:["It has become common practice, unfortunately, to introduce automata theory\nwith applications for which better solutions exist. One, oft repeated, example\nis that of an automaton that accumulates the value of a series of",(0,i.jsx)(n.br,{}),"\n","coins, or that \u201Ccalculates\u201D the remainder after division by 3 of a binary number. These\napplications may have made sense in mechanical/pneumatic design where \u201Cthe"]}),"\n",(0,i.jsxs)(n.p,{children:["\u2217 A man has to ferry a wolf, a sheep and a cabbage across a",(0,i.jsx)(n.br,{}),"\n","river in a boat, that just fits 2 things: the man and something else. If left alone the wolf will eat\nthe sheep and the sheep will eat the cabbage. How can the man ferry them across the river?"]}),"\n",(0,i.jsx)(n.p,{children:"state\u201D is the only memory that the automaton has, but in software, using vari-\nables and arithmetic operations is the better choice. Another typical example\nis that of matching words or patterns using a state machine: every next let-\nter that is input switches to a new state. Lexical scanners, such as the ones\nthat compilers and interpreters use to interpret source code, might use such\nstate machines to filter out \u201Creserved words\u201D. However, for any practical set\nof reserved words, such automatons become unwieldy, and no one will design\nthem by hand. In addition, there is no reason why a lexical scanner cannot\npeek ahead in the text or jump back to a mark that it set earlier \u2014which is\none of the criterions for choosing a state implementation in the first place,\nand finally, solutions like trie lookups are likely simpler to design and implement\nwhile being at least as quick."}),"\n",(0,i.jsxs)(n.p,{children:["What I have side-stepped in this book is a formal description for the notation\nin the state diagrams \u2014in part because it is in line with the usual notation.\nFor a state, the rounded rectangle holds the name of the state and optionally\na brief description of what the state entry function does. The",(0,i.jsx)(n.br,{}),"\n","arrow for a transition contains the name of the event (or pseudo-event), an",(0,i.jsx)(n.br,{}),"\n","optional condition between square brackets and an optional action behind a slash (\u201C/\u201D)."]}),"\n",(0,i.jsx)(n.p,{children:"\u2022 Program verification"}),"\n",(0,i.jsxs)(n.p,{children:["Should the compiler/interpreter not catch all bugs? This rhetorical question\nhas both technical and philosophical sides. I will forego all",(0,i.jsx)(n.br,{}),"\n","non-technical aspects and only mention that, in practice, there is a tradeoff\nbetween the \u201Cexpressiveness\u201D of a computer language and the \u201Cenforced correctness\u201D (or\n\u201Cprovable correctness\u2019) of programs in that language. Making a language very\n\u201Cstrict\u201D is not a solution if work needs to be done that exceeds the size of a\ntoy program. A too strict language leaves the programmer struggling with the\nlanguage, whereas the \u201Cproblem to solve\u201D should be the real struggle and the\nlanguage should be a simple means to express the solution in."]}),"\n",(0,i.jsx)(n.p,{children:"The goal of the pawn language is to provide the developer with an informal,\nand convenient to use, mechanism to test whether the program behaves as was\nintended. This mechanism is called \u201Cassertions\u201D and, although the concept of\nassertions predates the idea of \u201Cdesign by contract\u201D, it is most easily\nexplained through the idea of design by contract."}),"\n",(0,i.jsxs)(n.p,{children:["The \u201Cdesign by contract\u201D paradigm provides an alternative approach for deal-\ning with erroneous conditions. The premise is that the programmer",(0,i.jsx)(n.br,{}),"\n","knows the task at hand, the conditions under which the software must operate and"]}),"\n",(0,i.jsx)(n.p,{children:"the environment. In such an environment, each function specifies the specific\nconditions, in the form of assertions , that must hold true before a client may\nexecute the function. In addition, the function may also specify any conditions\nthat hold true after it completes its operation. This is the \u201Ccontract\u201D of the\nfunction."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The name \u201Cdesign by contract\u201D was coined by Bertrand Meyer and its princi-\nples trace back to predicate logic and algorithmic analysis."}),"\n",(0,i.jsx)(n.p,{children:"\u2022 Preconditions specify the valid values of the input parameters and environmental attributes;"}),"\n",(0,i.jsx)(n.p,{children:"\u2022 Postconditions specify the output and the (possibly modified) environment;"}),"\n",(0,i.jsx)(n.p,{children:"\u2022 Invariants indicate the conditions that must hold true at key points in a function, regardless of the path taken through the function."}),"\n",(0,i.jsx)(n.p,{children:"For example, a function that computes a square root of a number may specify\nthat its input parameter be non-negative. This is a precondition. It may also\nspecify that its output, when squared, is the input value 0.01%. This is a\npostcondition; it verifies that the routine operated correctly. A convenient\nway to calculate a square root is via \u201Cbisection\u201D. At each iteration, this algorithm\ngives at least one extra bit (binary digit) of accuracy. This is an invariant\n(it might be an invariant that is hard to check, though)."}),"\n",(0,i.jsxs)(n.p,{children:["Preconditions, postconditions and invariants are similar in the sense that they\nall consist of a test and that a failed test indicates an error in",(0,i.jsx)(n.br,{}),"\n","the implementation. As a result, you can implement preconditions, postconditions and\ninvariants with a single construct: the \u201Cassertion\u201D. For preconditions, write\nassertions at the very start of the routine; for invariants, write an assertion\nwhere the invariant should hold; for post conditions, write an assertion before\neach \u201Creturn\u201D statement or at the end of the function."]}),"\n",(0,i.jsx)(n.p,{children:"In pawn, the instruction is called assert; it is a simple statement that\ncontains a test. If the test outcome is \u201Dtrue\u201D, nothing happens. If the outcome is\n\u201Dfalse\u201D, the assert instruction terminates the program with a message containing the\ndetails of the assertion that failed."}),"\n",(0,i.jsxs)(n.p,{children:["Assertions are checks that should never fail. Genuine errors, such",(0,i.jsx)(n.br,{}),"\n","as user input errors, should be handled with explicit tests in the program, and",(0,i.jsx)(n.br,{}),"\n","not with assertions. As a rule, the expressions contained in assertions should be\nfree of side effects: an assertion should never contain code that your\napplication requires for correct operation."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Example square root funczion (usin bisection): 79"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["This does have the effect, however, that assertions never fire in a",(0,i.jsx)(n.br,{}),"\n","bug-free program: they just make the code fatter and slower, without any user-visible\nbenefit. It is not this bad, though. An additional feature of assertions is\nthat you can build the source code without assertions simply using a flag or option\nto the pawn parser. The idea is that you enable assertions during development\nand build the \u201Cretail version\u201D of the code without assertions. This is a better\napproach than removing the assertions, because all assertions are automatically\n\u201Cback\u201D when recompiling the program \u2014e.g. for maintenance."]}),"\n",(0,i.jsx)(n.p,{children:"During maintenance, or even during the initial development, if you catch a bug\nthat was not trapped by an assertion, before fixing the bug, you should think\nof how an assertion could have trapped this error. Then, add this assertion\nand test whether it indeed catches the bug before fixing the bug. By doing\nthis, the code will gradually become sturdier and more reliable."}),"\n",(0,i.jsx)(n.p,{children:"\u2022 Documentation comments"}),"\n",(0,i.jsxs)(n.p,{children:["When programs become larger, documenting the program and the functions\nbecomes vital for its maintenance, especially when working in a team. The\npawn language tools have some features to assist you in documenting",(0,i.jsx)(n.br,{}),"\n","thecode in comments. Documenting a program or library in its comments has a\nfew advantages \u2014for example: documentation is more easily kept up to date\nwith the program, it is efficient in the sense that programming comments now\ndouble as documentation, and the parser helps your documentation efforts in\ngenerating syntax descriptions and cross references."]}),"\n",(0,i.jsxs)(n.p,{children:["Every comment that starts with three slashes\n(\u201C/// \u201D) followed by white-space, or that starts with a slash and two stars (\u201C//",(0,i.jsx)(n.em,{children:"/"})," \u201D)\nfollowed by white-space is a\nspecial documentation comment. The pawn compiler extracts documentation\ncomments and optionally writes these to a \u201Creport\u201D file. See the application\ndocumentation, or appendix B, how to enable the report generation."]}),"\n",(0,i.jsxs)(n.p,{children:["As an aside, comments that start with \u201C/",(0,i.jsx)(n.em,{children:"\u201D must still be closed with \u201C"}),"/\u201D.\nSingle line documentation comments (\u201C///\u201D) close at the end of the line."]}),"\n",(0,i.jsx)(n.p,{children:"The report file is an XML file that can subsequently be transformed to HTML\ndocumentation via an XSL/XSLT stylesheet, or be run through other tools to\ncreate printed documentation. The syntax of the report file is compatible with\nthat of the \u201C.Net\u201D developer products \u2014except that the pawn compiler stores\nmore information in the report than just the extracted documentation strings.\nThe report file contains a reference to the \u201Csmalldoc.xsl\u201D stylesheet."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Comment syntax: 97"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["The example below illustrates documentation comments in a simple script that\nhas a few functions. You may write documentation comments for a function\nabove its declaration or in its body. All documentation comments that appear\nbefore the end of the function are attributed to the function. You can",(0,i.jsx)(n.br,{}),"\n","also\nadd documentation comments to global variables and global constants \u2014these\ncomments must appear above the declaration of the variable or constant. Fig-\nure 2 shows part of the output for this (rather long) example. The style\nof the\noutput is adjustable in the cascading style sheet (CSS-file) associated with the\nXSLT transformation file."]}),"\n",(0,i.jsx)(n.p,{children:"Listing: weekday.p"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\n/**\n\n- This program illustrates Zeller\u2019s congruence algorithm to calculate\n\n- the day of the week given a date.\n\n*/\n\n/**\n\n- <summary>\n\n-        The  main  program:  asks  the  user  to  input  a  date  and  prints\n\n  on\n\n-        what  day  of  the  week  that  date  falls.\n\n- </summary>\n\n*/\nmain()\n{\n    new day, month, year\n    if (readdate(day, month, year))\n    {\n        new wkday = weekday(day, month, year)\n        printf "The date %d-%d-%d falls on a ", day, month, year\n        switch (wkday)\n        {\n            case 0:\n            print "Saturday"\n            case 1:\n            print "Sunday"\n            case 2:\n            print "Monday"\n            case 3:\n            print "Tuesday"\n            case 4:\n            print "Wednesday"\n            case 5:\n            print "Thursday"\n            case 6:\n            print "Friday"\n        }\n    }\n    else\n        print "Invalid date"\n    print "\\n"\n}\n\n/**\n\n- <summary>\n\n-      The  core  function  of  Zeller\u2019s  congruence  algorithm.  The  function\n\n-      works  for  the  Gregorian  calender.\n\n- </summary>\n\n-\n\n- <param  name="day">\n\n-      The  day  in  the  month,  a  value  between  1  and  31.\n\n- </param>\n\n- <param  name="month">\n\n-      The  month:  a  value  between  1  and  12.\n\n- </param>\n\n- <param  name="year">\n\n-      The  year  in  four  digits.\n\n- </param>\n\n-\n\n- <returns>\n\n-      The  day  of  the  week,  where  0  is  Saturday  and  6  is  Friday.\n\n- </returns>\n\n-\n\n- <remarks>\n\n-      This  function  does  not  check  the  validity  of  the  date;  when\n\n  the\n\n-      date  in  the  parameters  is  invalid,  the  returned  "day  of  the\n\n  week"\n\n-      will  hold  an  incorrect  value.\n\n-      <p/>\n\n-      This  equation  fails  in  many  programming  languages,  notably  most\n\n-      implementations  of  C,  C++  and  Pascal,  because  these  languages\n\n  have\n\n-      a  loosely  defined  "remainder"  operator.  Pawn,  on  the  other\n\n  hand,\n\n-      provides  the  true  modulus  operator,  as  defined  in  mathematical\n\n-      theory  and  as  was  intended  by  Zeller.\n\n- </remarks>\n\n*/\n\nweekday(day, month, year)\n{\n/**\n\n- <remarks>\n\n-      For  Zeller\u2019s  congruence  algorithm,  the  months  January  and\n\n-      February  are  the  13th  and  14th  month  of  the  <em>preceding</em>\n\n-      year.  The  idea  is  that  the  "difficult  month"  February  (which\n\n-      has  either  28  or  29  days)  is  moved  to  the  end  of  the  year.\n\n- </remarks>\n\n*/\n\n    if (month <= 2)\n        month += 12, --year\n\n    new j = year % 100\n    new e = year / 100\n    return (day + (month+1)*26/10 + j + j/4 + e/4 - 2*e) % 7\n}\n\n/**\n\n- <summary>\n\n-      Reads  a  date  and  stores  it  in  three  separate  fields.  tata\n\n- </summary>\n\n-\n\n- <param  name="day">\n\n-      Will  hold  the  day  number  upon  return.\n\n- </param>\n\n- <param  name="month">\n\n-      Will  hold  the  month  number  upon  return.\n\n- </param>\n\n- <param  name="year">\n\n-      Will  hold  the  year  number  upon  return.\n\n- </param>\n\n-\n\n- <returns>\n\n-      <em>true</em>  if  the  date  is  valid,  <em>false</em>  otherwise;\n\n-      if  the  function  returns  <em>false</em>,  the  values  of\n\n-      <paramref  name="day"/>,  <paramref  name="month"/>  and\n\n-      <paramref  name="year"/>  cannot  be  relied  upon.\n\n- </returns>\n\n*/\n\nbool: readdate(&day, &month, &year)\n{\n    print "Give a date (dd-mm-yyyy): "\n    day = getvalue(\\_,\u2019-\u2019,\u2019/\u2019)\n    month = getvalue(\\_,\u2019-\u2019,\u2019/\u2019)\n    year = getvalue()\n    return 1 <= month <= 12 && 1 <= day <= daysinmonth(month,year)\n}\n\n/**\n\n- <summary>\n\n-      Returns  whether  a  year  is  a  leap  year.\n\n- </summary>\n\n-\n\n- <param  name="year">\n\n-      The  year  in  4  digits.\n\n- </param>\n\n-\n\n- <remarks>\n\n-      A  year  is  a  leap  year:\n\n-      <ul>\n\n-          <li>  if  it  is  divisable  by  4,  </li>\n\n-          <li>  but  <strong>not</strong>  if  it  is  divisable  by  100,\n\n</li>\n\n-          <li>  but  it  <strong>is</strong>  it  is  divisable  by  400.\n\n</li>\n\n-      </ul>\n\n- </remarks>\n\n*/\n\nbool: isleapyear(year)\n\nreturn year % 400 == 0 || year % 100 != 0 && year % 4 == 0\n\n/**\n\n- <summary>\n\n-      Returns  the  number  of  days  in  a  month  (the  month  is  an\n\n  integer\n\n-      in  the  range  1  ..  12).  One  needs  to  pass  in  the  year  as\n\n  well,\n\n-      because  the  function  takes  leap  years  into  account.\n\n- </summary>\n\n-\n\n- <param  name="month">\n\n-      The  month  number,  a  value  between  1  and  12.\n\n- </param>\n\n- <param  name="year">\n\n-      The  year  in  4  digits.\n\n- </param>\n\n*/\n\ndaysinmonth(month, year)\n{\n    static daylist[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n    assert 1 <= month <= 12\n    return daylist[month-1] + \\_:(month == 2 && isleapyear(year))\n}\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The format of the XML file created by \u201C.Net\u201D developer products is",(0,i.jsx)(n.br,{}),"\n","documented in the Microsoft documentation. The pawn parser creates a mini-\nmal description of each function or global variable or constant that is used",(0,i.jsx)(n.br,{}),"\n","in a project, regardless of whether you used documentation comments on that\nfunction/variable/constant. The parser also generates few tags of its own:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"name"}),(0,i.jsx)(n.th,{children:"info"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"attribute"}),(0,i.jsx)(n.td,{children:"Attributes for a function, such as \u201Cnative\u201D or \u201Cstock\u201D."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"automaton"}),(0,i.jsx)(n.td,{children:"The automaton that the function belongs to (if any)."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"dependency"}),(0,i.jsx)(n.td,{children:"The names of the symbols (other functions, global variables and/global constants) that the function requires. If desired, a call tree can be constructed from the dependencies."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"param"}),(0,i.jsx)(n.td,{children:"Function parameters. When you add a parameter description in a documentation comment, this description is combined with the auto-generated content for the parameter."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"paraminfo"}),(0,i.jsx)(n.td,{children:"Tags and array or reference information on a parameter."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"referrer"}),(0,i.jsx)(n.td,{children:"All functions that refer to this symbol; i.e., all functions that use or call this variable/function. This information is sufficient to serve as a \u201Ccross-reference\u201D \u2014the \u201Creferrer\u201D tree is the inverse of the \u201Cdependency\u201D tree."})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://i.ibb.co/VmQS0fL/image.png",alt:"fig2"})}),"\n",(0,i.jsx)(n.h6,{id:"figure-2-documentation-generated-from-the-source-code",children:"Figure 2: Documentation generated from the source code"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"name"}),(0,i.jsx)(n.th,{children:"info"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"stacksize"}),(0,i.jsx)(n.td,{children:"The estimated number of cells that the function will allocate on the stack and heap. This stack usage estimate excludes the stack requirements of any functions that are \u201Ccalled\u201D from the function to which the documentation applies. For example, function readdate is documented as taking 6 cells on the stack, but it also calls daysinmonth which takes 4 additional cells \u2014and in turn calls isleapyear. To calculate the total stack requirements for function readdate, the call tree should be considered. In addition to the local variables and function parameters, the compiler also uses the stack for storing intermediate results in complex expressions. The stack space needed for these intermediate results are also excluded from this report. In general, the required overhead for the intermediate results is not cumulative (over all functions), which is why it would be inaccurate to add a \u201Csafety margin\u201D to every function. For the program as a whole, a safety margin would be highly advised. See appendix B (page 168. for the -v option which can tell you the maximum estimate stack usage, based on the call tree."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"tagname"}),(0,i.jsx)(n.td,{children:"The tag of the constant, variable, function result or function parameter(s)."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"transition"}),(0,i.jsx)(n.td,{children:"The transitions that the function provokes and their conditions \u2014see the section of automatons on page 38."})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["All text in the documentation comment(s) is also copied to each",(0,i.jsx)(n.br,{}),"\n","function,\nvariable or constant to which it is attached. The text in the documentation\ncomment is copied without further processing \u2014with one exception, see below.\nAs the rest of the report file is in XML format, and the most suitable way to\nprocess XML to on-line documentation is through an XSLT processor (such as\na modern browser), you may choose to do any formatting in the documentation\ncomments using HTML tags. Note that you will often need to explicitly close\nany HTML tags; the HTML standard does not require this, but XML/XSLT\nprocessors usually do. The pawn toolkit comes with an example XSLT file"]}),"\n",(0,i.jsx)(n.p,{children:"(with a matching style sheet) which supports the following XML/HTML tags:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"name"}),(0,i.jsx)(n.th,{children:"info"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<code> </code>"})}),(0,i.jsx)(n.td,{children:"Preformatted source code in a monospaced font; although the \u201C&\u201D, \u201C<\u201D and \u201C>\u201D must be typed as \u201C&\u201D, \u201C<\u201D and \u201C&rt;\u201D respectively."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<example> </example>"})}),(0,i.jsx)(n.td,{children:"Text set under the sub-header \u201CExample\u201D."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'<param name="..."> </param>'})}),(0,i.jsx)(n.td,{children:"A parameter description, with the parameter name appearing inside the opening tag (the \u201Cname=\u201D option) and the parameter description following it."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'<paramref name="..." />'})}),(0,i.jsx)(n.td,{children:"A reference to a parameter, with the parameter name appearing inside the opening tag (the \u201Cname=\u201D option)."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<remarks> </remarks>"})}),(0,i.jsx)(n.td,{children:'Text set under the sub-header "Remarks\u201D.'})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<returns> </returns>"})}),(0,i.jsx)(n.td,{children:"Text set under the sub-header \u201CReturns\u201D."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<seealso> </seealso>"})}),(0,i.jsx)(n.td,{children:"Text set under the sub-header \u201CSee also\u201D."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<summary> </summary>"})}),(0,i.jsx)(n.td,{children:"Text set immediately below the header of the symbol."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<section> </section>"})}),(0,i.jsx)(n.td,{children:"Sets the text in a header. This should only be used in documentation that is not attached to a function or a variable."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<subsection> </subsection>"})}),(0,i.jsx)(n.td,{children:"Sets the text in a sub-header. This should only be used in documentation that is not attached to a function or a variable."})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The following additional HTML tags are supported for general purpose formatting text inside any of the above sections:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"name"}),(0,i.jsx)(n.th,{children:"info"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<c> </c>"})}),(0,i.jsx)(n.td,{children:"Text set in a monospaced font."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<em> </em>"})}),(0,i.jsx)(n.td,{children:"Text set emphasized, usually in italics."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<p> </p>"})}),(0,i.jsxs)(n.td,{children:["Text set in a new paragraph. Instead of wrapping ",(0,i.jsx)("p",{children:" and "})," around every paragraph, inserting ",(0,i.jsx)("p",{})," as a separator between two paragraphs produces the same effect."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<para> </para>"})}),(0,i.jsxs)(n.td,{children:["An alternative for ",(0,i.jsx)("p",{children:" "}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<ul> </ul>"})}),(0,i.jsx)(n.td,{children:"An unordered (bulleted) list."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<ol> </ol>"})}),(0,i.jsx)(n.td,{children:"An ordered (numbered) list."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"<li> </li>"})}),(0,i.jsx)(n.td,{children:"An item in an ordered or unordered list."})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["As stated, there is one exception in the processing of documentation",(0,i.jsx)(n.br,{}),"\n","comments: if your documentation comment contains a ",(0,i.jsx)(n.code,{children:"<param ...>"})," tag (and a\nmatching ",(0,i.jsx)(n.code,{children:"</param>"}),"), the pawn parser looks up the parameter and combines\nyour description of the parameter with the contents that it has automatically\ngenerated."]}),"\n",(0,i.jsx)(n.h3,{id:"-warnings-and-errors",children:"\u2022 Warnings and errors"}),"\n",(0,i.jsx)(n.p,{children:"The big hurdle that I have stepped over is how to actually compile the code\nsnippets presented in this chapter. The reason is that the procedure depends\non the system that you are using: in some applications there is a \u201CMake\u201D or\n\u201CCompile script\u201D command button or menu option, while in other environments\nyou have to type a command like \u201Csc myscript\u201D on a command prompt. If\nyou are using the standard pawn toolset, you will find instructions of how to\nuse the compiler and run-time in the companion booklet \u201CThe pawn booklet\n\u2014 Implementor\u2019s Guide\u201D."}),"\n",(0,i.jsxs)(n.p,{children:["Regardless of the differences in launching the compile, the phenomenon that\nresults from launching the compile are likely to be very similar",(0,i.jsx)(n.br,{}),"\n","between all systems:"]}),"\n",(0,i.jsx)(n.p,{children:"\u2022 either the compile succeeds and produces an executable program \u2014that may or may not run automatically after the compile;"}),"\n",(0,i.jsx)(n.p,{children:"\u2022 or the compile gives a list of warning and error messages."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"\u2022 Mistakes happen and the pawn parser tries to catch as many of them as it\ncan. When you inspect the code that the pawn parser complains about, it\nmay on occasion be rather difficult for you to see why the code is erroneous\n(or suspicious). The following hints may help:"}),"\n",(0,i.jsx)(n.p,{children:"\u2022 Each error or warning number is numbered. You can look up the error message with this number in appendix A, along with a brief description on what the message really means."}),"\n",(0,i.jsx)(n.p,{children:"\u2022 If the pawn parser produces a list of errors, the first error in this list is a true error, but the diagnostic messages below it may not be errors at all. After the pawn parser sees an error, it tries to step over it and complete the compilation. However, the stumbling on the error may have confused the pawn parser so that subsequent legitimate statements are misinterpreted and reported as errors too. When in doubt, fix the first error and recompile."}),"\n",(0,i.jsx)(n.p,{children:"\u2022 The pawn parser checks only the syntax (spelling/grammar), not the semantics (i.e. the \u201Cmeaning\u201D) of the code. When it detects code that does not comply to the syntactical rules, there may actually be different ways in which the code can be changed to be \u201Ccorrect\u201D, in the syntactical sense of the word \u2014even though many of these \u201Ccorrections\u201D would lead to nonsensical code. The result is, though, that the pawn parser may have difficulty to precisely locate the error: it does not know what you meant to write. Hence, the parser often outputs two line numbers and the error is somewhere in the range (between the line numbers)."}),"\n",(0,i.jsx)(n.p,{children:"\u2022 Remember that a program that has no syntactical errors (the pawn parser accepts it without error & warning messages) may still have semantical and logical errors which the pawn parser cannot catch. The assert instruction (page 112) is meant to help you catch these \u201Crun-time\u201D errors."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"-in-closing",children:"\u2022 In closing"}),"\n",(0,i.jsx)(n.p,{children:"If you know the C programming language, you will have seen many concepts\nthat you are familiar with, and a few new ones. If you don\u2019t know C, the pace\nof this introduction has probably been quite high. Whether you are new to C"}),"\n",(0,i.jsx)(n.p,{children:"or experienced in C, I encourage you to read the following pages carefully. If\nyou know C or a C-like language, by the way, you may want to consult the\nchapter \u201CPitfalls\u201D (page 134) first."}),"\n",(0,i.jsx)(n.p,{children:"This booklet attempts to be both an informal introduction and a (more formal)\nlanguage specification at the same time, perhaps succeeding at neither. Since\nit is also the standard book on pawn,\u2217 the focus of this booklet is on\nbeing accurate and complete, rather than being easy to grasp."}),"\n",(0,i.jsxs)(n.p,{children:["The double nature of this booklet shows through in the order in",(0,i.jsx)(n.br,{}),"\n","which it presents the subjects. The larger conceptual parts of the language, variables\nand functions, are covered first. The operators, the statements and general\nsyntax rules follow later \u2014not that they are less important, but they are easier\nto learn, to look up, or to take for granted."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h6,{id:"-it-is-no-longer-the-only-book-on-pawn",children:"\u2217 It is no longer the only book on Pawn."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"/pt-BR/docs/scripting/language/reference/Contents",children:"Go Back to Contents"})})]})}function d(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},50065:function(e,n,t){t.d(n,{Z:()=>o,a:()=>r});var a=t(67294);let i={},s=a.createContext(i);function r(e){let n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);