"use strict";(self.webpackChunkomp_web=self.webpackChunkomp_web||[]).push([["28774"],{3937:function(e,a,n){n.r(a),n.d(a,{frontMatter:()=>i,toc:()=>l,default:()=>m,metadata:()=>r,assets:()=>t,contentTitle:()=>d});var r=JSON.parse('{"id":"tutorials/PluginDevelopmentGuide","title":"Guia de desenvolvimento de Plugins","description":"Um guia simples para desenvolvolver plugins ( Tradu\xe7\xe3o de um post do sampforum )","source":"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/tutorials/PluginDevelopmentGuide.md","sourceDirName":"tutorials","slug":"/tutorials/PluginDevelopmentGuide","permalink":"/pt-BR/docs/tutorials/PluginDevelopmentGuide","draft":false,"unlisted":false,"editUrl":"https://github.com/openmultiplayer/web/edit/master/frontend/docs/tutorials/PluginDevelopmentGuide.md","tags":[],"version":"current","frontMatter":{"title":"Guia de desenvolvimento de Plugins","sidebar_label":"Guia de desenvolvimento de Plugins","description":"Um guia simples para desenvolvolver plugins ( Tradu\xe7\xe3o de um post do sampforum )"},"sidebar":"docsSidebar","previous":{"title":"Pickup Guide","permalink":"/pt-BR/docs/tutorials/PickupGuide"},"next":{"title":"Port Forwarding","permalink":"/pt-BR/docs/tutorials/PortForwarding"}}'),o=n(85893),s=n(50065);let i={title:"Guia de desenvolvimento de Plugins",sidebar_label:"Guia de desenvolvimento de Plugins",description:"Um guia simples para desenvolvolver plugins ( Tradu\xe7\xe3o de um post do sampforum )"},d=void 0,t={},l=[{value:"Introdu\xe7\xe3o",id:"introdu\xe7\xe3o",level:2},{value:"Este <strong>N\xe3o</strong> \xe9 um forum de ajuda de C/++",id:"este-n\xe3o-\xe9-um-forum-de-ajuda-de-c",level:2},{value:"FAQ",id:"faq",level:2},{value:"Duvidas rapidas",id:"duvidas-rapidas",level:3},{value:"Introdu\xe7\xe3o",id:"introdu\xe7\xe3o-1",level:2},{value:"Arquivo de origem (*.cpp)",id:"arquivo-de-origem-cpp",level:3},{value:"Arquivo de defini\xe7\xe3o de m\xf3dulo (*.def)",id:"arquivo-de-defini\xe7\xe3o-de-m\xf3dulo-def",level:3},{value:"Examinando o c\xf3digo",id:"examinando-o-c\xf3digo",level:2},{value:"O arquivo de defini\xe7\xe3o de m\xf3dulo",id:"o-arquivo-de-defini\xe7\xe3o-de-m\xf3dulo",level:3},{value:"O que \xe9 &quot;<strong>EXPORTS</strong>&quot;",id:"o-que-\xe9-exports",level:4},{value:"Fun\xe7\xf5es exportadas",id:"fun\xe7\xf5es-exportadas",level:4},{value:"Defini\xe7\xf5es e estruturas",id:"defini\xe7\xf5es-e-estruturas",level:3},{value:"Fun\xe7\xf5es Amx",id:"fun\xe7\xf5es-amx",level:2},{value:"Legenda",id:"legenda",level:3},{value:"amx_Allot",id:"amx_allot",level:2},{value:"Sintaxe",id:"sintaxe",level:3},{value:"amx_ctof",id:"amx_ctof",level:2},{value:"Sintaxe",id:"sintaxe-1",level:3},{value:"amx_Exec",id:"amx_exec",level:2},{value:"Sintaxe",id:"sintaxe-2",level:3},{value:"amx_FindPublic",id:"amx_findpublic",level:2},{value:"Sintaxe",id:"sintaxe-3",level:3},{value:"amx_ftoc",id:"amx_ftoc",level:2},{value:"Sintaxe",id:"sintaxe-4",level:3},{value:"amx_GetAddr",id:"amx_getaddr",level:2},{value:"Sintaxe",id:"sintaxe-5",level:3},{value:"amx_GetString",id:"amx_getstring",level:2},{value:"Sintaxe",id:"sintaxe-6",level:3},{value:"amx_Push",id:"amx_push",level:2},{value:"Sintaxe",id:"sintaxe-7",level:3},{value:"amx_PushString",id:"amx_pushstring",level:2},{value:"Sintaxe",id:"sintaxe-8",level:3},{value:"amx_Register",id:"amx_register",level:2},{value:"Sintaxe",id:"sintaxe-9",level:3},{value:"amx_Release",id:"amx_release",level:2},{value:"Sintaxe",id:"sintaxe-10",level:3},{value:"amx_SetString",id:"amx_setstring",level:2},{value:"Sintaxe",id:"sintaxe-11",level:3},{value:"Exemplos de Fun\xe7\xf5es AMX",id:"exemplos-de-fun\xe7\xf5es-amx",level:2},{value:"Registrando Nativas",id:"registrando-nativas",level:3},{value:"Obtendo uma String e Seu Tamanho",id:"obtendo-uma-string-e-seu-tamanho",level:3},{value:"M\xe9todo Alternativo para Obter uma String",id:"m\xe9todo-alternativo-para-obter-uma-string",level:3},{value:"Como Definir uma String",id:"como-definir-uma-string",level:3},{value:"Passando par\xe2metros por refer\xeancia",id:"passando-par\xe2metros-por-refer\xeancia",level:3},{value:"Obtendo e modificando valores de array",id:"obtendo-e-modificando-valores-de-array",level:3},{value:"Chamando um callback",id:"chamando-um-callback",level:3},{value:"Chamando nativos e interceptando callbacks",id:"chamando-nativos-e-interceptando-callbacks",level:2},{value:"Invoke",id:"invoke",level:3},{value:"Come\xe7ando",id:"come\xe7ando",level:4},{value:"Adicionando nativos SA-MP",id:"adicionando-nativos-sa-mp",level:4},{value:"Chamando nativos",id:"chamando-nativos",level:4},{value:"Hooking de Callbacks",id:"hooking-de-callbacks",level:3},{value:"Fechamento",id:"fechamento",level:2},{value:"Include do Plugin",id:"include-do-plugin",level:3},{value:"C\xf3digo-fonte do plugin",id:"c\xf3digo-fonte-do-plugin",level:3},{value:"Agradecimentos Especiais",id:"agradecimentos-especiais",level:3},{value:"Special thanks",id:"special-thanks",level:2}];function c(e){let a={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.h2,{id:"introdu\xe7\xe3o",children:"Introdu\xe7\xe3o"}),"\n",(0,o.jsx)(a.p,{children:"Eu decidi criar esse topico para direcionar problemas e quest\xf5es frequentes em rela\xe7\xe3o ao desenvolvimento de Plugins.\nEu de longe sou um especialista de C/C++ ou sobre a SDK de plugins, apenas estou compartilhando o que aprendi nesse tempo desenvolvendo plugins."}),"\n",(0,o.jsx)(a.p,{children:"Tenho esperan\xe7a de que este topico pode se tornar um projeto em grupo quando vir a tona e outras pessoas poder\xe3o compartilhar informa\xe7\xf5es que eu possa n\xe3o saber agora."}),"\n",(0,o.jsxs)(a.blockquote,{children:["\n",(0,o.jsx)(a.p,{children:"Nota do tradutor: Eu conhecido como Louzindev na comunidade, estou tentando reviver este topico para refor\xe7ar o conhecimento na comunidade local."}),"\n"]}),"\n",(0,o.jsxs)(a.h2,{id:"este-n\xe3o-\xe9-um-forum-de-ajuda-de-c",children:["Este ",(0,o.jsx)(a.strong,{children:"N\xe3o"})," \xe9 um forum de ajuda de C/++"]}),"\n",(0,o.jsx)(a.p,{children:"Algumas pessoas parecem estar bem confusas quando v\xeaem este post."}),"\n",(0,o.jsx)(a.p,{children:'Eu vejo muitas pessoas perguntarem quest\xf5es completamente validas e terminarem com multiplas respostas como: "Este n\xe3o \xe9 um forum de ajuda para C/++". Apenas porque \xe9 esperado que alguem conhe\xe7a a linguagem, n\xe3o significa que eles n\xe3o podem fazer perguntas sobre a atual SDK. Existe uma grande diferen\xe7a entre perguntar o que um ponteiro \xe9, para algo como: "Como criar callbacks"'}),"\n",(0,o.jsx)(a.p,{children:"Dito isso, separei alguns sites \xf3timos para perguntas frequentes e tutorias al\xe9m da documenta\xe7\xe3o oficial do C/++."}),"\n",(0,o.jsx)(a.p,{children:"cprogramming.com"}),"\n",(0,o.jsx)(a.p,{children:"cplusplus.com"}),"\n",(0,o.jsx)(a.p,{children:"learncpp.com"}),"\n",(0,o.jsx)(a.p,{children:"Se voc\xea precisar de assistencia com C/++, voc\xea pode perguntar nesses foruns:"}),"\n",(0,o.jsx)(a.p,{children:"dreamincode.net"}),"\n",(0,o.jsx)(a.p,{children:"stackoverflow.com"}),"\n",(0,o.jsx)(a.h2,{id:"faq",children:"FAQ"}),"\n",(0,o.jsx)(a.h3,{id:"duvidas-rapidas",children:"Duvidas rapidas"}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Duvida:"})," Como os plugins s\xe3o feitos?"]}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"Resposta:"})," Plugins s\xe3o feitos usando a plugin SDK do AMX, este topico presume que voc\xea j\xe1 sabe C/++, e vai providenciar informa\xe7\xe3o sobre a SDK neste artigo."]}),"\n"]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Duvida:"})," Eu Posso criar um plugin em outra linguagem sem ser C/++?"]}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"Resposta:"})," \xc9 possivel na teoria. Existem varias tentativas de portar a Plugin SDK do SA-MP para a linguagem D, que suporta a interface de programa\xe7\xe3o C. Por enquanto, eu nunca vi nenhum plugin funcionando em linguagem D, mas \xe9 possivel na teoria."]}),"\n"]}),"\n",(0,o.jsxs)(a.blockquote,{children:["\n",(0,o.jsxs)(a.p,{children:["Nota do tradutor: \xe9 possivel 'bindar' a Plugin SDK para outras linguagens. Como no repositorio de exemplo: ",(0,o.jsx)(a.a,{href:"https://github.com/AmyrAhmady/samp-node",children:"https://github.com/AmyrAhmady/samp-node"})]}),"\n"]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Pergunta:"})," Como posso fazer meu plugin ser multiplataforma (dispon\xedvel no Linux e Windows)?"]}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"Resposta:"})," Linux e Windows s\xe3o dois sistemas operacionais diferentes, cada um com suas pr\xf3prias APIs e implementa\xe7\xf5es distintas. Fazer seu c\xf3digo funcionar em ambas as plataformas significa que voc\xea deve usar c\xf3digo independente de plataforma ou algum tipo de framework que lide com as diferen\xe7as de plataforma para voc\xea. Depois de garantir que seu c\xf3digo n\xe3o depende de uma API espec\xedfica, basta compil\xe1-lo no ambiente desejado (novamente, este guia assume que voc\xea sabe como fazer isso)."]}),"\n"]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Resposta:"})," Meu plugin pode usar memory hacking?"]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Resposta:"})," Para ser honesto, isso \xe9 uma \xe1rea meio cinzenta. Usar hacking de mem\xf3ria para fazer ",(0,o.jsx)(a.em,{children:"hook"})," em callbacks ou chamar fun\xe7\xf5es parece ser totalmente aceit\xe1vel. Qualquer coisa que modifique a mem\xf3ria do servidor parece ser proibida (veja isso). Se voc\xea planeja criar um plugin que precise usar hacking de mem\xf3ria para qualquer coisa al\xe9m de fazer ",(0,o.jsx)(a.em,{children:"hook"})," de callbacks ou chamadas de fun\xe7\xf5es, pe\xe7a permiss\xe3o antes e obtenha aprova\xe7\xe3o antes de postar; essa \xe9, honestamente, a melhor forma de descobrir!"]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Pergunta:"})," \xc9 poss\xedvel fazer um plugin que ",(0,o.jsx)(a.strong,{children:"______"}),"?"]}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"Resposta:"})," Na maioria dos casos, qualquer ideia \xe9 completamente poss\xedvel de implementar. Pode ser necess\xe1rio um aplicativo independente que se comunique com o plugin, mas provavelmente \xe9 vi\xe1vel. Perguntas como essa ",(0,o.jsx)(a.strong,{children:"n\xe3o"})," devem ser postadas. Voc\xea ouviu a resposta, ent\xe3o siga em frente! Esta n\xe3o \xe9 uma se\xe7\xe3o para pedidos de plugins. Espero que um dia haja criadores de plugins suficientes para uma se\xe7\xe3o ou um t\xf3pico fixo para solicita\xe7\xf5es (este guia foi criado para apresentar e ajudar novos desenvolvedores de plugins, ent\xe3o vamos torcer)."]}),"\n"]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Pergunta:"})," Qual IDE/Compilador devo usar para ",(0,o.jsx)(a.strong,{children:"______"}),"?"]}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"Resposta:"})," Isso \xe9 completamente com voc\xea! Eu pessoalmente usarei o VC++ 2010 Express como minha IDE e compilador para Windows, e planejo usar o g++ como meu compilador para Linux. Experimente diferentes op\xe7\xf5es e veja qual voc\xea gosta mais!"]}),"\n"]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Pergunta:"})," O que \xe9 um arquivo de defini\xe7\xe3o de m\xf3dulo (.def)?"]}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"Resposta:"})," Um arquivo de defini\xe7\xe3o de m\xf3dulo \xe9 um arquivo especial no IDE Visual Studio que fornece ao ",(0,o.jsx)(a.em,{children:"linker"}),' informa\xe7\xf5es sobre o programa que est\xe1 sendo vinculado. Quando se trata de escrever plugins para SA-MP, geralmente usamos apenas a declara\xe7\xe3o "EXPORTS", que fornece informa\xe7\xf5es sobre as fun\xe7\xf5es exportadas. Vamos abordar essa declara\xe7\xe3o mais adiante no artigo.']}),"\n"]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Pergunta:"})," Quando eu lan\xe7ar um plugin, ele precisa ter o c\xf3digo-fonte junto?"]}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"Resposta:"})," Se voc\xea est\xe1 lan\xe7ando algo neste f\xf3rum, ",(0,o.jsx)(a.strong,{children:"sempre"})," deve incluir o c\xf3digo-fonte. Plugins n\xe3o s\xe3o exce\xe7\xe3o (a menos que o plugin seja aprovado por um desenvolvedor para ser postado sem o c\xf3digo-fonte \u2014 talvez um anti-cheat?)."]}),"\n"]}),"\n",(0,o.jsx)(a.h2,{id:"introdu\xe7\xe3o-1",children:"Introdu\xe7\xe3o"}),"\n",(0,o.jsx)(a.p,{children:'Voc\xea ficaria surpreso com a frequ\xeancia que me perguntam: "Como eu come\xe7o com o desenvolvimento de plugins?". Decidi adicionar esta se\xe7\xe3o inteira para responder a essa pergunta! S\xf3 porque voc\xea conhece a linguagem n\xe3o significa que sabe lidar com a IDE, afinal de contas; acho que isso \xe9 especialmente verdadeiro para o VC++ 2010. O Visual Studio pode ser um lugar muito intimidador para novos usu\xe1rios. Acho que n\xe3o \xe9 justo simplesmente entregar o SDK do plugin sem antes orient\xe1-lo! Mexer com as p\xe1ginas de propriedades/o linker pode facilmente assustar as pessoas, ent\xe3o vou gui\xe1-lo por isso.'}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Nota:"})," Se voc\xea escolheu usar uma IDE/compilador diferente que tenha como alvo o Windows, voc\xea pode ter dificuldades! Parece que a \xfanica maneira de exportar fun\xe7\xf5es com sucesso \xe9 usar um arquivo de defini\xe7\xe3o de m\xf3dulo (.DEF). Tentei incluir um m\xe9todo alternativo neste artigo usando __declspec(dllexport), mas isso simplesmente n\xe3o funcionou devido \xe0 conven\xe7\xe3o de chamada __stdcall modificar os nomes das fun\xe7\xf5es exportadas (Veja: ",(0,o.jsx)(a.a,{href:"https://pastebin.com/y3xkVY70",children:"Aqui"}),")."]}),"\n",(0,o.jsx)(a.p,{children:"Aqui est\xe3o os downloads necess\xe1rios para esta se\xe7\xe3o:"}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Visual Studio Atualizado:"})," ",(0,o.jsx)(a.a,{href:"https://visualstudio.microsoft.com/pt-br/downloads/",children:"Download"})]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Visual C++ 2010 Express:"})," ",(0,o.jsx)(a.a,{href:"https://visualstudio.microsoft.com/vs/express/",children:"Download gr\xe1tis"})]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Plugin SDK (Vers\xe3o Simples):"})," ",(0,o.jsx)(a.a,{href:"https://github.com/Zeex/samp-plugin-sdk",children:"Download"})]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"SDK Atualizado:"})," ",(0,o.jsx)(a.a,{href:"https://github.com/maddinat0r/samp-plugin-sdk",children:"Download"})]}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:["A primeira coisa que queremos fazer \xe9 criar um novo projeto. Selecione ",(0,o.jsx)(a.em,{children:"File -> New -> Project"})," para fazer isso."]}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:["Depois de criar um novo projeto, ser\xe1 solicitado o tipo de projeto que voc\xea est\xe1 criando. Selecione ",(0,o.jsx)(a.em,{children:"Win32 Project"}),", insira um nome para o projeto e pressione ",(0,o.jsx)(a.em,{children:"OK"})," para continuar."]}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:["Depois de definir as configura\xe7\xf5es do seu projeto, este di\xe1logo deve aparecer. Pressione ",(0,o.jsx)(a.em,{children:"Next"})," para continuar."]}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:["Ap\xf3s clicar em continuar, deve aparecer uma caixa de di\xe1logo solicitando o tipo e as configura\xe7\xf5es da aplica\xe7\xe3o. Para o tipo, selecione ",(0,o.jsx)(a.em,{children:"DLL (Dynamic-link library)"})," e para as configura\xe7\xf5es, selecione ",(0,o.jsx)(a.em,{children:"Empty project"}),". Depois disso, pressione o bot\xe3o ",(0,o.jsx)(a.em,{children:"Finish"})," na parte inferior."]}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:["O pr\xf3ximo passo \xe9 ir ao ",(0,o.jsx)(a.em,{children:"Solution Explorer"}),". O ",(0,o.jsx)(a.em,{children:"Solution Explorer"})," normalmente est\xe1 no lado esquerdo da IDE. Se voc\xea o desativou acidentalmente, pode ativ\xe1-lo novamente pressionando ",(0,o.jsx)(a.em,{children:"CTRL+ALT+L"})," ou selecionando ",(0,o.jsx)(a.em,{children:"View -> Other Windows -> Solution Explorer"}),". No ",(0,o.jsx)(a.em,{children:"Solution Explorer"}),', clique com o bot\xe3o direito no nome do projeto (neste exemplo, \xe9 "Test") e selecione ',(0,o.jsx)(a.em,{children:"Properties"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:["Na janela de propriedades, navegue at\xe9 ",(0,o.jsx)(a.em,{children:"Configuration Properties -> Linker -> Input"}),' no lado esquerdo. Quando estiver l\xe1, adicione um arquivo de defini\xe7\xe3o de m\xf3dulo. Voc\xea pode nomear esse arquivo como preferir, desde que tenha a extens\xe3o ".def" no final; normalmente os arquivos ',(0,o.jsx)(a.em,{children:".def"})," s\xe3o nomeados como o projeto. Depois de nomear seu arquivo de defini\xe7\xe3o, pressione ",(0,o.jsx)(a.em,{children:"OK"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:["Agora, s\xf3 precisamos adicionar nossos arquivos (incluindo o arquivo de defini\xe7\xe3o!). Para adicionar um arquivo ao projeto, v\xe1 ao ",(0,o.jsx)(a.em,{children:"Solution Explorer"})," novamente, clique com o bot\xe3o direito no nome do projeto, clique em ",(0,o.jsx)(a.em,{children:"Add"})," e selecione ",(0,o.jsx)(a.em,{children:"New Item"}),'. Neste exemplo, vamos adicionar nosso arquivo de defini\xe7\xe3o. Como n\xe3o h\xe1 uma op\xe7\xe3o espec\xedfica para arquivos de defini\xe7\xe3o, escolha um arquivo-fonte (.cpp) e digite o nome do arquivo de defini\xe7\xe3o do m\xf3dulo que voc\xea escolheu (Nota: certifique-se de incluir a extens\xe3o ".def", caso contr\xe1rio uma extens\xe3o ".cpp" ser\xe1 adicionada!). Depois disso, adicione um arquivo de origem para o projeto da mesma forma (exceto sem adicionar uma extens\xe3o). A maioria das pessoas usa o nome "Main" para seu arquivo principal de origem.']}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:["Antes de come\xe7ar a adicionar qualquer coisa aos nossos dois arquivos atualmente vazios, precisamos realmente adicionar o SDK ao projeto. Se ainda n\xe3o fez isso, baixe o SDK no link fornecido no in\xedcio desta se\xe7\xe3o. Depois de baix\xe1-lo, extraia a pasta do SDK para o diret\xf3rio do projeto atual. Nota: esta parte \xe9 opcional: pessoalmente, gosto de criar filtros para organizar todos os nossos arquivos e c\xf3digos. Um filtro \xe9 uma ferramenta organizacional no Visual Studio que cria pastas no projeto, mas n\xe3o cria pastas correspondentes no Windows (recomenda-se criar pastas correspondentes no Windows). Para criar um filtro, clique com o bot\xe3o direito no projeto no ",(0,o.jsx)(a.em,{children:"Solution Explorer"})," -> ",(0,o.jsx)(a.em,{children:"Add"})," -> ",(0,o.jsx)(a.em,{children:"New Filter"})," e selecione um nome para o filtro (neste caso, nomeie-o como SDK)."]}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:["O pr\xf3ximo passo \xe9 adicionar todos os arquivos do SDK ao projeto atual. Para adicionar arquivos existentes ao projeto, clique com o bot\xe3o direito na pasta ou no projeto onde deseja adicion\xe1-los e selecione ",(0,o.jsx)(a.em,{children:"Add -> Existing Item"}),". Voc\xea vai querer adicionar tudo o que est\xe1 dentro da pasta do SDK no diret\xf3rio do projeto (Nota: voc\xea pode selecionar v\xe1rios arquivos segurando Ctrl enquanto clica nos arquivos para adicionar). Para manter a consist\xeancia das pastas, criaremos outro filtro dentro do filtro SDK e nome\xe1-lo-emos como ",(0,o.jsx)(a.em,{children:"amx"}),". Claro, voc\xea vai querer adicionar todo o conte\xfado da pasta SDK\\amx\\ dentro do filtro amx."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(a.p,{children:"Agora \xe9 hora de compilar o plugin! Se voc\xea seguiu as instru\xe7\xf5es corretamente, deve ter um arquivo de defini\xe7\xe3o de m\xf3dulo e um arquivo de origem abertos; se n\xe3o, volte alguns passos e siga as instru\xe7\xf5es com aten\xe7\xe3o. Agora, copie e cole as informa\xe7\xf5es a seguir em seus respectivos arquivos. N\xe3o se preocupe se n\xe3o entender tudo, abordaremos isso na pr\xf3xima se\xe7\xe3o."}),"\n",(0,o.jsx)(a.h3,{id:"arquivo-de-origem-cpp",children:"Arquivo de origem (*.cpp)"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:'#include "SDK\\amx\\amx.h"\n#include "SDK\\plugincommon.h"\n\n\ntypedef void (*logprintf_t)(const char* format, ...);\nlogprintf_t logprintf;\nextern void *pAMXFunctions;\n\n\ncell AMX_NATIVE_CALL HelloWorld(AMX* amx, cell* params)\n{\n    logprintf("This was printed from the Test plugin! Yay!");\n    return 1;\n}\n\nPLUGIN_EXPORT unsigned int PLUGIN_CALL Supports()\n{\n    return SUPPORTS_VERSION | SUPPORTS_AMX_NATIVES;\n}\n\nPLUGIN_EXPORT bool PLUGIN_CALL Load(void **ppData)\n{\n    pAMXFunctions = ppData[PLUGIN_DATA_AMX_EXPORTS];\n    logprintf = (logprintf_t) ppData[PLUGIN_DATA_LOGPRINTF];\n\n    logprintf(" * Test plugin was loaded.");\n    return true;\n}\n\nPLUGIN_EXPORT void PLUGIN_CALL Unload()\n{\n    logprintf(" * Test plugin was unloaded.");\n}\n\nAMX_NATIVE_INFO PluginNatives[] =\n{\n    {"HelloWorld", HelloWorld},\n    {0, 0}\n};\n\nPLUGIN_EXPORT int PLUGIN_CALL AmxLoad( AMX *amx )\n{\n    return amx_Register(amx, PluginNatives, -1);\n}\n\n\nPLUGIN_EXPORT int PLUGIN_CALL AmxUnload( AMX *amx )\n{\n    return AMX_ERR_NONE;\n}\n'})}),"\n",(0,o.jsx)(a.h3,{id:"arquivo-de-defini\xe7\xe3o-de-m\xf3dulo-def",children:"Arquivo de defini\xe7\xe3o de m\xf3dulo (*.def)"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"EXPORTS\n      Supports\n      Load\n      Unload\n      AmxLoad\n      AmxUnload\n"})}),"\n",(0,o.jsx)(a.h2,{id:"examinando-o-c\xf3digo",children:"Examinando o c\xf3digo"}),"\n",(0,o.jsxs)(a.p,{children:["Nesta se\xe7\xe3o, vamos dar uma olhada em algumas das defini\xe7\xf5es, estruturas e fun\xe7\xf5es que o SDK de plugins do SA-MP oferece. Voc\xea deve ter uma compreens\xe3o confort\xe1vel de C/C++ antes de prosseguir, pois a partir daqui ",(0,o.jsx)(a.strong,{children:"s\xf3"})," explicarei informa\xe7\xf5es relacionadas ao SDK nos segmentos de c\xf3digo. A partir deste ponto, n\xe3o haver\xe1 mais \u201Cm\xe3o na massa\u201D!"]}),"\n",(0,o.jsx)(a.h3,{id:"o-arquivo-de-defini\xe7\xe3o-de-m\xf3dulo",children:"O arquivo de defini\xe7\xe3o de m\xf3dulo"}),"\n",(0,o.jsx)(a.p,{children:"Antes de analisarmos o c\xf3digo, vamos verificar o arquivo de defini\xe7\xe3o de m\xf3dulo que criamos na se\xe7\xe3o anterior. Mas, antes de tudo, o que exatamente \xe9 um arquivo de defini\xe7\xe3o de m\xf3dulo? Sabemos que \xe9 um recurso exclusivo do Visual Studio, mas o que ele realmente faz? \xc9 simples! Um arquivo de defini\xe7\xe3o de m\xf3dulo fornece informa\xe7\xf5es para o linker sobre o c\xf3digo que est\xe1 sendo vinculado. Existem muitas regras e declara\xe7\xf5es que podem ser usadas nesses arquivos, mas vamos falar apenas de uma: a declara\xe7\xe3o EXPORTS."}),"\n",(0,o.jsxs)(a.h4,{id:"o-que-\xe9-exports",children:['O que \xe9 "',(0,o.jsx)(a.strong,{children:"EXPORTS"}),'"']}),"\n",(0,o.jsx)(a.p,{children:"Exports \xe9 uma declara\xe7\xe3o que nos permite\u2026 bem, exportar itens para a nossa aplica\xe7\xe3o! Por que fazemos isso? Porque \xe9 necess\xe1rio, t\xe3o simples quanto isso. As fun\xe7\xf5es que exportamos s\xe3o pontos de entrada em nosso arquivo DLL. Aplicativos podem acessar apenas as fun\xe7\xf5es em nossa DLL que exportamos; se n\xe3o as exportarmos, elas permanecem privadas no arquivo DLL. E n\xe3o queremos isso, certo? Ent\xe3o, exportamos tudo o que a aplica\xe7\xe3o ir\xe1 acessar diretamente."}),"\n",(0,o.jsx)(a.h4,{id:"fun\xe7\xf5es-exportadas",children:"Fun\xe7\xf5es exportadas"}),"\n",(0,o.jsxs)(a.p,{children:["Atualmente, h\xe1 6 fun\xe7\xf5es que precisam ser exportadas. Usamos 5 delas no projeto que estamos configurando. N\xe3o se preocupe com as defini\xe7\xf5es ",(0,o.jsx)(a.code,{children:"PLUGIN_EXPORT"})," e ",(0,o.jsx)(a.code,{children:"PLUGIN_CALL"})," que voc\xea v\xea nas declara\xe7\xf5es de fun\xe7\xf5es. Vamos abord\xe1-las juntamente com outras defini\xe7\xf5es importantes (marcadas em verde) mais adiante no artigo."]}),"\n",(0,o.jsxs)(a.table,{children:[(0,o.jsx)(a.thead,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.th,{children:"Fun\xe7\xf5es"}),(0,o.jsx)(a.th,{children:"Descri\xe7\xe3o"})]})}),(0,o.jsxs)(a.tbody,{children:[(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"Supports()"})}),(0,o.jsxs)(a.td,{children:["Esta fun\xe7\xe3o informa ao servidor quais recursos nosso plugin ter\xe1 com base no valor retornado. Geralmente, usamos apenas 3 flags de suporte em plugins: ",(0,o.jsx)(a.strong,{children:"SUPPORTS_VERSION"}),", ",(0,o.jsx)(a.strong,{children:"SUPPORTS_AMX_NATIVES"})," e ",(0,o.jsx)(a.strong,{children:"SUPPORTS_PROCESS_TICK"}),"."]})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"Load(void**)"})}),(0,o.jsxs)(a.td,{children:["A fun\xe7\xe3o Load \xe9 bem simples. Ela \xe9 chamada quando o plugin \xe9 carregado e recebe um array de endere\xe7os que o plugin usar\xe1 para funcionar. Os dois \xedndices que normalmente usamos s\xe3o ",(0,o.jsx)(a.strong,{children:"PLUGIN_DATA_AMX_EXPORTS"})," e ",(0,o.jsx)(a.strong,{children:"PLUGIN_DATA_LOGPRINTF"}),"."]})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"Unload()"})}),(0,o.jsx)(a.td,{children:"Unload \xe9 chamada quando o plugin \xe9 descarregado (quando o servidor \xe9 encerrado)."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"AmxLoad(AMX*)"})}),(0,o.jsx)(a.td,{children:"Esta fun\xe7\xe3o \xe9 chamada sempre que uma nova inst\xe2ncia AMX \xe9 carregada no servidor. Isso acontece para cada filterscript/modo de jogo! Por isso, n\xe3o \xe9 uma boa ideia armazenar uma \xfanica inst\xe2ncia AMX para todo o plugin; em vez disso, use uma fila/lista/vetor. Nesta fun\xe7\xe3o, tamb\xe9m registramos as fun\xe7\xf5es nativas que queremos disponibilizar para o PAWN."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"AmxUnload(AMX*)"})}),(0,o.jsx)(a.td,{children:"Esta fun\xe7\xe3o \xe9 chamada sempre que uma inst\xe2ncia AMX \xe9 descarregada. Se voc\xea armazena inst\xe2ncias AMX, certifique-se de remov\xea-las. Caso contr\xe1rio, ter\xe1 inst\xe2ncias para modos de jogo/filterscripts inexistentes."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"ProcessTick()"})}),(0,o.jsxs)(a.td,{children:["ProcessTick \xe9 uma fun\xe7\xe3o chamada a cada itera\xe7\xe3o do loop do servidor. As pessoas geralmente a usam para controlar o tempo, monitorando a quantidade de ticks que passaram. Dizem que o servidor SA-MP possui um tempo de espera de 5ms, ent\xe3o se passarem 50 ticks, voc\xea ter\xe1 uma ideia do tempo decorrido (5 * 50 = 250ms). ",(0,o.jsx)(a.strong,{children:"Nota:"})," Quem usa threads em seus plugins e precisa interagir com o PAWN deve usar esta fun\xe7\xe3o para garantir que o PAWN n\xe3o est\xe1 ocupado com outra tarefa!"]})]})]})]}),"\n",(0,o.jsx)(a.h3,{id:"defini\xe7\xf5es-e-estruturas",children:"Defini\xe7\xf5es e estruturas"}),"\n",(0,o.jsx)(a.p,{children:"Agora vem a parte divertida, onde analisamos o c\xf3digo! Voc\xea provavelmente notar\xe1 desde o in\xedcio que estamos usando uma s\xe9rie de defini\xe7\xf5es e estruturas em nosso pequeno exemplo da se\xe7\xe3o anterior. Se voc\xea nunca desenvolveu um plugin SA-MP antes, isso pode parecer muito confuso e at\xe9 intimidante. Vamos esclarecer essas defini\xe7\xf5es e estruturas nesta se\xe7\xe3o."}),"\n",(0,o.jsxs)(a.table,{children:[(0,o.jsx)(a.thead,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.th,{children:"Defini\xe7\xf5es/Estruturas"}),(0,o.jsx)(a.th,{children:"Descri\xe7\xe3o"})]})}),(0,o.jsxs)(a.tbody,{children:[(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"cell"})}),(0,o.jsxs)(a.td,{children:['Um "cell" \xe9 um typedef utilizado para portabilidade. O PAWN oferece suporte para inteiros de 16, 32 e 64 bits. O typedef "cell" sempre ter\xe1 o tamanho correto, enquanto "int" pode n\xe3o ter. Geralmente, com plugins SA-MP, este typedef ser\xe1 sempre um inteiro de 32 bits. ',(0,o.jsx)(a.strong,{children:"Nota:"}),' Existe tamb\xe9m um typedef "ucell" para inteiros sem sinal, mas ele \xe9 pouco usado.']})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"AMX_NATIVE_CALL"})}),(0,o.jsx)(a.td,{children:"Define a conven\xe7\xe3o de chamada que nossas fun\xe7\xf5es nativas ir\xe3o usar. Atualmente, est\xe1 definida como nada, ent\xe3o o padr\xe3o ser\xe1 utilizado."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"AMX"})}),(0,o.jsx)(a.td,{children:"O nome desta estrutura \xe9 autoexplicativo, \xe9 uma inst\xe2ncia AMX. Esta estrutura cont\xe9m diversas informa\xe7\xf5es relacionadas aos segmentos de dados, juntamente com outras informa\xe7\xf5es relevantes do amx. Esta estrutura deve estar presente em todas as declara\xe7\xf5es de fun\xe7\xf5es nativas, juntamente com um ponteiro cell para os par\xe2metros passados; sem essas informa\xe7\xf5es, n\xe3o sabemos qual script est\xe1 chamando nossa fun\xe7\xe3o nativa, nem o que foi passado."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"PLUGIN_EXPORT"})}),(0,o.jsx)(a.td,{children:'Este \xe9 definido como "PLUGIN_EXTERN_C".'})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"PLUGIN_EXTERN_C"})}),(0,o.jsx)(a.td,{children:'Se estiver usando um compilador C++, isto \xe9 definido como "extern "C"". Isso garante compatibilidade com C. O C++ oferece recursos como sobrecarga de fun\xe7\xf5es, ent\xe3o informa\xe7\xf5es adicionais como o n\xfamero/tamanho dos argumentos s\xe3o armazenadas no nome da fun\xe7\xe3o, o que \xe9 chamado de "name mangling". Este define informa ao C++ para usar a liga\xe7\xe3o no estilo C, evitando o name mangling do C++.'})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"PLUGIN_CALL"})}),(0,o.jsx)(a.td,{children:"Esta defini\xe7\xe3o informa ao C/C++ qual conven\xe7\xe3o de chamada usar para nossas fun\xe7\xf5es exportadas. Se voc\xea usa um compilador para Windows, isto \xe9 definido como __stdcall. Caso contr\xe1rio, \xe9 definido como nada, e a conven\xe7\xe3o padr\xe3o \xe9 usada."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"SUPPORTS_VERSION"})}),(0,o.jsx)(a.td,{children:'Esta defini\xe7\xe3o deve ser usada em uma m\xe1scara de bits que \xe9 retornada pela fun\xe7\xe3o "Supports()". Este flag \xe9 usado para verificar a compatibilidade com o servidor.'})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"SUPPORTS_AMX_NATIVES"})}),(0,o.jsx)(a.td,{children:'Esta \xe9 outra defini\xe7\xe3o que deve ser usada pela fun\xe7\xe3o "Supports()". Qualquer plugin que use fun\xe7\xf5es AMX deve usar este flag! Sem ele, voc\xea ter\xe1 um erro de execu\xe7\xe3o 19 devido \xe0s suas nativas n\xe3o se registrarem com o servidor (amx_Register).'})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"SUPPORTS_PROCESS_TICK"})}),(0,o.jsx)(a.td,{children:'Nosso \xfaltimo flag para a fun\xe7\xe3o "Supports()". Se voc\xea for usar a fun\xe7\xe3o "ProcessTick()", \xe9 preciso adicion\xe1-lo \xe0 m\xe1scara de bits retornada pela fun\xe7\xe3o "Supports()".'})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"PLUGIN_DATA_AMX_EXPORTS"})}),(0,o.jsx)(a.td,{children:"Este \xe9 usado como um \xedndice para o array multidimensional que \xe9 passado no Load. Este \xedndice espec\xedfico cont\xe9m a tabela de fun\xe7\xf5es AMX. Todos os plugins devem usar este \xedndice para atribuir o endere\xe7o da tabela de fun\xe7\xf5es a pAMXFunctions."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"PLUGIN_DATA_LOGPRINTF"})}),(0,o.jsx)(a.td,{children:"Outro \xedndice a ser usado com o array multidimensional passado no Load. Este \xedndice cont\xe9m o endere\xe7o da fun\xe7\xe3o logprintf, que imprime informa\xe7\xf5es e as salva no arquivo de log do servidor. Se o seu plugin usar essa fun\xe7\xe3o, voc\xea deve usar esse \xedndice para atribuir o endere\xe7o ao ponteiro de fun\xe7\xe3o logprintf."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"AMX_NATIVE_INFO"})}),(0,o.jsx)(a.td,{children:"Esta struct \xe9 usada junto com amx_Register. Cont\xe9m uma string com o nome da nova fun\xe7\xe3o nativa e um ponteiro para seu endere\xe7o."})]})]})]}),"\n",(0,o.jsxs)(a.p,{children:["Existem algumas outras defini\xe7\xf5es importantes que est\xe3o relacionadas a erros de fun\xe7\xf5es AMX, mas elas j\xe1 est\xe3o documentadas no cabe\xe7alho amx. Portanto, em vez de reinventar a roda, vou apenas postar o enum com todos os c\xf3digos de erro e seus coment\xe1rios correspondentes. ",(0,o.jsx)(a.strong,{children:"Nota:"})," Todas as fun\xe7\xf5es amx, com exce\xe7\xe3o de amx_NativeInfo, retornam um desses c\xf3digos de erro se um problema for encontrado."]}),"\n",(0,o.jsx)(a.h2,{id:"fun\xe7\xf5es-amx",children:"Fun\xe7\xf5es Amx"}),"\n",(0,o.jsxs)(a.p,{children:["As fun\xe7\xf5es ",(0,o.jsx)(a.code,{children:"amx"})," est\xe3o muito bem documentadas no guia do implementador PAWN, que pode ser encontrado aqui. Em vez de reinventar a roda e explicar todas as fun\xe7\xf5es com minhas pr\xf3prias palavras, vou simplesmente copi\xe1-las do guia do implementador e torn\xe1-las um pouco mais apresent\xe1veis; acredito que isso tornar\xe1 o conte\xfado muito mais acess\xedvel. Com isso dito, esta se\xe7\xe3o ser\xe1 principalmente uma refer\xeancia para a pr\xf3xima se\xe7\xe3o, que foca em algo que o guia do implementador n\xe3o abrange: exemplos de c\xf3digo. Nota: vou cobrir apenas as fun\xe7\xf5es que considero vitais para plugins (por enquanto). Qualquer outra informa\xe7\xe3o pode ser encontrada no guia do implementador; basta garantir que voc\xea use a vers\xe3o que eu referenciei nesta se\xe7\xe3o!"]}),"\n",(0,o.jsx)(a.h3,{id:"legenda",children:"Legenda"}),"\n",(0,o.jsx)(a.p,{children:"+ => N\xe3o dispon\xedvel"}),"\n",(0,o.jsx)(a.h2,{id:"amx_allot",children:"amx_Allot"}),"\n",(0,o.jsx)(a.p,{children:"- Reserva espa\xe7o no heap da m\xe1quina abstrata"}),"\n",(0,o.jsx)(a.h3,{id:"sintaxe",children:"Sintaxe"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"int amx_Allot(AMX *amx, int cells, cell *amx_addr, cell **phys_addr);\n"})}),"\n",(0,o.jsxs)(a.table,{children:[(0,o.jsx)(a.thead,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.th,{children:"Par\xe2metro"}),(0,o.jsx)(a.th,{children:"Descri\xe7\xe3o"})]})}),(0,o.jsxs)(a.tbody,{children:[(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"amx"})}),(0,o.jsx)(a.td,{children:"A m\xe1quina abstrata."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"cells"})}),(0,o.jsx)(a.td,{children:"O n\xfamero de c\xe9lulas a serem reservadas."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"amx_addr"})}),(0,o.jsxs)(a.td,{children:["O endere\xe7o da c\xe9lula alocada para que o programa pawn (que executa na m\xe1quina abstrata) possa acess\xe1-lo. ",(0,o.jsx)(a.code,{children:"phys_addr"})," \xe9 o endere\xe7o da c\xe9lula para acesso em C/C++."]})]})]})]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Notas:"})," Em vers\xf5es anteriores do PAWN, matrizes e strings tinham que ser passadas para um script ap\xf3s a aloca\xe7\xe3o expl\xedcita de mem\xf3ria na pilha ",(0,o.jsx)(a.code,{children:"amx"}),". Na vers\xe3o atual, essa funcionalidade foi amplamente substitu\xedda pelas fun\xe7\xf5es ",(0,o.jsx)(a.code,{children:"amx_PushArray"})," e ",(0,o.jsx)(a.code,{children:"amx_PushString"}),'. Uma fun\xe7\xe3o PAWN pode acessar a mem\xf3ria apenas dentro de sua m\xe1quina abstrata. Se um par\xe2metro deve ser passado "por refer\xeancia" para uma fun\xe7\xe3o PAWN, \xe9 necess\xe1rio passar o endere\xe7o desse par\xe2metro para ',(0,o.jsx)(a.code,{children:"amx_Exec"}),". Al\xe9m disso, o pr\xf3prio endere\xe7o deve estar dentro do intervalo de endere\xe7os da m\xe1quina abstrata. A ",(0,o.jsx)(a.code,{children:"amx_Allot"})," aloca c\xe9lulas de mem\xf3ria na m\xe1quina abstrata e retorna dois endere\xe7os: ",(0,o.jsx)(a.code,{children:"amx_addr"})," \xe9 o endere\xe7o da vari\xe1vel relativo \xe0 \u201Cse\xe7\xe3o de dados\u201D da m\xe1quina abstrata; este \xe9 o valor que voc\xea deve passar para ",(0,o.jsx)(a.code,{children:"amx_Exec"})," (via ",(0,o.jsx)(a.code,{children:"amx_Push"}),"). O par\xe2metro ",(0,o.jsx)(a.code,{children:"phys_addr"})," mant\xe9m o endere\xe7o relativo ao espa\xe7o de endere\xe7o do programa anfitri\xe3o, permitindo que um programa C/C++ use esse endere\xe7o e escreva na mem\xf3ria alocada. Ap\xf3s ",(0,o.jsx)(a.code,{children:"amx_Exec"})," retornar, voc\xea pode inspecionar o bloco de mem\xf3ria (a fun\xe7\xe3o PAWN chamada por ",(0,o.jsx)(a.code,{children:"amx_Exec"})," pode ter escrito nele) e finalmente liber\xe1-lo chamando ",(0,o.jsx)(a.code,{children:"amx_Release"}),"."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Veja tamb\xe9m:"})," ",(0,o.jsx)(a.a,{href:"#amx_exec",children:"amx_Exec"}),", ",(0,o.jsx)(a.a,{href:"#amx_pusharray",children:"amx_PushArray"}),", ",(0,o.jsx)(a.a,{href:"#amx_pushstring",children:"amx_PushString"}),", ",(0,o.jsx)(a.a,{href:"#amx_release",children:"amx_Release"})]}),"\n",(0,o.jsx)(a.h2,{id:"amx_ctof",children:"amx_ctof"}),"\n",(0,o.jsx)(a.p,{children:"- Converte \u201Ccell\u201D para \u201Cfloat\u201D"}),"\n",(0,o.jsx)(a.h3,{id:"sintaxe-1",children:"Sintaxe"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"[float] amx_ctof([cell] c);\n"})}),"\n",(0,o.jsxs)(a.table,{children:[(0,o.jsx)(a.thead,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.th,{children:"Par\xe2metro"}),(0,o.jsx)(a.th,{children:"Descri\xe7\xe3o"})]})}),(0,o.jsx)(a.tbody,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"c"})}),(0,o.jsx)(a.td,{children:"Valor a ser convertido do tipo \u201Ccell\u201D para \u201Cfloat\u201D."})]})})]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Retorna:"})," O mesmo padr\xe3o de bits, agora como um tipo de ponto flutuante."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Notas:"})," Esta macro converte um tipo \u201Ccell\u201D para um tipo \u201Cfloat\u201D sem alterar o padr\xe3o de bits. Um cast normal em C/C++ altera a representa\xe7\xe3o de mem\xf3ria da express\xe3o para que seu valor num\xe9rico em formato IEEE 754 seja o mais pr\xf3ximo poss\xedvel do valor inteiro original. O parser e a m\xe1quina abstrata PAWN armazenam valores de ponto flutuante em uma c\xe9lula \u2014 ao recuperar um valor de ponto flutuante de uma c\xe9lula, o padr\xe3o de bits n\xe3o deve ser alterado."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Veja tamb\xe9m:"})," ",(0,o.jsx)(a.a,{href:"#amx_ftoc",children:"amx_ftoc"})]}),"\n",(0,o.jsx)(a.h2,{id:"amx_exec",children:"amx_Exec"}),"\n",(0,o.jsx)(a.p,{children:"- Executa o c\xf3digo"}),"\n",(0,o.jsx)(a.h3,{id:"sintaxe-2",children:"Sintaxe"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"  int amx_Exec(AMX *amx, long *retval, int index);\n"})}),"\n",(0,o.jsxs)(a.table,{children:[(0,o.jsx)(a.thead,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.th,{children:"Par\xe2metro"}),(0,o.jsx)(a.th,{children:"Descri\xe7\xe3o"})]})}),(0,o.jsxs)(a.tbody,{children:[(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"amx"})}),(0,o.jsx)(a.td,{children:"A m\xe1quina abstrata na qual chamar uma fun\xe7\xe3o."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"retval"})}),(0,o.jsxs)(a.td,{children:["Armazena o valor de retorno da fun\xe7\xe3o chamada ao retornar. Este par\xe2metro pode ser ",(0,o.jsx)(a.code,{children:"NULL"})," se voc\xea n\xe3o estiver interessado no valor de retorno."]})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"index"})}),(0,o.jsxs)(a.td,{children:["\xcdndice na \u201Ctabela de fun\xe7\xf5es p\xfablicas\u201D que indica a fun\xe7\xe3o a ser executada. Use ",(0,o.jsx)(a.code,{children:"AMX_EXEC_MAIN"})," para iniciar a execu\xe7\xe3o da fun\xe7\xe3o principal e ",(0,o.jsx)(a.code,{children:"AMX_EXEC_CONT"})," para continuar a partir de um \u201Cestado de espera\u201D."]})]})]})]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Notas:"})," Esta fun\xe7\xe3o executa o script, come\xe7ando na fun\xe7\xe3o indicada. Ela chama a fun\xe7\xe3o de retorno de chamada para qualquer chamada de fun\xe7\xe3o nativa que o c\xf3digo em ",(0,o.jsx)(a.code,{children:"amx"})," faz. ",(0,o.jsx)(a.code,{children:"amx_Exec"})," assume que todas as fun\xe7\xf5es nativas foram corretamente inicializadas com ",(0,o.jsx)(a.code,{children:"amx_Register"}),"."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Veja tamb\xe9m:"})," ",(0,o.jsx)(a.a,{href:"#amx_findpublic",children:"amx_FindPublic"}),", ",(0,o.jsx)(a.a,{href:"#amx_register",children:"amx_Register"})]}),"\n",(0,o.jsx)(a.h2,{id:"amx_findpublic",children:"amx_FindPublic"}),"\n",(0,o.jsx)(a.p,{children:"- Retorna o \xedndice de uma fun\xe7\xe3o p\xfablica"}),"\n",(0,o.jsx)(a.h3,{id:"sintaxe-3",children:"Sintaxe"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"int amx_FindPublic(AMX *amx, char *funcname, int *index);\n"})}),"\n",(0,o.jsxs)(a.table,{children:[(0,o.jsx)(a.thead,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.th,{children:"Par\xe2metro"}),(0,o.jsx)(a.th,{children:"Descri\xe7\xe3o"})]})}),(0,o.jsxs)(a.tbody,{children:[(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"amx"})}),(0,o.jsx)(a.td,{children:"A m\xe1quina abstrata."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"funcname"})}),(0,o.jsx)(a.td,{children:"O nome da fun\xe7\xe3o p\xfablica a ser encontrada."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"index"})}),(0,o.jsx)(a.td,{children:"Ao retornar, esse par\xe2metro mant\xe9m o \xedndice da fun\xe7\xe3o p\xfablica solicitada."})]})]})]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Veja tamb\xe9m:"})," ",(0,o.jsx)(a.a,{href:"#amx_exec",children:"amx_Exec"}),", amx_FindNative+, amx_FindPubVar+, amx_GetPublic+, amx_NumPublics+"]}),"\n",(0,o.jsx)(a.h2,{id:"amx_ftoc",children:"amx_ftoc"}),"\n",(0,o.jsx)(a.p,{children:"- Converte \u201Cfloat\u201D para \u201Ccell\u201D"}),"\n",(0,o.jsx)(a.h3,{id:"sintaxe-4",children:"Sintaxe"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"[cell] amx_ftoc([float] f);\n"})}),"\n",(0,o.jsxs)(a.table,{children:[(0,o.jsx)(a.thead,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.th,{children:"Par\xe2metro"}),(0,o.jsx)(a.th,{children:"Descri\xe7\xe3o"})]})}),(0,o.jsx)(a.tbody,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"f"})}),(0,o.jsx)(a.td,{children:"O valor a ser convertido do tipo \u201Cfloat\u201D para \u201Ccell\u201D."})]})})]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Retorna:"})," O mesmo padr\xe3o de bits, agora como um tipo \u201Ccell\u201D."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Notas:"})," Esta macro converte um tipo \u201Cfloat\u201D para um tipo \u201Ccell\u201D sem alterar o padr\xe3o de bits. Um cast normal em C/C++ altera a representa\xe7\xe3o de mem\xf3ria da express\xe3o para que seu valor num\xe9rico em formato inteiro seja o valor truncado do valor racional original. O parser e a m\xe1quina abstrata PAWN armazenam valores de ponto flutuante em uma c\xe9lula \u2014 ao armazenar um valor de ponto flutuante em uma c\xe9lula, o padr\xe3o de bits n\xe3o deve ser alterado."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Veja tamb\xe9m:"})," ",(0,o.jsx)(a.a,{href:"#amx_ctof",children:"amx_ctof"})]}),"\n",(0,o.jsx)(a.h2,{id:"amx_getaddr",children:"amx_GetAddr"}),"\n",(0,o.jsx)(a.p,{children:"- Resolve um endere\xe7o AMX"}),"\n",(0,o.jsx)(a.h3,{id:"sintaxe-5",children:"Sintaxe"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"int amx_GetAddr(AMX *amx, cell amx_addr, cell **phys_addr);\n"})}),"\n",(0,o.jsxs)(a.table,{children:[(0,o.jsx)(a.thead,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.th,{children:"Par\xe2metro"}),(0,o.jsx)(a.th,{children:"Descri\xe7\xe3o"})]})}),(0,o.jsxs)(a.tbody,{children:[(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"amx"})}),(0,o.jsx)(a.td,{children:"A m\xe1quina abstrata."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"amx_addr"})}),(0,o.jsx)(a.td,{children:"O endere\xe7o relativo \xe0 m\xe1quina abstrata."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"phys_addr"})}),(0,o.jsxs)(a.td,{children:["Ponteiro para a vari\xe1vel que conter\xe1 o endere\xe7o de mem\xf3ria da c\xe9lula indicada. Se ",(0,o.jsx)(a.code,{children:"amx_addr"})," n\xe3o for v\xe1lido, ",(0,o.jsx)(a.code,{children:"phys_addr"})," ser\xe1 ",(0,o.jsx)(a.code,{children:"NULL"}),"."]})]})]})]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Notas:"})," Esta fun\xe7\xe3o retorna o endere\xe7o de mem\xf3ria de um endere\xe7o na m\xe1quina abstrata. Tipicamente, usa-se essa fun\xe7\xe3o em um m\xf3dulo de extens\xe3o, pois permite acessar vari\xe1veis dentro da m\xe1quina abstrata."]}),"\n",(0,o.jsx)(a.h2,{id:"amx_getstring",children:"amx_GetString"}),"\n",(0,o.jsx)(a.p,{children:"- Recupera uma string da m\xe1quina abstrata"}),"\n",(0,o.jsx)(a.h3,{id:"sintaxe-6",children:"Sintaxe"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"int amx_GetString(char *dest, cell *source, int use_wchar, size_t size);\n"})}),"\n",(0,o.jsxs)(a.table,{children:[(0,o.jsx)(a.thead,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.th,{children:"Par\xe2metro"}),(0,o.jsx)(a.th,{children:"Descri\xe7\xe3o"})]})}),(0,o.jsxs)(a.tbody,{children:[(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"dest"})}),(0,o.jsxs)(a.td,{children:["Ponteiro para um array de caracteres com tamanho suficiente para armazenar a string convertida de ",(0,o.jsx)(a.code,{children:"source"}),"."]})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"source"})}),(0,o.jsxs)(a.td,{children:["Ponteiro para a string de origem. Use ",(0,o.jsx)(a.code,{children:"amx_GetAddr"})," para converter um endere\xe7o de string ",(0,o.jsx)(a.code,{children:"amx"})," para um endere\xe7o f\xedsico."]})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"use_wchar"})}),(0,o.jsxs)(a.td,{children:["Um valor n\xe3o-zero interpreta ",(0,o.jsx)(a.code,{children:"dest"})," como um ponteiro para \u201Ccaracteres largos\u201D (",(0,o.jsx)(a.code,{children:"wchar_t"}),"), permitindo Unicode."]})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"size"})}),(0,o.jsxs)(a.td,{children:["N\xfamero m\xe1ximo de caracteres a serem armazenados em ",(0,o.jsx)(a.code,{children:"dest"}),", incluindo o byte ",(0,o.jsx)(a.code,{children:"NULL"}),"."]})]})]})]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Notas:"})," Esta fun\xe7\xe3o converte strings compactadas e n\xe3o compactadas do formato PAWN para o formato C. Ao recuperar uma string n\xe3o compactada com o par\xe2metro ",(0,o.jsx)(a.code,{children:"use_wchar"})," definido como zero, a fun\xe7\xe3o pode truncar caracteres de 16 bits para ASCII/ANSI."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Veja tamb\xe9m:"})," ",(0,o.jsx)(a.a,{href:"#amx_setstring",children:"amx_SetString"})]}),"\n",(0,o.jsx)(a.h2,{id:"amx_push",children:"amx_Push"}),"\n",(0,o.jsx)(a.p,{children:"- Passa um argumento num\xe9rico \u201Cpor valor\u201D"}),"\n",(0,o.jsx)(a.h3,{id:"sintaxe-7",children:"Sintaxe"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"int amx_Push(AMX *amx, cell value);\n"})}),"\n",(0,o.jsxs)(a.table,{children:[(0,o.jsx)(a.thead,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.th,{children:"Par\xe2metro"}),(0,o.jsx)(a.th,{children:"Descri\xe7\xe3o"})]})}),(0,o.jsx)(a.tbody,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"amx"})}),(0,o.jsx)(a.td,{children:"A m\xe1quina abstrata."})]})})]}),"\n",(0,o.jsx)(a.h2,{id:"amx_pushstring",children:"amx_PushString"}),"\n",(0,o.jsx)(a.p,{children:"- Passa uma string."}),"\n",(0,o.jsx)(a.h3,{id:"sintaxe-8",children:"Sintaxe"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"int amx_PushString(AMX *amx, cell *amx_addr, cell **phys_addr, const char *string, int pack, int use_wchar);\n"})}),"\n",(0,o.jsxs)(a.table,{children:[(0,o.jsx)(a.thead,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.th,{children:"Par\xe2metro"}),(0,o.jsx)(a.th,{children:"Descri\xe7\xe3o"})]})}),(0,o.jsxs)(a.tbody,{children:[(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"amx"})}),(0,o.jsx)(a.td,{children:"A m\xe1quina abstrata."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"amx_addr"})}),(0,o.jsx)(a.td,{children:"O endere\xe7o da c\xe9lula alocada que o programa Pawn (que roda na m\xe1quina abstrata) pode acessar; necess\xe1rio para liberar o bloco de mem\xf3ria. Esse par\xe2metro pode ser NULL."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"phys_addr"})}),(0,o.jsx)(a.td,{children:"O endere\xe7o da c\xe9lula para que programas em C/C++ possam acess\xe1-la. Esse par\xe2metro pode ser NULL."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"string"})}),(0,o.jsx)(a.td,{children:"A string a ser passada para a fun\xe7\xe3o p\xfablica."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"pack"})}),(0,o.jsx)(a.td,{children:"Valor n\xe3o-zero para converter a string de origem em uma string compactada na m\xe1quina abstrata, ou zero para converter a string de origem em uma string de c\xe9lulas."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"use_wchar"})}),(0,o.jsxs)(a.td,{children:["Um valor n\xe3o-zero interpreta o argumento da string como um ponteiro para \u201Ccaracteres largos\u201D, ou seja, ",(0,o.jsx)(a.code,{children:"wchar_t"}),", independente de seu tipo ",(0,o.jsx)(a.code,{children:"char"}),". Isso permite strings Unicode."]})]})]})]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Notas:"})," Quaisquer par\xe2metros para uma fun\xe7\xe3o p\xfablica devem ser empilhados na fun\xe7\xe3o antes de chamar ",(0,o.jsx)(a.code,{children:"amx_Exec"}),'. Se uma fun\xe7\xe3o p\xfablica possui m\xfaltiplos argumentos, estes devem ser empilhados na ordem inversa. A fun\xe7\xe3o aloca mem\xf3ria para o array dentro do "heap" da m\xe1quina abstrata. Esta mem\xf3ria deve ser liberada com ',(0,o.jsx)(a.code,{children:"amx_Release"}),". Veja a fun\xe7\xe3o ",(0,o.jsx)(a.code,{children:"amx_Allot"})," para mais detalhes sobre os par\xe2metros ",(0,o.jsx)(a.code,{children:"amx_addr"})," e ",(0,o.jsx)(a.code,{children:"phys_addr"}),". Ao passar uma string Unicode e solicitar um formato compactado na m\xe1quina abstrata (ou seja, ",(0,o.jsx)(a.code,{children:"pack"})," e ",(0,o.jsx)(a.code,{children:"use_wchar"})," s\xe3o verdadeiros), os caracteres s\xe3o truncados para 8 bits."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Veja tamb\xe9m:"})," ",(0,o.jsx)(a.a,{href:"#amx_exec",children:"amx_Exec"}),", ",(0,o.jsx)(a.a,{href:"#amx_push",children:"amx_Push"}),", ",(0,o.jsx)(a.a,{href:"#amx_pusharray",children:"amx_PushArray"}),", ",(0,o.jsx)(a.a,{href:"#amx_release",children:"amx_Release"}),", ",(0,o.jsx)(a.a,{href:"#amx_setstring",children:"amx_SetString"})]}),"\n",(0,o.jsx)(a.h2,{id:"amx_register",children:"amx_Register"}),"\n",(0,o.jsx)(a.p,{children:"- Torna as fun\xe7\xf5es nativas conhecidas"}),"\n",(0,o.jsx)(a.h3,{id:"sintaxe-9",children:"Sintaxe"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"int amx_Register(AMX *amx, AMX_NATIVE_INFO *list, int number);\n"})}),"\n",(0,o.jsxs)(a.table,{children:[(0,o.jsx)(a.thead,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.th,{children:"Par\xe2metro"}),(0,o.jsx)(a.th,{children:"Descri\xe7\xe3o"})]})}),(0,o.jsxs)(a.tbody,{children:[(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"amx"})}),(0,o.jsx)(a.td,{children:"A m\xe1quina abstrata."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"list"})}),(0,o.jsx)(a.td,{children:"Um array de estruturas onde cada estrutura mant\xe9m um ponteiro para o nome de uma fun\xe7\xe3o nativa e um ponteiro para a fun\xe7\xe3o. O array \xe9 opcionalmente finalizado com uma estrutura de ponteiros NULL."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"number"})}),(0,o.jsxs)(a.td,{children:["O n\xfamero de estruturas no array ",(0,o.jsx)(a.code,{children:"list"}),", ou -1 se o array termina com uma estrutura contendo dois ponteiros NULL."]})]})]})]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Notas:"})," Em caso de sucesso, essa fun\xe7\xe3o retorna 0 (",(0,o.jsx)(a.code,{children:"AMX_ERR_NONE"}),"). Se a fun\xe7\xe3o retornar o c\xf3digo de erro ",(0,o.jsx)(a.code,{children:"AMX_ERR_NOTFOUND"}),", uma ou mais fun\xe7\xf5es nativas usadas pelo programa Pawn n\xe3o foram encontradas na lista fornecida. \xc9 poss\xedvel chamar ",(0,o.jsx)(a.code,{children:"amx_Register"})," novamente para registrar listas adicionais de fun\xe7\xf5es."]}),"\n",(0,o.jsxs)(a.p,{children:["Para verificar se todas as fun\xe7\xf5es nativas usadas no script compilado foram registradas, chame ",(0,o.jsx)(a.code,{children:"amx_Register"})," com o par\xe2metro ",(0,o.jsx)(a.code,{children:"list"})," definido como NULL. Esta chamada n\xe3o registrar\xe1 novas fun\xe7\xf5es nativas, mas ainda retornar\xe1 ",(0,o.jsx)(a.code,{children:"AMX_ERR_NOTFOUND"})," se alguma fun\xe7\xe3o nativa estiver desregistrada."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Veja tamb\xe9m:"})," amx_NativeInfo+"]}),"\n",(0,o.jsx)(a.h2,{id:"amx_release",children:"amx_Release"}),"\n",(0,o.jsx)(a.p,{children:"- Libera espa\xe7o do heap na m\xe1quina abstrata"}),"\n",(0,o.jsx)(a.h3,{id:"sintaxe-10",children:"Sintaxe"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"int amx_Release(AMX *amx, cell amx_addr);\n"})}),"\n",(0,o.jsxs)(a.table,{children:[(0,o.jsx)(a.thead,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.th,{children:"Par\xe2metro"}),(0,o.jsx)(a.th,{children:"Descri\xe7\xe3o"})]})}),(0,o.jsxs)(a.tbody,{children:[(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"amx"})}),(0,o.jsx)(a.td,{children:"A m\xe1quina abstrata."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"amx_addr"})}),(0,o.jsxs)(a.td,{children:["O endere\xe7o da c\xe9lula alocada que o programa Pawn (que roda na m\xe1quina abstrata) v\xea. Esse valor \xe9 retornado por ",(0,o.jsx)(a.code,{children:"amx_Allot"}),", ",(0,o.jsx)(a.code,{children:"amx_PushArray"})," e ",(0,o.jsx)(a.code,{children:"amx_PushString"}),"."]})]})]})]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Notas:"})," ",(0,o.jsx)(a.code,{children:"amx_Allot"})," aloca mem\xf3ria no heap em ordem ascendente (o heap cresce para cima). ",(0,o.jsx)(a.code,{children:"amx_Release"})," libera toda a mem\xf3ria acima do valor do par\xe2metro de entrada ",(0,o.jsx)(a.code,{children:"amx_addr"}),". Assim, uma \xfanica chamada para ",(0,o.jsx)(a.code,{children:"amx_Release"})," pode liberar m\xfaltiplas chamadas para ",(0,o.jsx)(a.code,{children:"amx_Allot"})," se voc\xea passar o valor ",(0,o.jsx)(a.code,{children:"amx_addr"})," da primeira aloca\xe7\xe3o. ",(0,o.jsx)(a.code,{children:"amx_PushArray"})," e ",(0,o.jsx)(a.code,{children:"amx_PushString"})," usam ",(0,o.jsx)(a.code,{children:"amx_Allot"})," internamente, ent\xe3o o mesmo procedimento se aplica a essas fun\xe7\xf5es tamb\xe9m."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Veja tamb\xe9m:"})," ",(0,o.jsx)(a.a,{href:"#amx_allot",children:"amx_Allot"}),", ",(0,o.jsx)(a.a,{href:"#amx_pusharray",children:"amx_PushArray"}),", ",(0,o.jsx)(a.a,{href:"#amx_pushstring",children:"amx_PushString"})]}),"\n",(0,o.jsx)(a.h2,{id:"amx_setstring",children:"amx_SetString"}),"\n",(0,o.jsx)(a.p,{children:"- Armazena uma string na m\xe1quina abstrata"}),"\n",(0,o.jsx)(a.h3,{id:"sintaxe-11",children:"Sintaxe"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"int amx_SetString(cell *dest, char *source, int pack, int use_wchar, size_t size);\n"})}),"\n",(0,o.jsxs)(a.table,{children:[(0,o.jsx)(a.thead,{children:(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.th,{children:"Par\xe2metro"}),(0,o.jsx)(a.th,{children:"Descri\xe7\xe3o"})]})}),(0,o.jsxs)(a.tbody,{children:[(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"dest"})}),(0,o.jsxs)(a.td,{children:["Um ponteiro para um array de caracteres no ",(0,o.jsx)(a.code,{children:"amx"})," onde a string convertida \xe9 armazenada. Use ",(0,o.jsx)(a.code,{children:"amx_GetAddr"})," para converter um endere\xe7o de string no ",(0,o.jsx)(a.code,{children:"amx"})," para o endere\xe7o f\xedsico."]})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"source"})}),(0,o.jsx)(a.td,{children:"Um ponteiro para a string de origem."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"pack"})}),(0,o.jsx)(a.td,{children:"Valor n\xe3o-zero para converter a string de origem em uma string compactada na m\xe1quina abstrata, zero para converter a string de origem em uma string de c\xe9lulas."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"string"})}),(0,o.jsx)(a.td,{children:"A string a ser passada para a fun\xe7\xe3o p\xfablica."})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"use_wchar"})}),(0,o.jsxs)(a.td,{children:["Um valor n\xe3o-zero interpreta o argumento da string como um ponteiro para \u201Ccaracteres largos\u201D, ou seja, ",(0,o.jsx)(a.code,{children:"wchar_t"}),", independente de seu tipo ",(0,o.jsx)(a.code,{children:"char"}),". Isso permite strings Unicode."]})]}),(0,o.jsxs)(a.tr,{children:[(0,o.jsx)(a.td,{children:(0,o.jsx)(a.strong,{children:"size"})}),(0,o.jsxs)(a.td,{children:["O n\xfamero m\xe1ximo de c\xe9lulas a serem armazenadas em ",(0,o.jsx)(a.code,{children:"dest"}),", incluindo o caractere ou c\xe9lula zero de termina\xe7\xe3o. Se a string em ",(0,o.jsx)(a.code,{children:"source"})," for maior, ela ser\xe1 truncada."]})]})]})]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Notas:"})," Ao passar uma string Unicode e solicitar um formato compactado na m\xe1quina abstrata (ou seja, ",(0,o.jsx)(a.code,{children:"pack"})," e ",(0,o.jsx)(a.code,{children:"use_wchar"})," s\xe3o verdadeiros), os caracteres s\xe3o truncados para 8 bits."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Veja tamb\xe9m:"})," ",(0,o.jsx)(a.a,{href:"#amx_getstring",children:"amx_GetString"})]}),"\n",(0,o.jsx)(a.h2,{id:"exemplos-de-fun\xe7\xf5es-amx",children:"Exemplos de Fun\xe7\xf5es AMX"}),"\n",(0,o.jsx)(a.p,{children:"Para evitar longos blocos de texto, adicionei coment\xe1rios no c\xf3digo para explicar o que estou fazendo em vez de escrever na se\xe7\xe3o do t\xf3pico. \xc9 provavelmente uma boa ideia manter o artigo da wiki aberto como refer\xeancia enquanto l\xea os exemplos."}),"\n",(0,o.jsx)(a.h3,{id:"registrando-nativas",children:"Registrando Nativas"}),"\n",(0,o.jsx)(a.p,{children:"Cada fun\xe7\xe3o que fornecemos para PAWN deve ser registrada para que a m\xe1quina abstrata esteja ciente de sua exist\xeancia. Vou reutilizar um exemplo de se\xe7\xe3o anterior, acrescentando coment\xe1rios."}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:'// Um array das fun\xe7\xf5es que queremos registrar na m\xe1quina abstrata.\nAMX_NATIVE_INFO PluginNatives[] =\n{\n    // Especificamos informa\xe7\xf5es da fun\xe7\xe3o nativa e terminamos o array com dois valores NULL.\n    {"HelloWorld", HelloWorld},\n    {0, 0}\n};\n\nPLUGIN_EXPORT int PLUGIN_CALL AmxLoad( AMX *amx )\n{\n    // Registramos nossas nativas na m\xe1quina abstrata. Usamos -1 para especificar o n\xfamero\n    // de fun\xe7\xf5es, pois terminamos o array com dois valores NULL.\n    return amx_Register(amx, PluginNatives, -1);\n}\n'})}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsx)(a.h3,{id:"obtendo-uma-string-e-seu-tamanho",children:"Obtendo uma String e Seu Tamanho"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"// Esta fun\xe7\xe3o demonstra como obter uma string (e seu tamanho) do PAWN.\n// PAWN native: native PrintPawnString(const str[]);\ncell AMX_NATIVE_CALL PrintPawnString(AMX* amx, cell* params)\n{\n    int len = NULL, ret = NULL;\n    cell *addr  = NULL;\n\n    // Obtemos o endere\xe7o do par\xe2metro string (str) e seu tamanho.\n    amx_GetAddr(amx, params[1], &addr);\n    amx_StrLen(addr, &len);\n\n    if(len)\n    {\n        // Incrementamos len para acomodar o caractere nulo ao alocar mem\xf3ria.\n        len++;\n        char* text = new char[ len ];\n        amx_GetString(text, addr, 0, len);\n        logprintf(text);\n        delete[] text;\n    }\n    return 1;\n}\n"})}),"\n",(0,o.jsx)(a.h3,{id:"m\xe9todo-alternativo-para-obter-uma-string",children:"M\xe9todo Alternativo para Obter uma String"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"// Demonstra uma forma alternativa de obter strings do Pawn, com os poss\xedveis riscos.\n// PAWN native: native PrintPawnString2(const str[]);\ncell AMX_NATIVE_CALL PrintPawnString2(AMX* amx, cell* params)\n{\n    char* text = NULL;\n    amx_StrParam(amx, params[1], text);\n\n    if(text != NULL)\n    {\n        logprintf(text);\n    }\n    return 1;\n}\n"})}),"\n",(0,o.jsx)(a.h3,{id:"como-definir-uma-string",children:"Como Definir uma String"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:'// Demonstra como modificar uma string no PAWN.\n// PAWN native: native SetPawnString(str[], len = sizeof(str));\ncell AMX_NATIVE_CALL SetPawnString(AMX* amx, cell* params)\n{\n    const string\n\n str = "Texto do plugin";\n    cell* dest = NULL;\n\n    amx_GetAddr(amx, params[1], &dest);\n    amx_SetString(dest, str.c_str(), 0, 0, params[2]);\n    return 1;\n}\n'})}),"\n",(0,o.jsx)(a.p,{children:"Esses exemplos cobrem o b\xe1sico sobre strings"}),"\n",(0,o.jsx)(a.h3,{id:"passando-par\xe2metros-por-refer\xeancia",children:"Passando par\xe2metros por refer\xeancia"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:'//Esta fun\xe7\xe3o demonstra como passar par\xe2metros por refer\xeancia.\n//PAWN nativo: native SetPawnReferenceVars(&value1, &Float:value2);\ncell AMX_NATIVE_CALL SetPawnReferenceVars(AMX* amx, cell* params)\n{\n    const int val = 65;\n    const float val2 = 84.54f;\n\n    cell* addr[2] = {NULL, NULL};\n\n    //Obt\xe9m os endere\xe7os de "value1" e "value2"\n    amx_GetAddr(amx, params[1], &addr[0]);\n    amx_GetAddr(amx, params[2], &addr[1]);\n\n    //Desreferencia os ponteiros e atribui valores. Lembre-se de SEMPRE usar a macro "amx_ftoc" para converter floats em\n    //cells (o formato float adequado para PAWN)!\n    *addr[0] = val;\n    *addr[1] = amx_ftoc(val2);\n\n    return 1;\n}\n'})}),"\n",(0,o.jsx)(a.h3,{id:"obtendo-e-modificando-valores-de-array",children:"Obtendo e modificando valores de array"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:'//Esta fun\xe7\xe3o demonstra como obter e modificar valores de um array.\n//PAWN nativo: native PrintPawnArray(arr[], size = sizeof(arr));\ncell AMX_NATIVE_CALL PrintPawnArray(AMX* amx, cell* params)\n{\n    //Certifique-se de que h\xe1 algo para imprimir...\n    if(params[2] > 0)\n    {\n        cell* addr = NULL;\n\n        //Obt\xe9m o endere\xe7o do primeiro valor no array PAWN.\n        amx_GetAddr(amx, params[1], &addr);\n\n        for(int i = 0, l = params[2]; i < l; i++)\n        {\n            //\xc9 simples: Desreferenciamos o ponteiro addr para obter o valor a ser impresso.\n            //Arrays e ponteiros s\xe3o quase iguais, ent\xe3o podemos usar aritm\xe9tica de ponteiros para adicionar um deslocamento\n            //ou simplesmente o operador de \xedndice (no final *(addr+1) e addr[1] s\xe3o o mesmo).\n            logprintf("arr[%d] = %d", i, *(addr + i));\n\n            //Se voc\xea quisesse modificar o array, basta mudar o valor desreferenciando addr e atribuindo um novo valor.\n            //Aqui mudamos o primeiro valor do array para 5 (Nota: Como \xe9 o primeiro valor, sem deslocamento).\n\n            // *(addr) = 5;\n        }\n    }\n    return 1;\n}\n'})}),"\n",(0,o.jsx)(a.h3,{id:"chamando-um-callback",children:"Chamando um callback"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:'//Esta fun\xe7\xe3o demonstra como chamar um callback que est\xe1 em um script PAWN.\n//PAWN nativo: native EmitPawnCallback();\ncell AMX_NATIVE_CALL EmitPawnCallback(AMX* amx, cell* params)\n{\n    int idx;\n\n    const cell var = 3;\n    const cell arr[] = {100, 4, 33};\n    const string str = "Uma mensagem aleat\xf3ria do C++.";\n\n    //Callback PAWN: forward OnPawnCallbackEmitted(var, arr[], str[]);\n    //Encontra nosso callback e armazena sua posi\xe7\xe3o na tabela de fun\xe7\xf5es p\xfablicas (\xedndice) na vari\xe1vel idx.\n    if(!amx_FindPublic(amx, "OnPawnCallbackEmitted", &idx))\n    {\n        cell ret, addr;\n\n        //Aqui empurramos os argumentos para nossa fun\xe7\xe3o. Note que, se a fun\xe7\xe3o tiver v\xe1rios argumentos, voc\xea deve empurr\xe1-los em ordem reversa! Por isso, primeiro a string, depois o array e, por \xfaltimo, o inteiro.\n\n        amx_PushString(amx, &addr, NULL, str.c_str(), NULL, NULL);\n        //amx_PushArray(amx, NULL, NULL, arr, sizeof(arr) / sizeof(cell));\n\n        cell amx_addr, *phys_addr;\n\n        //Por algum motivo, amx_PushArray est\xe1 travando o servidor, e n\xe3o fa\xe7o ideia do porqu\xea. A solu\xe7\xe3o \xe9 alocar mem\xf3ria usando amx_Allot, copiar para phys_addr e empurrar manualmente.\n        amx_Allot(amx, sizeof(arr) / sizeof(cell), &amx_addr, &phys_addr);\n        memcpy(phys_addr, arr, sizeof(arr));\n        amx_Push(amx, amx_addr);\n\n        //Empurra nosso valor inteiro\n        amx_Push(amx, var);\n\n        //Executa a fun\xe7\xe3o usando o \xedndice previamente obtido.\n        //Nota: O segundo par\xe2metro \xe9 o valor de retorno do callback (pode ser NULL se n\xe3o precisar de retorno).\n        amx_Exec(amx, &ret, idx);\n\n        //Libera a mem\xf3ria alocada. Tanto amx_PushString quanto amx_PushArray usam amx_Allot, ent\xe3o devemos liberar a mem\xf3ria com amx_Release.\n        amx_Release(amx, addr);\n\n        //Imprime o valor de retorno (por completude).\n        logprintf("EmitPawnCallback: O callback OnPawnCallbackEmitted retornou %d!", ret);\n    }\n    return 1;\n}\n'})}),"\n",(0,o.jsx)(a.h2,{id:"chamando-nativos-e-interceptando-callbacks",children:"Chamando nativos e interceptando callbacks"}),"\n",(0,o.jsx)(a.p,{children:"Antes de entrarmos na intercepta\xe7\xe3o de callbacks ou chamadas de nativos SA-MP, \xe9 importante lembrar que plugins foram projetados para fornecer funcionalidades ao PAWN, n\xe3o para substitu\xed-lo. A decis\xe3o de criar um plugin em vez de um script PAWN deve ser cuidadosamente avaliada."}),"\n",(0,o.jsx)(a.h3,{id:"invoke",children:"Invoke"}),"\n",(0,o.jsxs)(a.p,{children:["Invoke \xe9 um m\xe9todo para chamar fun\xe7\xf5es nativas do SA-MP criado por Incognito. ",(0,o.jsx)(a.a,{href:"https://github.com/Dystans/SA-MP_Invoke_2.0",children:"Encontre aqui"}),". Para o Invoke funcionar, voc\xea deve ter uma fun\xe7\xe3o p\xfablica PAWN que use todas as nativas que seu plugin requer."]}),"\n",(0,o.jsx)(a.h4,{id:"come\xe7ando",children:"Come\xe7ando"}),"\n",(0,o.jsxs)(a.ol,{children:["\n",(0,o.jsx)(a.li,{children:"Inclua o cabe\xe7alho do invoke."}),"\n",(0,o.jsxs)(a.li,{children:["Aloque mem\xf3ria para a inst\xe2ncia do invoke em ",(0,o.jsx)(a.code,{children:"Load"}),"."]}),"\n",(0,o.jsxs)(a.li,{children:["Adicione o membro ",(0,o.jsx)(a.code,{children:"amx_list"})," toda vez que uma nova inst\xe2ncia AMX \xe9 carregada em ",(0,o.jsx)(a.code,{children:"AmxLoad"}),"."]}),"\n",(0,o.jsxs)(a.li,{children:["Remova a inst\xe2ncia AMX ao descarregar o script em ",(0,o.jsx)(a.code,{children:"AmxUnload"}),"."]}),"\n",(0,o.jsxs)(a.li,{children:["Crie uma nativa que chame a fun\xe7\xe3o ",(0,o.jsx)(a.code,{children:"getAddresses"})," do invoke para PAWN quando um filterscript ou gamemode que usa o plugin for carregado."]}),"\n"]}),"\n",(0,o.jsx)(a.h4,{id:"adicionando-nativos-sa-mp",children:"Adicionando nativos SA-MP"}),"\n",(0,o.jsxs)(a.p,{children:["No cabe\xe7alho do invoke, adicione o nome do nativo ao array de nomes e declare uma estrutura ",(0,o.jsx)(a.code,{children:"Native"})," com as especifica\xe7\xf5es de par\xe2metros, por exemplo:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:"i = inteiro\nf = valor float\ns = string\nv = vari\xe1vel de refer\xeancia (GetPlayerPos, GetPlayerKeys, etc.)\np = vari\xe1vel string (GetPlayerName etc.)\n"})}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.strong,{children:"Atualize a fun\xe7\xe3o p\xfablica PAWN para chamar os novos nativos sempre que adicion\xe1-los."})}),"\n",(0,o.jsx)(a.h4,{id:"chamando-nativos",children:"Chamando nativos"}),"\n",(0,o.jsxs)(a.p,{children:["A fun\xe7\xe3o ",(0,o.jsx)(a.code,{children:"callNative"})," do invoke usa como par\xe2metros um ponteiro para uma estrutura ",(0,o.jsx)(a.code,{children:"Native"})," e os par\xe2metros para o nativo. Abaixo um exemplo:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:'//Esta fun\xe7\xe3o demonstra como usar o invoke para chamar nativos SA-MP.\n//PAWN nativo: native WhereIsPlayer(playerid);\ncell AMX_NATIVE_CALL WhereIsPlayer(AMX* amx, cell* params)\n{\n    float x = NULL, y = NULL, z = NULL;\n\n    //Obt\xe9m a posi\xe7\xe3o do jogador (verifica se ele est\xe1 conectado).\n    if(g_Invoke->callNative(&PAWN::GetPlayerPos, params[1], &x, &y, &z))\n    {\n        char name[24];\n\n        //Obt\xe9m o nome, interior e mundo virtual do jogador e imprime.\n        g_Invoke->callNative(&PAWN::GetPlayerName, params[1], name);\n        int interior = g_Invoke->callNative(&PAWN::GetPlayerInterior, params[1]);\n        int virtualworld = g_Invoke->callNative(&PAWN::GetPlayerVirtualWorld, params[1]);\n\n        logprintf("%s est\xe1 em X: %.2f, Y: %.2f, Z: %.2f (Mundo virtual: %d, Interior %d).", name, x, y, z, virtualworld, interior);\n        return 1;\n    }\n    return 0;\n}\n'})}),"\n",(0,o.jsx)(a.h3,{id:"hooking-de-callbacks",children:"Hooking de Callbacks"}),"\n",(0,o.jsxs)(a.p,{children:["Usando o m\xe9todo ",(0,o.jsx)(a.code,{children:"invoke"}),", n\xe3o existe um m\xe9todo de hooking 100% transparente quando se trata de callbacks. Plugins que desejam hookear callbacks que usam ",(0,o.jsx)(a.code,{children:"invoke"})," precisam passar pelo PAWN para faz\xea-lo. Voc\xea pode criar uma fun\xe7\xe3o nativa que pode ser chamada dentro do callback PAWN que deseja hookear, e usar essa nativa como uma esp\xe9cie de pseudo callback. Voc\xea pode fazer isso de uma maneira que n\xe3o exige trabalho do usu\xe1rio final, usando o m\xe9todo de hooking ALS."]}),"\n",(0,o.jsxs)(a.p,{children:["O primeiro passo \xe9, obviamente, criar a nativa (lembre-se de adicion\xe1-la \xe0 nossa lista de nativas a serem registradas e tamb\xe9m adicion\xe1-la em seu include posteriormente). O callback que decidi hookear \xe9 ",(0,o.jsx)(a.code,{children:"OnPlayerConnect"}),", ent\xe3o vou escrever uma fun\xe7\xe3o nativa que tenha os mesmos argumentos que o callback, e ent\xe3o adicionar o c\xf3digo que requer o callback (neste caso, uma pequena piada)."]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:'// Esta fun\xe7\xe3o demonstra: como escrever uma nativa para agir como um callback.\n// Nativa PAWN: native TEST_Hook_OnPlayerConnnect(playerid);\ncell AMX_NATIVE_CALL TEST_Hook_OnPlayerConnnect(AMX* amx, cell* params)\n{\n    // Obter o nome do jogador\n    char name[24];\n    g_Invoke->callNative(&PAWN::GetPlayerName, params[1], name);\n\n    // Verificar se o nome dele \xe9 "Mario".\n    if(string("Mario") == name)\n    {\n        // Se for, envie nossa mensagem engra\xe7ada e o expulse.\n        g_Invoke->callNative(&PAWN::SendClientMessage, params[1], 0xFFFFFFFF, "Desculpe {FF0000}Mario, {FFFFFF}mas sua princesa est\xe1 em outro servidor.");\n        g_Invoke->callNative(&PAWN::Kick, params[1]);\n    }\n    return 1;\n}\n'})}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.code,{children:"TEST_Hook_OnPlayerConnnect"})," agora agir\xe1 como o callback ",(0,o.jsx)(a.code,{children:"OnPlayerConnect"}),' do nosso plugin. Como o nome do nosso plugin \xe9 "Test" e \xe9 bastante curto, decidi deix\xe1-lo agir como nosso prefixo para hooking. Voc\xea geralmente quer algo \xfanico para seus prefixes para n\xe3o colidir com outros plugins/includes. ',(0,o.jsx)(a.strong,{children:"Nota:"})," Ainda temos que chamar essa fun\xe7\xe3o do PAWN usando o m\xe9todo ALS que falamos anteriormente para conveni\xeancia do usu\xe1rio. Como Y_Less faz um \xf3timo trabalho explicando o m\xe9todo ALS, n\xe3o h\xe1 necessidade de eu entrar em detalhes sobre isso, eu simplesmente fornecerei um exemplo de hooking para nosso callback ",(0,o.jsx)(a.code,{children:"TEST_Hook_OnPlayerConnect"}),". Isso deve ser colocado no arquivo include do seu plugin."]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:'public OnPlayerConnect(playerid)\n{\n    TEST_Hook_OnPlayerConnnect(playerid);\n    //..\n\n    if(funcidx("TEST_OnPlayerConnect") != -1)\n    {\n        return CallLocalFunction("TEST_OnPlayerConnect", "d", playerid);\n    }\n    return 1;\n}\n\n#if defined _ALS_OnPlayerConnect\n    #undef OnPlayerConnect\n#else\n    #define _ALS_OnPlayerConnect\n#endif\n#define OnPlayerConnect TEST_OnPlayerConnect\n\nforward TEST_OnPlayerConnect(playerid);\n'})}),"\n",(0,o.jsx)(a.h2,{id:"fechamento",children:"Fechamento"}),"\n",(0,o.jsxs)(a.p,{children:['Alguns de voc\xeas, desenvolvedores de plugins experientes, podem estar se perguntando por que n\xe3o inclu\xed o GDK na se\xe7\xe3o "Chamando nativas e hookeando callbacks". Decidi deix\xe1-lo de fora por duas raz\xf5es. A primeira \xe9 que simplesmente n\xe3o tenho tanto tempo dispon\xedvel mais, e n\xe3o pude me dedicar a me familiarizar com esse novo sistema. A segunda raz\xe3o \xe9 que o GDK \xe9 muito experimental e atualmente est\xe1 enfrentando problemas como crashes, entre outros. Estou bem ciente das diferen\xe7as de velocidade entre ',(0,o.jsx)(a.code,{children:"Invoke"})," e GDK, e definitivamente vou adicionar isso algum dia no futuro, se ningu\xe9m mais fizer (lembre-se, isso deve ser uma iniciativa comunit\xe1ria). Acho que \xe9 melhor esperar que mais alguns problemas sejam resolvidos por enquanto (zeex \xe9 um codificador incr\xedvel e tenho certeza de que ele resolver\xe1 tudo)."]}),"\n",(0,o.jsx)(a.p,{children:"Al\xe9m disso, como prometi, aqui est\xe1 o arquivo de include/atualiza\xe7\xe3o com coment\xe1rios sobre tudo que esperamos ter aprendido:"}),"\n",(0,o.jsx)(a.h3,{id:"include-do-plugin",children:"Include do Plugin"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:'// Qualquer coisa com o prefixo "TEST" deve ser alterada se voc\xea chamou seu plugin de forma diferente.\n// Isso tamb\xe9m se aplica ao c\xf3digo do plugin (TEST_Hook_OnPlayerConnect especificamente).\n#if defined _TEST_INCLUDED\n    #endinput\n#endif\n#define _TEST_INCLUDED\n#pragma library Test\n\n#include <a_samp>\n\n// Nativas de exemplo\nnative PrintPawnString(const str[]);\nnative PrintPawnString2(const str[]);\nnative SetPawnString(str[], len = sizeof(str));\nnative Float:ReturnPawnFloatVal();\nnative SetPawnReferenceVars(&value1, &Float:value2);\nnative PrintPawnArray(arr[], size = sizeof(arr));\nnative EmitPawnCallback();\nnative WhereIsPlayer(playerid);\nnative TEST_Hook_OnPlayerConnnect(playerid);\n\n// Nativa Invoke\nnative Invoke_GetAddresses();\n\n// Hooks de callback\npublic OnPlayerConnect(playerid)\n{\n    TEST_Hook_OnPlayerConnnect(playerid);\n    //..\n\n    if(funcidx("TEST_OnPlayerConnect") != -1)\n    {\n        return CallLocalFunction("TEST_OnPlayerConnect", "d", playerid);\n    }\n    return 1;\n}\n\n#if defined _ALS_OnPlayerConnect\n    #undef OnPlayerConnect\n#else\n    #define _ALS_OnPlayerConnect\n#endif\n#define OnPlayerConnect TEST_OnPlayerConnect\n\nforward TEST_OnPlayerConnect(playerid);\n\npublic OnGameModeInit()\n{\n    Invoke_GetAddresses();\n    //..\n\n    if(funcidx("TEST_OnGameModeInit") != -1)\n    {\n        return CallLocalFunction("TEST_OnGameModeInit", "");\n    }\n    return 1;\n}\n\n#if defined _ALS_OnGameModeInit\n    #undef OnGameModeInit\n#else\n    #define _ALS_OnGameModeInit\n#endif\n#define OnGameModeInit TEST_OnGameModeInit\n\nforward TEST_OnGameModeInit();\n\npublic OnFilterScriptInit()\n{\n    Invoke_GetAddresses();\n    //..\n\n    if(funcidx("TEST_OnFilterScriptInit") != -1)\n    {\n        return CallLocalFunction("TEST_OnFilterScriptInit", "");\n    }\n    return 1;\n}\n\n#if defined _ALS_OnFilterScriptInit\n    #undef OnFilterScriptInit\n#else\n    #define _ALS_OnFilterScriptInit\n#endif\n#define OnFilterScriptInit TEST_OnFilterScriptInit\n\nforward TEST_OnFilterScriptInit();\n\n\n//Public function for invoke\nforward InvokeFunction();\npublic InvokeFunction()\n{\n    new Float:fVar;\n    new Var[ 256 ];\n    new iVar;\n\n    // a_samp.inc\n    SendClientMessage(0, 0, "");\n    SendClientMessageToAll(0, "");\n    SendDeathMessage(0, 0, 0);\n    GameTextForAll("", 0, 0);\n    GameTextForPlayer(0, "", 0, 0);\n    GetTickCount();\n    GetMaxPlayers();\n    SetGameModeText("");\n    SetTeamCount(0);\n    AddPlayerClass(0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);\n    AddPlayerClassEx(0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);\n    AddStaticVehicle(0, 0.0, 0.0, 0.0, 0.0, 0, 0);\n    AddStaticVehicleEx(0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0);\n    AddStaticPickup(0, 0, 0.0, 0.0, 0.0);\n    ShowNameTags(0);\n    ShowPlayerMarkers(0);\n    GameModeExit();\n    SetWorldTime(0);\n    GetWeaponName(0, Var, sizeof( Var ) );\n    EnableTirePopping(0);\n    AllowInteriorWeapons(0);\n    SetWeather(0);\n    SetGravity(0.0);\n    AllowAdminTeleport(0);\n    SetDeathDropAmount(0);\n    CreateExplosion(0.0, 0.0, 0.0, 0, 0.0);\n    //SetDisabledWeapons();\n    EnableZoneNames(0);\n    IsPlayerAdmin(0);\n    Kick(0);\n    Ban(0);\n    SendRconCommand("");\n    ShowPlayerDialog(0,0,0,"lol","lol","lol","lol");\n\n    // a_players.inc\n    SetSpawnInfo(0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0,0);\n    SpawnPlayer(0);\n    SetPlayerPos(0, 0.0, 0.0, 0.0);\n//  SetPlayerPosFindZ(0, 0.0, 0.0, 0.0);\n    GetPlayerPos(0, fVar, fVar, fVar);\n    SetPlayerFacingAngle(0,0.0);\n    GetPlayerFacingAngle(0,fVar);\n    SetPlayerInterior(0,0);\n    GetPlayerInterior(0);\n    SetPlayerHealth(0, 0.0);\n    GetPlayerHealth(0, fVar);\n    SetPlayerArmour(0, 0.0);\n    GetPlayerArmour(0, fVar);\n    SetPlayerAmmo(0, 0,0);\n    GetPlayerAmmo(0);\n    SetPlayerTeam(0,0);\n    GetPlayerTeam(0);\n    SetPlayerScore(0,0);\n    GetPlayerScore(0);\n    SetPlayerColor(0,0);\n    GetPlayerColor(0);\n    SetPlayerSkin(0,0);\n    GivePlayerWeapon(0, 0,0);\n    ResetPlayerWeapons(0);\n    GetPlayerWeaponData(0, 0, iVar, iVar );\n    GivePlayerMoney(0,0);\n    ResetPlayerMoney(0);\n    SetPlayerName(0, "");\n    GetPlayerMoney(0);\n    GetPlayerState(0);\n    GetPlayerIp(0, Var, sizeof( Var ));\n    GetPlayerPing(0);\n    GetPlayerWeapon(0);\n    GetPlayerKeys(0,iVar,iVar,iVar);\n    GetPlayerName(0, Var, sizeof( Var ));\n    PutPlayerInVehicle(0, 0,0);\n    GetPlayerVehicleID(0);\n    RemovePlayerFromVehicle(0);\n    TogglePlayerControllable(0,0);\n    PlayerPlaySound(0, 0, 0.0, 0.0,0.0);\n    SetPlayerCheckpoint(0, 0.0, 0.0, 0.0,0.0);\n    DisablePlayerCheckpoint(0);\n    SetPlayerRaceCheckpoint(0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0);\n    DisablePlayerRaceCheckpoint(0);\n    SetPlayerWorldBounds(0,0.0,0.0,0.0,0.0);\n    SetPlayerMarkerForPlayer(0, 0,0);\n    ShowPlayerNameTagForPlayer(0, 0,0);\n    SetPlayerMapIcon(0, 0, 0.0, 0.0, 0.0, 0,0);\n    RemovePlayerMapIcon(0,0);\n    SetPlayerCameraPos(0,0.0, 0.0, 0.0);\n    SetPlayerCameraLookAt(0, 0.0, 0.0, 0.0);\n    SetCameraBehindPlayer(0);\n    AllowPlayerTeleport(0,0);\n    IsPlayerConnected(0);\n    IsPlayerInVehicle(0,0);\n    IsPlayerInAnyVehicle(0);\n    IsPlayerInCheckpoint(0);\n    IsPlayerInRaceCheckpoint(0);\n    SetPlayerTime(0, 0,0);\n    TogglePlayerClock(0,0);\n    SetPlayerWeather(0,0);\n    GetPlayerTime(0,iVar,iVar);\n    SetPlayerVirtualWorld(0,0);\n    GetPlayerVirtualWorld(0);\n\n    // a_vehicle.inc\n    CreateVehicle(0,0.0,0.0,0.0,0.0,0,0,0);\n    DestroyVehicle(0);\n    GetVehiclePos(0,fVar,fVar,fVar);\n    SetVehiclePos(0,0.0,0.0,0.0);\n    GetVehicleZAngle(0,fVar);\n    SetVehicleZAngle(0,0.0);\n    SetVehicleParamsForPlayer(0,0,0,0);\n    SetVehicleToRespawn(0);\n    LinkVehicleToInterior(0,0);\n    AddVehicleComponent(0,0);\n    ChangeVehicleColor(0,0,0);\n    ChangeVehiclePaintjob(0,0);\n    SetVehicleHealth(0,0.0);\n    GetVehicleHealth(0,fVar);\n    AttachTrailerToVehicle(0, 0);\n    DetachTrailerFromVehicle(0);\n    IsTrailerAttachedToVehicle(0);\n    GetVehicleModel(0);\n    SetVehicleNumberPlate(0,"");\n    SetVehicleVirtualWorld(0,0);\n    GetVehicleVirtualWorld(0);\n\n    ApplyAnimation(0,"","",1.0,0,0,0,0,0);\n\n    // a_objects.inc\n    CreateObject(0,0.0,0.0,0.0,0.0,0.0,0.0);\n    SetObjectPos(0,0.0,0.0,0.0);\n    GetObjectPos(0,fVar,fVar,fVar);\n    SetObjectRot(0,0.0,0.0,0.0);\n    GetObjectRot(0,fVar,fVar,fVar);\n    IsValidObject(0);\n    DestroyObject(0);\n    MoveObject(0,0.0,0.0,0.0,0.0);\n    StopObject(0);\n    CreatePlayerObject(0,0,0.0,0.0,0.0,0.0,0.0,0.0);\n    SetPlayerObjectPos(0,0,0.0,0.0,0.0);\n    GetPlayerObjectPos(0,0,fVar,fVar,fVar);\n    GetPlayerObjectRot(0,0,fVar,fVar,fVar);\n    SetPlayerObjectRot(0,0,0.0,0.0,0.0);\n    IsValidPlayerObject(0,0);\n    DestroyPlayerObject(0,0);\n    MovePlayerObject(0,0,0.0,0.0,0.0,0.0);\n    StopPlayerObject(0,0);\n\n    // Menu\'s\n    CreateMenu("", 0, 0.0, 0.0, 0.0, 0.0);\n    DestroyMenu(Menu:0);\n    AddMenuItem(Menu:0, 0, "");\n    SetMenuColumnHeader(Menu:0, 0, "");\n    ShowMenuForPlayer(Menu:0, 0);\n    HideMenuForPlayer(Menu:0, 0);\n    IsValidMenu(Menu:0);\n    DisableMenu(Menu:0);\n    DisableMenuRow(Menu:0,0);\n\n    // Textdraw\n    TextDrawCreate(0.0,0.0,"");\n    TextDrawDestroy(Text:0);\n    TextDrawLetterSize(Text:0, 0.0,0.0);\n    TextDrawTextSize(Text:0, 0.0,0.0);\n    TextDrawAlignment(Text:0, 0);\n    TextDrawColor(Text:0,0);\n    TextDrawUseBox(Text:0, 0);\n    TextDrawBoxColor(Text:0, 0);\n    TextDrawSetShadow(Text:0, 0);\n    TextDrawSetOutline(Text:0, 0);\n    TextDrawBackgroundColor(Text:0,0);\n    TextDrawFont(Text:0, 0);\n    TextDrawSetProportional(Text:0, 0);\n    TextDrawShowForPlayer(0, Text:0);\n    TextDrawHideForPlayer(0, Text:0);\n    TextDrawShowForAll(Text:0);\n    TextDrawHideForAll(Text:0);\n\n    // Others\n    funcidx("");\n    gettime(iVar,iVar,iVar);\n    getdate(iVar,iVar,iVar);\n    tickcount(iVar);\n\n    return 1;\n}\n'})}),"\n",(0,o.jsx)(a.p,{children:"Aqui est\xe1 a tradu\xe7\xe3o do seu c\xf3digo de plugin e dos agradecimentos especiais:"}),"\n",(0,o.jsx)(a.hr,{}),"\n",(0,o.jsx)(a.h3,{id:"c\xf3digo-fonte-do-plugin",children:"C\xf3digo-fonte do plugin"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-cpp",children:'#include "SDK\\amx\\amx.h"\n#include "SDK\\plugincommon.h"\n\n#include "Invoke.h"\n\n#include <string>\n#include <vector>\n\n#include <cstdlib>\n#include <ctime>\n\n\ntypedef void (*logprintf_t)(char* format, ...);\n\nlogprintf_t logprintf;\nextern void *pAMXFunctions;\n\n\nusing namespace std;\n\n\n// Esta fun\xe7\xe3o demonstra: como obter uma string (e seu comprimento) do PAWN.\n// Nativo do PAWN: native PrintPawnString(const str[]);\ncell AMX_NATIVE_CALL PrintPawnString(AMX* amx, cell* params)\n{\n    int\n        len = NULL,\n        ret = NULL;\n\n    cell *addr  = NULL;\n\n    // Obt\xe9m o endere\xe7o do nosso par\xe2metro de string (str) e, em seguida, obt\xe9m seu comprimento\n    amx_GetAddr(amx, params[1], &addr);\n    amx_StrLen(addr, &len);\n\n    // Se o comprimento da entrada n\xe3o for 0\n    if(len)\n    {\n        // Aumentamos o len porque queremos fazer espa\xe7o para o caractere nulo terminador quando alocamos mem\xf3ria.\n        // Al\xe9m disso, como o par\xe2metro de tamanho do GetString conta o caractere nulo, precisamos especificar o comprimento\n        // da string + 1; caso contr\xe1rio, nossa string ser\xe1 truncada para dar espa\xe7o ao caractere nulo (perder\xedamos 1 caractere).\n        len++;\n\n        // Aloca mem\xf3ria para segurar nossa string que estamos passando (str) e ent\xe3o "obtemos" a string usando nossa mem\xf3ria alocada para armazen\xe1-la.\n        char* text = new char[ len ];\n        amx_GetString(text, addr, 0, len);\n\n        // Usa logprintf para imprimir a string (text). N\xe3o usamos std::cout porque n\xe3o escreve no log do servidor (apenas na janela).\n        logprintf(text);\n\n        // Desaloca nossa mem\xf3ria...\n        delete[] text;\n    }\n    return 1;\n}\n\n// Esta fun\xe7\xe3o demonstra: como chamar um callback que est\xe1 em um script PAWN.\n// Nativo do PAWN: native EmitPawnCallback();\ncell AMX_NATIVE_CALL EmitPawnCallback(AMX* amx, cell* params)\n{\n    int idx;\n\n    const cell var = 3;\n    const cell arr[] = {100, 4, 33};\n    const string str = "Alguma mensagem aleat\xf3ria de C++.";\n\n\n    // Callback do Pawn: forward OnPawnCallbackEmitted(var, arr[], str[]);\n    // Encontra nosso callback e armazena seu lugar na tabela de fun\xe7\xf5es p\xfablicas (\xe9 o \xedndice) em nossa vari\xe1vel idx.\n    if(!amx_FindPublic(amx, "OnPawnCallbackEmitted", &idx))\n    {\n        cell\n            ret,\n            addr;\n\n        // Aqui empurramos nossos argumentos para nossa fun\xe7\xe3o. Note que se a fun\xe7\xe3o tem m\xfaltiplos argumentos, voc\xea tem que empurrar seus\n        // valores na ordem inversa! Por isso estamos empurrando a string primeiro, depois o array, e finalmente nosso inteiro.\n\n        amx_PushString(amx, &addr, NULL, str.c_str(), NULL, NULL);\n        //amx_PushArray(amx, NULL, NULL, arr, sizeof(arr) / sizeof(cell));\n\n        cell\n            amx_addr,\n            *phys_addr;\n\n        // Por alguma raz\xe3o amx_PushArray parece estar travando o servidor, e n\xe3o tenho ideia do porqu\xea. Meu uso deve ser completamente\n        // v\xe1lido segundo o guia dos implementadores, e o c\xf3digo em si. Como a fun\xe7\xe3o n\xe3o est\xe1 funcionando, teremos que\n        // usar o m\xe9todo antigo e alocar a mem\xf3ria, configur\xe1-la e empurr\xe1-la todos n\xf3s mesmos. Isso \xe9 bem direto. N\xf3s\n        // alocamos mem\xf3ria no heap usando amx_Allot (isso retorna 2 endere\xe7os - um da localiza\xe7\xe3o na m\xe1quina abstrata\n        // (amx_addr), e um relativo ao espa\xe7o de endere\xe7amento real do servidor (phsy_addr - que podemos usar em C++)). Depois de alocar\n        // mem\xf3ria, usamos memcpy para copiar a mem\xf3ria do nosso array para a localiza\xe7\xe3o de endere\xe7o f\xedsico (phys_addr).\n        amx_Allot(amx, sizeof(arr) / sizeof(cell), &amx_addr, &phys_addr);\n        memcpy(phys_addr, arr, sizeof(arr));\n        amx_Push(amx, amx_addr);\n\n        // Empurre nosso valor inteiro\n        amx_Push(amx, var);\n\n        // Execute nossa fun\xe7\xe3o usando nosso \xedndice obtido anteriormente.\n        // Nota: O segundo par\xe2metro desta fun\xe7\xe3o \xe9 o que o callback retornou (pode ser NULL se voc\xea n\xe3o estiver interessado em valores de retorno).\n        amx_Exec(amx, &ret, idx);\n\n        // Libere a mem\xf3ria que alocamos. A fun\xe7\xe3o amx_Alloc aloca mem\xf3ria no heap na m\xe1quina abstrata.\n        // As fun\xe7\xf5es amx_PushString e amx_PushArray usam essa fun\xe7\xe3o internamente, ent\xe3o voc\xea precisa liberar a mem\xf3ria toda vez que\n        // usar uma dessas fun\xe7\xf5es. NOTA: Usamos tanto amx_PushString quanto amx_PushArray, e ainda assim s\xf3 temos UMA chamada de libera\xe7\xe3o.\n        // Isso porque a mem\xf3ria no heap \xe9 alocada em ordem ascendente! amx_Release libera toda a mem\xf3ria acima de um determinado ponto\n        // (o segundo par\xe2metro, amx_addr - que \xe9 nossa vari\xe1vel addr). Desde que fazemos isso, s\xf3 armazenamos o endere\xe7o da chamada\n        // amx_PushString, pois ele deletar\xe1 tudo a partir desse ponto.\n        amx_Release(amx, addr);\n\n        // Imprime o valor de retorno (para completude).\n        logprintf("EmitPawnCallback NOTA: O callback OnPawnCallbackEmitted retornou %d!", ret);\n\n    }\n    return 1;\n}\n\n\n// Esta fun\xe7\xe3o demonstra: um m\xe9todo alternativo para obter strings do PAWN - e os riscos poss\xedveis que v\xeam com isso.\n// Nativo do PAWN: native PrintPawnString2(const str[]);\ncell AMX_NATIVE_CALL PrintPawnString2(AMX* amx, cell* params)\n{\n    // Este m\xe9todo N\xc3O \xe9 recomendado, pois o macro amx_StrParam usa a fun\xe7\xe3o alloca que N\xc3O \xe9 um padr\xe3o em C ou C++.\n    // Usar este m\xe9todo traz riscos de sobrecarregar a pilha (se voc\xea alocar grandes quantidades de mem\xf3ria) e tamb\xe9m\n    // traz o risco de bugs (esta fun\xe7\xe3o \xe9 dependente da m\xe1quina e do compilador - algumas implementa\xe7\xf5es s\xe3o ditas\n    // ser bugadas).\n\n    char* text = NULL;\n    amx_StrParam(amx, params[1], text);\n\n    // Verifica se o texto \xe9 nulo\n    if(text != NULL)\n    {\n        // Usa logprintf para imprimir a string (text). N\xe3o usamos std::cout porque n\xe3o escreve no log do servidor (apenas na janela).\n        logprintf(text);\n    }\n    return 1;\n}\n\n// Esta fun\xe7\xe3o demonstra: como modificar uma string do PAWN.\n// Nativo do PAWN: native SetPawnString(str[], len = sizeof(str));\ncell AMX_NATIVE_CALL SetPawnString(AMX* amx, cell* params)\n{\n    const string message = "Esta \xe9 uma string de C/++!!";\n    cell* addr = NULL;\n\n    // Obt\xe9m o endere\xe7o do nosso par\xe2metro de string (str) e armazena nossa mensagem\n    amx_GetAddr(amx, params[1], &addr);\n    amx_SetString(addr, message.c_str(), 0, 0, params[2]);\n    return 1;\n}\n\n// Esta fun\xe7\xe3o demonstra: como converter um float para um float do PAWN.\n// Nativo do PAWN: native Float:ReturnPawnFloatVal();\ncell AMX_NATIVE_CALL ReturnPawnFloatVal(AMX* amx, cell* params)\n{\n    // Como o PAWN \xe9 uma linguagem sem tipo, ele armazena tudo como um inteiro de 32 bits e depende de tags para lidar com dados especiais.\n    // Um n\xfamero de ponto flutuante n\xe3o \xe9 exce\xe7\xe3o a isso; ainda \xe9 um inteiro de 32 bits, mas possui uma tag de float para mostrar que n\xe3o deve\n    // ser tratado como um inteiro comum! Ent\xe3o, como fazemos a convers\xe3o de um float para um inteiro de 32 bits (para PAWN) sem perder dados?\n    // A resposta \xe9 o macro amx_ftoc!\n\n    // O macro amx_ftoc converte um float em uma c\xe9lula preservando seu padr\xe3o de bits (amx_ctof faz o inverso).\n    const float f = 22.624f;\n    return amx_ftoc(f);\n}\n\n// Esta fun\xe7\xe3o demonstra: como passar par\xe2metros por refer\xeancia.\n// Nativo do PAWN: native SetPawnReferenceVars(&value1, &Float:value2);\ncell AMX_NATIVE_CALL SetPawnReferenceVars(AMX* amx, cell* params)\n{\n    const int val = 65;\n    const float val2 = 84.54f;\n\n    cell* addr[2] = {NULL, NULL};\n\n    // Obt\xe9m os endere\xe7os de "value1" e "value2"\n    amx_GetAddr(amx, params[1], &addr[0]);\n    amx_GetAddr(amx, params[2], &addr[1]);\n\n    // Desreferencia nossos ponteiros e atribui nossos valores. Lembre-se de SEMPRE usar o macro "amx_ftoc" para converter floats em\n    // c\xe9lulas (o formato apropriado de float para PAWN)!\n    *addr[0] = val;\n    *addr[1] = amx_ftoc(val2\n\n);\n\n    return 1;\n}\n\n// Defina nossas fun\xe7\xf5es nativas aqui, incluindo todas as fun\xe7\xf5es que definimos acima.\nAMX_NATIVE_INFO Natives[] =\n{\n    {"PrintPawnString", PrintPawnString},\n    {"PrintPawnString2", PrintPawnString2},\n    {"EmitPawnCallback", EmitPawnCallback},\n    {"SetPawnString", SetPawnString},\n    {"ReturnPawnFloatVal", ReturnPawnFloatVal},\n    {"SetPawnReferenceVars", SetPawnReferenceVars},\n    {NULL, NULL}\n};\n\n// A fun\xe7\xe3o de inicializa\xe7\xe3o que define nosso logprintf e a estrutura nativa.\nextern "C" int AMXAPI\nAMX_Load(AMX *amx)\n{\n    // Define a fun\xe7\xe3o logprintf da SDK\n    pAMXFunctions = amx->GetNative;\n    logprintf = (logprintf_t)pAMXFunctions->GetFunction("logprintf");\n    // Registre nossas fun\xe7\xf5es nativas\n    return amx_Register(amx, Natives, -1);\n}\n'})}),"\n",(0,o.jsx)(a.h3,{id:"agradecimentos-especiais",children:"Agradecimentos Especiais"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"Agrade\xe7o \xe0 comunidade de desenvolvedores que contribu\xedram para o desenvolvimento deste plugin e forneceram feedback valioso."}),"\n",(0,o.jsxs)(a.li,{children:["Um agradecimento especial \xe0 ",(0,o.jsx)(a.a,{href:"https://forum.sa-mp.com/",children:"SAMP Forums"})," e \xe0 equipe de desenvolvimento da SA-MP por suas contribui\xe7\xf5es e suporte cont\xednuo."]}),"\n",(0,o.jsx)(a.li,{children:"Agrade\xe7o aos meus colegas desenvolvedores e amigos que sempre me apoiaram e incentivaram a continuar aprendendo e melhorando."}),"\n"]}),"\n",(0,o.jsx)(a.h2,{id:"special-thanks",children:"Special thanks"}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"RyDeR"})," - For contributing the pictures from his plugin tutorial."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Incognito"})," - For Invoke, information about ProcessTick, and for all the help over my time learning C++."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Zeex/0x5A656578"})," - For GDK (will be included some time), and for volunteering to answer questions about GDK."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Y_Less"})," - For being generally awesome and constantly helping me when ever im completely baffled."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Techboy123"})," - For a ton of productive chats, help, and for listening to my complaints."]})]})}function m(e={}){let{wrapper:a}={...(0,s.a)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},50065:function(e,a,n){n.d(a,{Z:()=>d,a:()=>i});var r=n(67294);let o={},s=r.createContext(o);function i(e){let a=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:a},e.children)}}}]);