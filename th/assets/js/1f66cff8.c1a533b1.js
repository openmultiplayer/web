"use strict";(self.webpackChunkomp_web=self.webpackChunkomp_web||[]).push([["43641"],{6051:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>a,toc:()=>l,default:()=>h,metadata:()=>s,assets:()=>d,contentTitle:()=>o});var s=JSON.parse('{"id":"scripting/language/reference/Appendices","title":"APPENDICES","description":"---","source":"@site/docs/scripting/language/reference/13-Appendices.md","sourceDirName":"scripting/language/reference","slug":"/scripting/language/reference/Appendices","permalink":"/th/docs/scripting/language/reference/Appendices","draft":false,"unlisted":false,"editUrl":"https://github.com/openmultiplayer/web/edit/master/frontend/docs/scripting/language/reference/13-Appendices.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Assorted-tips","permalink":"/th/docs/scripting/language/reference/Assorted-tips"},"next":{"title":"Control Structures","permalink":"/th/docs/scripting/language/ControlStructures"}}'),r=n(85893),i=n(50065);let a={},o="APPENDICES",d={},l=[{value:"Error and warning messages",id:"error-and-warning-messages",level:2},{value:"\u2022 Error categories",id:"-error-categories",level:3},{value:"\u2022 Errors",id:"-errors",level:3},{value:"\u2022 Fatal Errors",id:"-fatal-errors",level:3},{value:"\u2022 Warnings",id:"-warnings",level:3},{value:"The compiler",id:"the-compiler",level:2},{value:"\u2022 Usage",id:"-usage",level:3},{value:"\u2022 Input file",id:"-input-file",level:3},{value:"\u2022 Options",id:"-options",level:3},{value:"\u2022 Response file",id:"-response-file",level:3},{value:"\u2022 Configuration file",id:"-configuration-file",level:3},{value:"Rationale",id:"rationale",level:2},{value:"\u2217 136 Opcodes are defined at this writing, plus 20 \u201Cmacro\u201D opcodes. To exploit performance gains by forcing proper alignment of memory words (essential on ARM microprocessors), the current abstract machine uses 32-bit opcodes. There is no technical limit on the number of opcodes, but in the interest of a small footprint, the number of opcodes should be restricted.",id:"-136-opcodes-are-defined-at-this-writing-plus-20-macro-opcodes-to-exploit-performance-gains-by-forcing-proper-alignment-of-memory-words-essential-on-arm-microprocessors-the-current-abstract-machine-uses-32-bit-opcodes-there-is-no-technical-limit-on-the-number-of-opcodes-but-in-the-interest-of-a-small-footprint-the-number-of-opcodes-should-be-restricted",level:6},{value:"\u2020 You should see this remark in the context of my earlier assertion that many \u201CPAWN\u201D programmers will be novice programmers. In my (teaching) experience, novice programmers make many pointer errors, as opposed to experienced C/C++ programmers",id:"-you-should-see-this-remark-in-the-context-of-my-earlier-assertion-that-many-pawn-programmers-will-be-novice-programmers-in-my-teaching-experience-novice-programmers-make-many-pointer-errors-as-opposed-to-experienced-cc-programmers",level:6},{value:"\u2022 Practical design criterions",id:"-practical-design-criterions",level:3},{value:"License",id:"license",level:2}];function c(e){let t={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h6:"h6",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"appendices",children:"APPENDICES"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"error-and-warning-messages",children:"Error and warning messages"}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:"When the compiler finds an error in a file, it outputs a message giving, in this order:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"the name of the file"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"the line number were the compiler detected the error between parentheses, directly behind the filename"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"the error class (\u201Cerror\u201D, \u201Cfatal error\u201D or \u201Cwarning\u201D)"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"an error number"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"a descriptive error message"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"For example:"}),"\n",(0,r.jsx)(t.p,{children:'demo.p(3) : error 001: expected token: ";", but found "{"'}),"\n",(0,r.jsx)(t.p,{children:"Note: the line number given by the compiler may specify a position behind the\nactual error, since the compiler cannot always establish an error before having\nanalyzed the complete expression."}),"\n",(0,r.jsx)(t.p,{children:"After termination, the return code of the compiler is:"}),"\n",(0,r.jsx)(t.p,{children:"0   no errors \u2014there may be warnings, though\n1   errors found\n2   reserved\n3   aborted by user"}),"\n",(0,r.jsx)(t.p,{children:"These return codes may be checked within batch processors (such as the \u201Cmake\u201D utility)."}),"\n",(0,r.jsx)(t.h3,{id:"-error-categories",children:"\u2022 Error categories"}),"\n",(0,r.jsx)(t.p,{children:"Errors are separated into three classes:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Errors"}),(0,r.jsx)(t.td,{children:"Describe situations where the compiler is unable to generate appropriate code. Errors messages are numbered from 1 to 99."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Fatal errors"}),(0,r.jsx)(t.td,{children:"Fatal errors describe errors from which the compiler cannot recover. Parsing is aborted. Fatal error messages are numbered from 100 to 199."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Warnings"}),(0,r.jsx)(t.td,{children:"Warnings are displayed for unintended compiler assumptions and common mistakes. Warning messages are numbered from 200 to 299."})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"-errors",children:"\u2022 Errors"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Number"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"001"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"expected token:"})," ",(0,r.jsx)(t.em,{children:"token"}),", ",(0,r.jsx)(t.strong,{children:"but found"})," ",(0,r.jsx)(t.em,{children:"token"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A required token is omitted."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"002"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"only a single statement (or expression) can follow each \u201Ccase\u201D"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Every case in a switch statement can hold exactly one statement. To put multiple statements in a case, enclose these statements between braces (which creates a combound statement)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"003"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"declaration of a local variable must appear in a compound block"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The declaration of a local variable must appear between braces (\u201C{. . . }\u201D) at the active scope level."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"When the parser flags this error, a variable declaration appears as the only statement of a function or the only statement below an if, else, for, while or do statement. Note that, since local variables are accessible only from (or below) the scope that their declaration appears in, having a variable declaration as the only statement at any scope is useless."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"004"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"function"})," ",(0,r.jsx)(t.em,{children:"name"})," ",(0,r.jsx)(t.strong,{children:"is not implemented"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"There is no implementation for the designated function. The function may have been \u201Cforwardly\u201D declared \u2014or prototyped\u2014 but the full function definition including a statement, or statement block, is missing."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"005"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"function may not have arguments"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The function main() is the program entry point. It may not have arguments."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"006"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"must be assigned to an array"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"String literals or arrays must be assigned to an array. This error message may also indicate a missing index (or indices) at the array on the right side of the \u201C=\u201D sign."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"007"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"operator cannot be redefined"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Only a select set of operators may be redefined, this operator is not one of them. See page 86 for details."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"008"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"must be a constant expression; assumed zero"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The size of arrays and the parameters of most directives must be constant values."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"009"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"invalid array size (negative or zero)"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The number of elements of an array must always be 1 or more."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"010"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"illegal function or declaration"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The compiler expects a declaration of a global variable or of a function at the current location, but it cannot interpret it as such."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"011"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"invalid outside functions"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The instruction or statement is invalid at a global level. Local labels and (compound) statements are only valid if used within functions."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"012"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"invalid function call, not a valid address"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The symbol is not a function."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"013"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"no entry point (no public functions)"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The file does not contain a main function or any public function. The compiled file thereby does not have a starting point for the execution."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"014"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"invalid statement; not in switch"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The statements case and default are only valid inside a switch statement."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"015"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"\u201Cdefault\u201D must be the last clause in switch statement"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"pawn requires the default clause to be the last clause in a switch statement."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"016"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"multiple defaults in \u201Cswitch\u201D"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Each switch statement may only have one default clause."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"017"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"undefined symbol"})," ",(0,r.jsx)(t.em,{children:"symbol"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The symbol (variable, constant or function) is not declared."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"018"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"initialization data exceeds declared size"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsxs)(t.td,{children:["Initialization: 65 An array with an explicit size is initialized, but the number of initiallers exceeds the number of elements specified. For example, in \u201Carr[3]=",4,";\u201D the array is specified to have three elements, but there are four initiallers."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"019"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"not a label:"})," ",(0,r.jsx)(t.em,{children:"name"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A goto statement branches to a symbol that is not a label."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"020"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"invalid symbol name"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A symbol may start with a letter, an underscore or an \u201Cat\u201D sign (\u201C@\u201D) and may be followed by a series of letters, digits, underscore characters and \u201C@\u201D characters."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"021"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"symbol already defined:"})," ",(0,r.jsx)(t.em,{children:"identifier"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The symbol was already defined at the current level."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"022"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"must be lvalue (non-constant)"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The symbol that is altered (incremented, decremented, assigned a value, etc.) must be a variable that can be modified (this kind of variable is called an lvalue). Functions, string literals, arrays and constants are no lvalues. Variables declared with the \u201Cconst\u201D attribute are no lvalues either."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"023"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"array assignment must be simple assignment"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"When assigning one array to another, you cannot combine an arithmetic operation with the assignment (e.g., you cannot use the \u201C+=\u201D operator)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"024"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"\u201Cbreak\u201D or \u201Ccontinue\u201D is out of context"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The statements break and continue are only valid inside the context of a loop (a do, for or while statement). Unlike the languages C/C\u207A\u207A and Java, break does not jump out of a switch statement."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"025"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"function heading differs from prototype"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The number of arguments given at a previous declaration of the function does not match the number of arguments given at the current declaration."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"026"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"no matching \u201C#if...\u201D"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The directive #else or #endif was encountered, but no matching #if directive was found."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"027"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"invalid character constant"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"One likely cause for this error is the occurrence of an unknown escape sequence, like \u201C\\x\u201D. Putting multiple characters between single quotes, as in \u2019abc\u2019 also issues this error message. A third cause for this error is a situation where a character constant was expected, but none (or a non-character expression) were provided."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"028"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"invalid subscript (not an array or too many subscripts):"})," ",(0,r.jsx)(t.em,{children:"identifier"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The subscript operators \u201C[\u201D and \u201C]\u201D are only valid with arrays. The number of square bracket pairs may not exceed the number of dimensions of the array."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"029"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"invalid expression, assumed zero"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The compiler could not interpret the expression."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"030"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"compound statement not closed at the end of file"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"An unexpected end of file occurred. One or more compound statements are still unfinished (i.e. the closing brace \u201C \u201D has not been found)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"031"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"unknown directive"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The character \u201C#\u201D appears first at a line, but no valid directive was specified."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"032"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"array index out of bounds"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The array index is larger than the highest valid entry of the array."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"033"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"array must be indexed"})," (",(0,r.jsx)(t.strong,{children:"variable"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"An array as a whole cannot be used in a expression; you must indicate an element of the array between square brackets."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"034"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"argument does not have a default value"})," (",(0,r.jsx)(t.strong,{children:"argument"})," ",(0,r.jsx)(t.em,{children:"index"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"You can only use the argument placeholder when the function definition specifies a default value for the argument."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"035"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"argument type mismatch"})," (",(0,r.jsx)(t.strong,{children:"argument"})," ",(0,r.jsx)(t.em,{children:"index"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The argument that you pass is different from the argument that the function expects, and the compiler cannot convert the passed-in argument to the required type. For example, you cannot pass the literal value \u201C1\u201D as an argument when the function expects an array or a reference."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"036"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"empty statement"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The line contains a semicolon that is not preceded by an expression. pawn does not support a semicolon as an empty statement, use an empty compound block instead."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"037"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"invalid string (possibly non-terminated string)"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A string was not well-formed; for example, the final quote that ends a string is missing, or the filename for the #include directive was not enclosed in double quotes or angle brackets."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"038"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"extra characters on line"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"There were trailing characters on a line that contained a directive (a directive starts with a # symbol, see page 117)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"039"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"constant symbol has no size"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A variable has a size (measured in a number of cells), a constant has no size. That is, you cannot use a (symbolic) constant with the sizeof operator, for example."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"040"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"duplicate \u201Ccase\u201D label"})," (",(0,r.jsx)(t.strong,{children:"value"})," ",(0,r.jsx)(t.em,{children:"value"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A preceding \u201Ccase label\u201D in the list of the switch statement evaluates to the same value."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"041"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"invalid ellipsis, array size is not known"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"You used a syntax like \u201Carr[] = { 1, ... };\u201D, which is invalid, because the compiler cannot deduce the size of the array from the declaration."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"042"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"invalid combination of class specifiers"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A function or variable is denoted as both \u201Cpublic\u201D and \u201Cnative\u201D, which is unsupported. Other compinations may also be unsupported; for example, a function cannot be both \u201Cpublic\u201D and \u201Cstock\u201D (a variable may be declared both \u201Cpublic\u201D and \u201Cstock\u201D)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"043"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"character constant exceeds range for packed string"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Usually an attempt to store a Unicode character in a packed string where a packed character is 8-bits."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"044"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"mixing named and positional parameters"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"You must either use named parameters or positional parameters for all parameters of the function."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"045"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"too many function arguments"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The maximum number of function arguments is currently limited to 64."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"046"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"unknown array size"})," (",(0,r.jsx)(t.strong,{children:"variable"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"For array assignment, the size of both arrays must be explicitly defined, also if they are passed as function arguments."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"047"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"array sizes do not match, or destination array is too small"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"For array assignment, the arrays on the left and the right side of the assignment operator must have the same number of dimensions. In addition:"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"- for multi-dimensional arrays, both arrays must have the same size;"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"- for single arrays with a single dimension, the array on the left side of the assignment operator must have a size that is equal or bigger than the one on the right side."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"When passing arrays to a function argument, these rules also hold for the array that is passed to the function (in the function call) versus the array declared in the function definition."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"When a function returns an array, all return statements must specify an array with the same size and dimensions."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"048"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"array dimensions do not match"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"For an array assignment, the dimensions of the arrays on both sides of the \u201C=\u201D sign must match; when passing arrays to a function argument, the arrays passed to the function (in the function call) must match with the definition of the function arguments."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"When a function returns an array, all return statements must specify an array with the same size and dimensions."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"049"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"invalid line continuation"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A line continuation character (a backslash at the end of a line) is at an invalid position, for example at the end of a file or in a single line comment."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"050"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"invalid range"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A numeric range with the syntax \u201Cn1 .. n2\u201D, where n1 and n2 are numeric constants, is invalid. Either one of the values in not a valid number, or n1 is not smaller than n2."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"051"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"invalid subscript, use \u201C[ ]\u201D operators on major dimensions"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"You can use the \u201Carray character index\u201D operator (braces: \u201C{ }\u201D only for the last dimension. For other dimensions, you must use the cell index operator (square brackets: \u201C[ ]\u201D)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"052"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"multi-dimensional arrays must be fully initialized"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"If an array with more than one dimension is initialized at its declaration, then there must be equally many literal vectors/subarrays at the right of the equal sign (\u201C=\u201D) as specified for the major dimension(s) of the array."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"053"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"exceeding maximum number of dimensions"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The current implementation of the pawn compiler only supports arrays with one or two dimensions."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"054"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"unmatched closing brace"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A closing brace (\u201C}\u201D) was found without matching opening brace (\u201C{\u201D)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"055"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"start of function body without function header"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"An opening brace (\u201C{\u201D) was found outside the scope of a function. This may be caused by a semicolon at the end of a preceding function header."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"056"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"local variables and function arguments cannot be public"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A local variable or a function argument starts with the character \u201C@\u201D, which is invalid."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"057"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Unfinished expression before compiler directive"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Compiler directives may only occur between statements, not inside a statement. This error typically occurs when an expression statement is split over multiple lines and a compiler directive appears between the start and the end of the expression. This is not supported."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"058"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"duplicate argument; same argument is passed twice"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"In the function call, the same argument appears twice, possibly through a mixture of named and positional parameters."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"059"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"function argument may not have a default value"})," (",(0,r.jsx)(t.strong,{children:"variable"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"All arguments of public functions must be passed explicitly. Public functions are typically called from the host application, who has no knowledge of the default parameter values. Arguments of user defined operators are implied from the expression and cannot be inferred from the default value of an argument."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"060"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"multiple \u201C#else\u201D directives between \u201C#if . . . #endif"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Two or more #else directives appear in the body between the matching #if and #endif."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"061"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"\u201C#elseif\u201D directive follows an \u201C#else\u201D directive"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"All #elseif directives must appear before the #else directive. This error may also indicate that an #endif directive for a higher level is missing."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"062"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"number of operands does not fit the operator"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"When redefining an operator, the number of operands that the operator has (1 for unary operators and 2 for binary operators) must be equal to the number of arguments of the operator function."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"063"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"operator requires that the function result has a \u201Cbool\u201D tag"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Logical and relational operators are defined as having a result that is either true (1) or false (0) and having a \u201Cbool\u201D tag. A user defined operator should adhere to this definition."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"064"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"cannot change predefined operators"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"One cannot define operators to work on untagged values, for example, because pawn already defines this operation."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"065"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"function argument may only have a single tag"})," (",(0,r.jsx)(t.strong,{children:"argument"})," ",(0,r.jsx)(t.em,{children:"number"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"In a user defined operator, a function argument may not have multiple tags."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"066"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"function argument may not be a reference argument or an array"})," (",(0,r.jsx)(t.strong,{children:"argument"})," ",(0,r.jsx)(t.em,{children:"number"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"In a user defined operator, all arguments must be cells (non-arrays) that are passed \u201Cby value\u201D."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"067"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"variable cannot be both a reference and an array"})," (",(0,r.jsx)(t.strong,{children:"variable"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A function argument may be denoted as a \u201Creference\u201D or as an array, but not as both."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"068"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"invalid rational number precision in #pragma"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The precision was negative or too high. For floating point rational numbers, the precision specification should be omitted."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"069"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"rational number format already defined"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"This #pragma conflicts with an earlier #pragma that specified a different format."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"070"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"rational number support was not enabled"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A rational literal number was encountered, but the format for rational numbers was not specified."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"071"}),(0,r.jsxs)(t.td,{children:["u",(0,r.jsx)(t.strong,{children:"ser-defined operator must be declared before use"})," (",(0,r.jsx)(t.strong,{children:"function"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Like a variable, a user-defined operator must be declared before its first use. This message indicates that prior to the declaration of the user-defined operator, an instance where the operator was used on operands with the same tags occurred. This may either indicate that the program tries to make mixed use of the default operator and a user-defined operator (which is unsupported), or that the user-defined operator must be \u201Cforwardly declared\u201D."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"072"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"\u201Csizeof \u201D operator is invalid on \u201Cfunction\u201D symbols"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"You used something like \u201Csizeof MyCounter\u201D where the symbol \u201CMyCounter\u201D is not a variable, but a function. You cannot request the size of a function."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"073"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"function argument must be an array"})," (",(0,r.jsx)(t.strong,{children:"argument"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The function argument is a constant or a simple variable, but the function requires that you pass an array."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"074"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"#define pattern must start with an alphabetic character"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Any pattern for the #define directive must start with a letter, an underscore (\u201C_\u201D) or an \u201C@\u201D-character. The pattern is the first word that follows the #define keyword."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"075"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"input line too long (after substitutions)"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Either the source file contains a very long line, or text substitutions make a line that was initially of acceptable length grow beyond its bounds. This may be caused by a text substitution that causes recursive substitution (the pattern matching a portion of the replacement text, so that this part of the replacement text is also matched and replaced, and so forth)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"076"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"syntax error in the expression, or invalid"})," ",(0,r.jsx)(t.em,{children:"function call"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The expression statement was not recognized as a valid statement (so it is a \u201Csyntax error\u201D). From the part of the string that was parsed, it looks as if the source line contains a function call in a \u201Cprocedure call\u201D syntax (omitting the parentheses), but the function result is used \u2014assigned to a variable, passed as a parameter, used in an expession. . ."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"077"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"malformed UTF-8 encoding, or corrupted file: filename"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The file starts with an UTF-8 signature, but it contains encodings that are invalid UTF-8. If the source file was created by an editor or converter that supports UTF-8, the UTF-8 support is non-conforming."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"078"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"function uses both \u201Creturn\u201D and \u201Creturn \xa1value\xbf\u201D"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The function returns both with and without a return value. The function should be consistent in always returning with a function result, or in never returning a function result."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"079"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"inconsistent return types (array & non-array)"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The function returns both values and arrays, which is not allowed. If a function returns an array, all return statements must specify an array (of the same size and dimensions)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"080"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"unknown symbol, or not a constant symbol"})," (",(0,r.jsx)(t.strong,{children:"symbol"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Where a constant value was expected, an unknown symbol or a non-constant symbol (variable) was found."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"081"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"cannot take a tag as a default value for an indexed array parameter"})," (",(0,r.jsx)(t.strong,{children:"symbol"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The tagof operator was used on an array parameter where the array also had an index. This is unsupported."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"082"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"user-defined operators and native functions may not havestates"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Only standard and public functions may have states."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"083"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"a function or variable may only belong to a single automaton"})," (",(0,r.jsx)(t.strong,{children:"symbol"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"There are multiple automatons in the state declaration for the indicated function or variable, which is not supported. In the case of a function: all instances of the function must belong to the same automaton. In the case of a variable: it is allowed to have several variables with the same name belonging to different automatons, but only in separate declarations \u2014these are distinct variables."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"084"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"state conflict: one of the states is already assigned to another implementation"})," (",(0,r.jsx)(t.strong,{children:"symbol"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The specified state appears in the state specifier of two implementations of the same function."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"085"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"no states are defined for symbol name"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"When this error occurs on a function, this function has a fall-back implementation, but no other states. If the error refers to a variable, this variable does not have a list of states between the < and > characters. Use a state-less function ir variable instead."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"086"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"unknown automaton name"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The \u201Cstate\u201D statement refers to an unknown automaton."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"087"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"unknown state name for automaton name"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The \u201Cstate\u201D statement refers to an unknown state (for the specified automaton)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"088"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"public variables and local variables may not have states"})," (",(0,r.jsx)(t.strong,{children:"symbol"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Only standard (global) variables may have a list of states (and an automaton) at the end of a declaration."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"089"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"state variables may not be initialized"})," (",(0,r.jsx)(t.strong,{children:"symbol"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Variables with a state list attached may not have initializers. State variables should always be explicitly initialized, as their initial value is indeterminate."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"090"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"public functions may not return arrays"})," (",(0,r.jsx)(t.strong,{children:"symbol"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A public function may not return an array. Returning arrays is allowed only for normal functions."})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"-fatal-errors",children:"\u2022 Fatal Errors"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Number"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"100"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"cannot read from file:"})," ",(0,r.jsx)(t.em,{children:"filename"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The compiler cannot find the specified file or does not have access to it."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"101"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"cannot write to file:"})," ",(0,r.jsx)(t.em,{children:"filename"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The compiler cannot write to the specified output file, probably caused by insufficient disk space or restricted access rights (the file could be read-only, for example)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"102"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"table overflow:"})," ",(0,r.jsx)(t.em,{children:"table name"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"An internal table in the pawn parser is too small to hold the required data. Some tables are dynamically growable, which means that there was insufficient memory to resize the table. The \u201Ctable name\u201D is one of the following:"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"\u201Cstaging buffer\u201D: the staging buffer holds the code generated for an expression before it is passed to the peephole optimizer. The staging buffer grows dynamically, so an overflow of the staging buffer basically is an \u201Cout of memory\u201D error."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"\u201Cloop table\u201D: the loop table is a stack used with nested do, for, and while statements. The table allows nesting of these statements up to 24 levels."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"\u201Cliteral table\u201D: this table keeps the literal constants (numbers, strings) that are used in expressions and as initiallers for arrays. The literal table grows dynamically, so an overflow of the literal table basically is an \u201Cout of memory\u201D error."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"\u201Ccompiler stack\u201D: the compiler uses a stack to store temporary information it needs while parsing. An overflow of this stack is probably caused by deeply nested (or recursive) file inclusion. The compiler stack grows dynamically, so an overflow of the compiler stack basically is an \u201Cout of memory\u201D error."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"\u201Coption table\u201D: in case that there are more options on the command line or in the response file than the compiler can cope with."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"103"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"insufficient memory"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"General \u201Cout of memory\u201D error."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"104"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"invalid assembler instruction symbol"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"An invalid opcode in an #emit directive."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"105"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"numeric overflow, exceeding capacity"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A numeric constant, notably a dimension of an array, is too large for the compiler to handle. For example, when compiled as a 16-bit application, the compiler cannot handle arrays with more than 32767 elements."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"106"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"compiled script exceeds the maximum memory size"})," (",(0,r.jsx)(t.em,{children:"number"})," ",(0,r.jsx)(t.strong,{children:"bytes"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The memory size for the abstract machine that is needed to run the script exceeds the value set with #pragma amxlimit. This means that the script is too large to be supported by the host. You might try reducing the script\u2019s memory requirements by:"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"- setting a smaller stack/heap area \u2014see #pragma dynamic at page 121;"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"- using packed strings instead of unpacked strings \u2014see pages 99 and 137;"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"- putting repeated code in separate functions;"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"- putting repeated data (strings) in global variables;"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"- trying to find more compact algorithms to perform the same task."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"107"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"too many error/warning messages on one line"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A single line that causes several error/warning messages is often an indication that the pawn parser is unable to \u201Crecover\u201D from an earlier error. In this situation, the parser is unlikely to make any sense of the source code that follows \u2014producing only (more) inappropriate error messages. Therefore, compilation is halted."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"108"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"codepage mapping file not found"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The file for the codepage translation that was specified with the -c compiler option or the #pragma codepage directive could not be loaded."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"109"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"invalid path:"})," ",(0,r.jsx)(t.em,{children:"path name"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A path, for example for include files or codepage files, is invalid."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"110"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"assertion failed:"})," ",(0,r.jsx)(t.em,{children:"expression"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Compile-time assertion failed."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"111"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"user error:"})," ",(0,r.jsx)(t.em,{children:"message"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The parser fell on an #error directive."})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"-warnings",children:"\u2022 Warnings"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Number"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"200"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"symbol is truncated to"})," ",(0,r.jsx)(t.em,{children:"number"})," ",(0,r.jsx)(t.strong,{children:"characters"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The symbol is longer than the maximum symbol length. The maximum length of a symbol depends on wether the symbol is native, public or neither. Truncation may cause different symbol names to become equal, which may cause error 021 or warning 219."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"201"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"redefinition of constant/macro"})," (",(0,r.jsx)(t.strong,{children:"symbol"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The symbol was previously defined to a different value, or the text substitution macro that starts with the prefix name was redefined with a different substitution text."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"202"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"number of arguments does not match definition"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"At a function call, the number of arguments passed to the function (actual arguments) differs from the number of formal arguments declared in the function heading. To declare functions with variable argument lists, use an ellipsis (...) behind the last known argument in the function heading; for example: print(formatstring,...); (see page 80)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"203"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"symbol is never used:"})," ",(0,r.jsx)(t.em,{children:"identifier"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A symbol is defined but never used. Public functions are excluded from the symbol usage check (since these may be called from the outside)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"204"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"symbol is assigned a value that is never used:"})," ",(0,r.jsx)(t.em,{children:"identifier"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A value is assigned to a symbol, but the contents of the symbol are never accessed."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"205"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"redundant code: constant expression is zero"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Where a conditional expression was expected, a constant expression with the value zero was found, e.g. \u201Cwhile (0)\u201D or \u201Cif (0)\u201D."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The the conditional code below the test is never executed, and it is therefore redundant."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"206"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"redundant test: constant expression is non-zero"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Where a conditional expression was expected, a constant expression with a non-zero value was found, e.g. if (1). The test is redundant, because the conditional code is always executed."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"207"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"unknown \u201C#pragma\u201D"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The compiler ignores the pragma. The #pragma directives may change between compilers of different vendors and between different versions of a compiler of the same version."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"208"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"function with tag result used before definition, forcing reparse"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"When a function is \u201Cused\u201D (invoked) before being declared, and that function returns a value with a tag name, the parser must make an extra pass over the source code, because the presence of the tag name may change the interpretation of operators (in the presence of user-defined operators). You can speed up the parsing/compilation process by declaring the relevant functions before using them."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"209"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"function should return a value"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The function does not have a return statement, or it does not have an expression behind the return statement, but the function\u2019s result is used in a expression."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"210"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"possible use of symbol before initialization:"})," ",(0,r.jsx)(t.em,{children:"identifier"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A local (uninitialized) variable appears to be read before a value is assigned to it. The compiler cannot determine the actual order of reading from and storing into variables and bases its assumption of the execution order on the physical appearance order of statements an expressions in the source file."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"211"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"possibly unintended assignment"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Where a conditional expression was expected, the assignment operator (=) was found instead of the equality operator (==). As this is a frequent mistake, the compiler issues a warning. To avoid this message, put parentheses around the expression, e.g. if ( (a=2) )."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"212"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"possibly unintended bitwise operation"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Where a conditional expression was expected, a bitwise operator (& or |) was found instead of a Boolean operator (&& or ||). In situations where a bitwise operation seems unlikely, the compiler issues this warning. To avoid this message, put parentheses around the expression."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"213"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"tag mismatch"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A tag mismatch occurs when:"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"- assigning to a tagged variable a value that is untagged or that has a different tag"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"- the expressions on either side of a binary operator have different tags"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"- in a function call, passing an argument that is untagged or that has a different tag than what the function argument was defined with"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"- indexing an array which requires a tagged index with no tag or a wrong tag name"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"214"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"possibly a \u201Cconst\u201D array argument was intended:"})," ",(0,r.jsx)(t.em,{children:"identifier"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Arrays are always passed by reference. If a function does not modify the array argument, however, the compiler can sometimes generate more compact and quicker code if the array argument is specifically marked as \u201Cconst\u201D."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"215"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"expression has no effect"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The result of the expression is apparently not stored in a variable or used in a test. The expression or expression statement is therefore redundant."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"216"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"nested comment"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"PAWN does not support nested comments."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"217"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"loose indentation"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Statements at the same logical level do not start in the same column; that is, the indents of the statements are different. Although pawn is a free format language, loose indentation frequently hides a logical error in the control flow."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The compiler can also incorrectly assume loose indentation if the tab size with which you indented the source code differs from the assumed size, see #pragma tabsize on page 122 or the compiler option -t on page 169."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"218"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"old style prototypes used with optional semicolon"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"When using \u201Coptional semicolons\u201D, it is preferred to explicitly declare forward functions with the forward keyword than using terminating semicolon."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"219"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"local variable identifier shadows a symbol at a preceding level"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A local variable has the same name as a global variable, a function, a function argument, or a local variable at a lower precedence level. This is called \u201Cshadowing\u201D, as the new local variable makes the previously defined function or variable inaccessible."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Note: if there are also error messages further on in the script about missing variables (with these same names) or brace level problems, it could well be that the shadowing warnings are due to these syntactical and sematical errors. Fix the errors first before looking at the shadowing warnings."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"220"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"expression with tag override must appear between parentheses"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"In a case statement and in expressions in the conditional operator (\u201C ? : \u201D), any expression that has a tag override should be enclosed between parentheses, to avoid the colon to be misinterpreted as a separator of the case statement or as part of the conditional operator."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"221"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"label name identifier shadows tag name"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A code label (for the goto instruction) has the same name as a previously defined tag. This may indicate a faultily applied tag override; a typical case is an attempt to apply a tag override on the variable on the left of the = operator in an assignment statement."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"222"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"number of digits exceeds rational number precision"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A literal rational number has more decimals in its fractional part than the precision of a rational number supports. The remaining decimals are ignored."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"223"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"redundant \u201Csizeof \u201D: argument size is always 1"})," (",(0,r.jsx)(t.strong,{children:"symbol"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A function argument has a as its default value the size of another argument of the same function. The \u201Csizeof\u201D default value is only useful when the size of the referred argument is unspecified in the declaration of the function; i.e., if the referred argument is an array."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"224"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"indeterminate array size in \u201Csizeof \u201D expression"})," (",(0,r.jsx)(t.strong,{children:"symbol"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The operand of the sizeof operator is an array with an unspecified size. That is, the size of the variable cannot be determined at compile time. If used in an \u201Cif\u201D instruction, consider a conditionally compiled section, replacing if by #if."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"225"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"unreachable code"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The indicated code will never run, because an instruction before (above) it causes a jump out of the function, out of a loop or elsewhere. Look for return, break, continue and goto instructions above the indicated line."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"226"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"a variable is assigned to itself"})," (",(0,r.jsx)(t.strong,{children:"symbol"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"There is a statement like \u201Cx = x\u201D in the code. The parser checks for self assignments after performing any text and constant substitutions, so the left and right sides of an assignment may appear to be different at first sight. For example, if the symbol \u201CTWO\u201D is a constant with the value 2, then \u201Cvar[TWO] = var[2]\u201D is also a self-assignment."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Self-assignments are, of course, redundant, and they may hide an error (assignment to the wrong variable, error in declaring constants)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Note that the pawn parser is limited to performing \u201Cstatic checks\u201D only. In this case it means that it can only compare array assignments for self-assignment with constant array indices."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"227"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"more initiallers than enum fields"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"An array whose size is declared with an enum symbol contains more values/fields as initiallers than the enumeration defines."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"228"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"length of initialler exceeds size of the enum field"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"An array whose size is declared with an enum symbol, and the relevant enumeration field has a size. The initialler in the array contains more values than the size of the enumeration field allows."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"229"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"index tag mismatch"})," (",(0,r.jsx)(t.strong,{children:"symbol"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"When indexing an array, the expression used as the index has a different tag than what the one in the declaration of the array. See pages 29 and 68 for an explanation and examples."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"230"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"no implementation for state"})," ",(0,r.jsx)(t.em,{children:"name"})," ",(0,r.jsx)(t.strong,{children:"in function"})," ",(0,r.jsx)(t.em,{children:"name"})," ",(0,r.jsx)(t.strong,{children:", no fall-back"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A function is lacking an implementation for the indicated state. The compiler cannot (statically) check whether the function will ever be called in that state, and therefore it issues this warning. When the function would be called for the state for which no implementation exists, the abstract machine aborts with a run time error."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"See page 83 on how to specify a fall-back function, and page 44 for a description and an example."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"231"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"state specification on forward declaration is ignored"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A state specification is redundant on forward declarations. The function signature must be equal for all states. Only the implementations of the function are state-specific."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"232"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"compaction buffer overflow"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Compact encoding may in some particular cases result in files that would actually be bigger than the non-compact encoding. The abstract machine cannot handle this, as it unpacks the P-code \u201Cin place\u201D. When the compiler deticts this situation, it re-builds the file with compact encoding switched off. To avoid this warning, force building the file with plain (\u201Cnon-compact\u201D) encoding \u2014see page 120."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"233"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"state variable name shadows a global variable"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The state variable has the same name as a global variable (without state specifiers). This means that the global variable is inaccessible for a function with one of the same states as those of the variable."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"234"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"function is depricated"})," (",(0,r.jsx)(t.strong,{children:"symbol"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The script uses a function which as marked as \u201Cdepricated\u201D. The host application can mark (native) functions as depricated when better alternatives for the function are available or if the function may not be supported in future versions of the host application."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"235"}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.strong,{children:"call to undeclared public function"})," (",(0,r.jsx)(t.strong,{children:"symbol"})," ",(0,r.jsx)(t.em,{children:"name"}),")"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The script defines a public function, but no forward declaration of this function is present. Possibly the function name was written incorrectly. The requirement for forward declarations of public functions guards against a common error."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"236"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"unknown parameter in substitution (incorrect #define pattern)"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A #define pattern contains a parameter in the replacement (e.g. \u201C%1\u201D, but one in the match pattern. See page 93 for the preprocessor syntax."})]})]})]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"Pitfalls: 134"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"Compound statement: 112"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"Compound statement: 112"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"Forward declaration: 82"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"Symbol name syntax: 97"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"Escape sequence: 99"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"Empty compound block: 112"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"Single line comment: 97"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"Named versus positional parameters: 74"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"#pragma rational: 121"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"Forward declaration: 82"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"State specifiers: 83"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"Fall-back: 83"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"See also #pragma"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"amxlimit on page 119"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"#pragma codepage: 120"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"#assert directive: 117"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"#error directive: 117"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"User-defined operators: 86"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"Forward declaration: 82"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"Tags are discussed on page 68"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"#if . . . #else . . . #endif: 117"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"State specifiers: 83"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"the-compiler",children:"The compiler"}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:"Many applications that embed the PAWN scripting language use the stand-\nalone compiler that comes with the PAWN toolkit. The PAWN compiler is a\ncommand-line utility, meaning that you must run it from a \u201Cconsole window\u201D,\na terminal/shell, or a \u201CDOS box\u201D (depending on how your operating system calls it)."}),"\n",(0,r.jsx)(t.h3,{id:"-usage",children:"\u2022 Usage"}),"\n",(0,r.jsxs)(t.p,{children:["Assuming that the command-line PAWN compiler is called \u201C",(0,r.jsx)(t.em,{children:"pawncc"}),"\u201D (Unix/\nLinux) or \u201C",(0,r.jsx)(t.em,{children:"pawncc.exe"}),"\u201D (DOS/Windows), the command line syntax is:"]}),"\n",(0,r.jsx)(t.p,{children:"pawncc <filename> [more filenames...] [options]"}),"\n",(0,r.jsxs)(t.p,{children:["The input file name is any legal filename. If no extension is given, \u201C",(0,r.jsx)(t.em,{children:".pawn"}),"\u201D\nor \u201C.p\u201D is assumed. The compiler creates an output file with, by default, the\nsame name as the input file and the extension \u201C.amx\u201D."]}),"\n",(0,r.jsx)(t.p,{children:"After switching to the directory with the sample programs, the command:"}),"\n",(0,r.jsx)(t.p,{children:"pawncc hello"}),"\n",(0,r.jsx)(t.p,{children:"should compile the very first \u201Chello world\u201D example (page 5). Should, because\nthe command implies that:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["the operating system can locate the \u201C",(0,r.jsx)(t.em,{children:"pawncc"}),"\u201D program \u2014you may need to add it to the search path;"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"the PAWN compiler is able to determine its own location in the file system so that it can locate the include files \u2014a few operating systems do not support this and require that you use the -i option (see below)."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"-input-file",children:"\u2022 Input file"}),"\n",(0,r.jsxs)(t.p,{children:["The input file for the PAWN compiler, the \u201Csource code\u201D file for the",(0,r.jsx)(t.br,{}),"\n","script/program, must be a plain text file. All reserved words and all symbol names\n(names for variables, functions, symbolic constants, tags, . . . ) must",(0,r.jsx)(t.br,{}),"\n","use the ascii character set. Literal strings, i.e text between quotes, may be in\nextended ascii, such as one of the sets standardized in the ISO 8859 norm \u2014ISO 8859-1\nis the well known \u201CLatin 1\u201D set."]}),"\n",(0,r.jsxs)(t.p,{children:["The PAWN compiler also supports UTF-8 encoded text files, which are practical\nin an environment based on Unicode or UCS-4. The PAWN compiler only\nrecognizes UTF-8 encoded characters inside unpacked strings and character\nconstants. The compiler interprets the syntax rules for UTF-8 files",(0,r.jsx)(t.br,{}),"\n","strictly; non-conforming UTF-8 files are not recognized. The input file may have, but\ndoes not require, a \u201CByte Order Mark\u201D signature; the compiler\nrecognizes the UTF-8 format based on the file\u2019s content."]}),"\n",(0,r.jsx)(t.h3,{id:"-options",children:"\u2022 Options"}),"\n",(0,r.jsxs)(t.p,{children:["Options start with a dash (\u201C-\u201D) or, on Microsoft Windows and DOS, with a\nforward slash (\u201C/\u201D). In other words, all platforms accept an option written\nas \u201C-a\u201D (see below for the purpose of this option) and the",(0,r.jsx)(t.br,{}),"\n","DOS/Windows platforms accept \u201C/a\u201D as an alternative way to write \u201C-a\u201D."]}),"\n",(0,r.jsx)(t.p,{children:"All options should be separated by at least one space."}),"\n",(0,r.jsx)(t.p,{children:"Many options accept a value \u2014which is sometimes mandatory. A value may be\nseparated from the option letter by a colon or an equal sign (a \u201C:\u201D and a \u201C=\u201D\nrespectively), or the value may be glued to the option letter. Three equivalent\noptions to set the debug level to two are thus:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"-d2"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"-d:2"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"-d=2"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"The options are:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Option"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-a"}),(0,r.jsx)(t.td,{children:"Assembler: generate a text file with the pseudo-assembler code for the PAWN abstract machine, instead of binary code."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-C+/-"}),(0,r.jsx)(t.td,{children:"Compact encoding of the binary file, which reduces the size a the output file typically to less than half the original size. Use -C+ to enable it and -C- to revert to \u201Cplain\u201D encoding. The option -C (without + or \u2212 suffix) toggles the current setting."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-cname"}),(0,r.jsx)(t.td,{children:"Codepage: set the codepage for translating the source file from extended ascii to Unicode/UCS-4. The default is no translation. The name parameter can specify a full path to a \u201Cmapping file\u201D or just the identifier of the codepage \u2014in the latter case, the compiler prefixes the identifier with the letters \u201Ccp\u201D, appends the extension \u201C.txt\u201D and loads the mapping file from a system directory."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-Dpath"}),(0,r.jsx)(t.td,{children:"Directory: the \u201Cactive\u201D directory, where the compiler should search for its input files and store its output files."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"This option is not supported on every platform. To verify whether the PAWN compiler supports this option, run the compiler without any option or filename on the command line. The compiler will then list its usage syntax and all available options in alphabetical order. If the -D switch is absent, the option is not available."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-dlevel"}),(0,r.jsx)(t.td,{children:"Debug level: 0 = none, 1 = bounds checking and assertions only, 2 = full symbolic information, 3 = full symbolic information and optimizations disabled (same as the combination -d2 and -O0)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"When the debug level is 2 or 3, the PAWN compiler also prints the estimated number of stack/heap space required for the program."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-efilename"}),(0,r.jsx)(t.td,{children:"Error file: set the name of the file into which the compiler must write any warning and error messages; when set, there is no output to the screen."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-Hvalue"}),(0,r.jsx)(t.td,{children:"\u201CHWND\u201D (Microsoft Windows version only): the compiler can optionally post a message to the specified window handle upon completion of the P-code generation. Host applications that invoke the PAWN compiler can wait for the arrival of this message or signal the user of the completion of the compile."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The message number that is sent to the window is created with the Microsoft Windows SDK function RegisterWindowMessage using the name \u201CPawnNotify\u201D. The wParam of the message holds the compiler return code: 0 = success, 1 = warnings, 2 = errors (plus possibly warnings), 3 = compilation aborted by the user."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-ipathname"}),(0,r.jsx)(t.td,{children:"Include path: set the path where the compiler can find the include files. This option may appear multiple times at the command line, to allow you to set several include paths."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-l"}),(0,r.jsx)(t.td,{children:"Listing: perform only the file reading and preprocessing steps; for example, to verify the effect of the text substitution macros and the conditionally compiled/skipped sections."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-Olevel"}),(0,r.jsx)(t.td,{children:"Optimization level: 0 = no optimizations; 1 = JIT compatible optimizations only (JIT = \u201CJust In Time\u201D compiler, a high performance abstract machine); 2 = full optimizations."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-ofilename"}),(0,r.jsx)(t.td,{children:"Output file: set the name and path of the binary output file."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-pfilename"}),(0,r.jsx)(t.td,{children:"Prefix file: the name of the \u201Cprefix file\u201D, this is a file that is parsed before the input file (as a kind of implicit \u201Cinclude file\u201D). If used, this option overrides the default include file \u201Cdefault.inc\u201D. The -p option on its own (without a filename) disables the processing of any implicit include file."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-rfilename"}),(0,r.jsx)(t.td,{children:"Report: enable the creation of the report and optionally set the filename to which the extracted documentation and a crossreference report will be written."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The report is in \u201CXML\u201D format. The filename parameter is optional; if not specified, the report file has the same name as the input file with the extension \u201C.XML\u201D."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-Svalue"}),(0,r.jsx)(t.td,{children:"Stack size: the size of the stack and the heap in cells."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-svalue"}),(0,r.jsx)(t.td,{children:"Skip count: the number of lines to skip in the input file before starting to compile; for example, to skip a \u201Cheader\u201D in the source file which is not in a valid PAWN syntax."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-tvalue"}),(0,r.jsx)(t.td,{children:"tab size: the number of space characters to use for a tab character. When set to zero (i.e. option -t0) the compiler will no longer issue warning 217 (loose indentation)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-vvalue"}),(0,r.jsx)(t.td,{children:"Verbose: display imformational messages during the compilation. The value can be 0 (zero) for \u201Cquiet\u201D compile, 1 (one) for the normal output and 2 for a code/data/stack usage report."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-wvalue+/-"}),(0,r.jsx)(t.td,{children:"Warning control: the warning number following the \u201C-w\u201D is enabled or disabled, depending on whether a \u201C+\u201D or a \u201C-\u201D follows the number. When a \u201C+\u201D or \u201C-\u201D is absent, the warning status is toggled. For example, -w225- disables the warning for \u201Cunreachable code\u201D, -w225+ enables it and -w225 toggles between enabled/disabled."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"Only warnings can be disabled (errors and fatal errors cannot be disabled). By default, all warnings are enabled."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-Xvalue"}),(0,r.jsx)(t.td,{children:"Limit for the abstract machine: the maximum memory requirements that a compiled script may have, in bytes. This value is is useful for (embedded) environments where the maximum size of a script is bound to a hard upper limit. If there is no setting for the amount of RAM for the data and stack, this refers to the total memory requirements; if the amount of RAM is explicitly set, this value only goves the amount of memory needed for the code and the static data."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-XDvalue"}),(0,r.jsx)(t.td,{children:"RAM limit for the abstract machine: the maximum memory requirements for data and stack that a compiled script may have, in bytes. This value is is useful for (embedded) environments where the maximum data size of a script is bound to a hard upper limit. Especially in the case where the PAWN script runs from ROM, the sizes for the code and data sections need both to be set."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-\\"}),(0,r.jsx)(t.td,{children:"Control characters start with \u201C\\\u201D (for the sake of similarity with C, C++ and Java)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-^"}),(0,r.jsx)(t.td,{children:"Control characters start with \u201C\u02C6\u201D (for compatibility with earlier versions of pawn)."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"-;+/-"}),(0,r.jsx)(t.td,{children:"With -;+ every statement is required to end with a semicolon; with -;-, semicolons are optional to end a statement if the statement is the last on the line. The option -; (without + or \u2212 suffix) toggles the current setting."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"sym=value"}),(0,r.jsx)(t.td,{children:"define constant \u201Csym\u201D with the given (numeric) value, the value is optional;"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"@filename"}),(0,r.jsx)(t.td,{children:"read (more) options from the specified \u201Cresponse file\u201D."})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"-response-file",children:"\u2022 Response file"}),"\n",(0,r.jsx)(t.p,{children:"To support operating systems with a limited command line length (e.g., Mi-\ncrosoft DOS), the PAWN compiler supports \u201Cresponse files\u201D. A response\nfile is a text file that contains the options that you would otherwise put at the\ncommand line. With the command:"}),"\n",(0,r.jsx)(t.p,{children:"pawncc @opts.txt prog.pawn"}),"\n",(0,r.jsx)(t.p,{children:"the PAWN compiler compiles the file \u201Cprog.pawn\u201D using the options that are\nlisted in the response file \u201Copts.txt\u201D."}),"\n",(0,r.jsx)(t.h3,{id:"-configuration-file",children:"\u2022 Configuration file"}),"\n",(0,r.jsx)(t.p,{children:"On platforms that support it (currently Microsoft DOS, Microsoft Windows\nand Linux), the compiler reads the options in a \u201Cconfiguration file\u201D on startup."}),"\n",(0,r.jsx)(t.p,{children:"The configuration file must have the name \u201Cpawn.cfg\u201D and it must reside in\nthe same directory as the compiler executable program."}),"\n",(0,r.jsx)(t.p,{children:"In a sense, the configuration file is an implicit response file. Options\nspecified on the command line may overrule those in the configuration file."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"Packed/unpacked strings: 99"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"Character constants: 99"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"#pragma dynamic: 121"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"Warnings: 161"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"See also #pragma amxlimit on page 119"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"See also #pragma amxram on page 120"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"rationale",children:"Rationale"}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"The first issue in the presentation of a new computer language should be: why\na new language at all?"})}),"\n",(0,r.jsxs)(t.p,{children:["Indeed, I did look at several existing languages before I designed",(0,r.jsx)(t.br,{}),"\n","my own. Many little languages were aimed at scripting the command shell (TCL, Perl,\nPython). Other languages were not designed as extension languages, and put\nthe burden to embedding solely on the host application."]}),"\n",(0,r.jsx)(t.p,{children:"As I initially attempted to use Java as an extension language (rather than build\nmy own, as I have done now), the differences between PAWN and Java are illus-\ntrative for the almost reciprocal design goals of both languages. For example,"}),"\n",(0,r.jsx)(t.p,{children:"Java promotes distributed computing where \u201Cpackages\u201D reside on diverse ma-\nchines, PAWN is designed so that the compiled applets can be easily stored in\na compound file together with other data. Java is furthermore designed to be\narchitecture neutral and application independent, inversely PAWN is designed\nto be tightly coupled with an application; native functions are a taboo to some\nextent in Java (at least, it is considered \u201Cimpure\u201D), whereas native functions\nare \u201Cthe reason to be\u201D for PAWN. From the viewpoint of PAWN, the intended\nuse of Java is upside down: native functions are seen as an auxiliary library\nthat the application \u2014in Java\u2014 uses; in PAWN, native functions are part of\n\u201Cthe application\u201D and the PAWN program itself is a set of auxiliary functions\nthat the application uses."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"A language for scripting applications:"})," PAWN is targeted as an exten-\nsion language, meant to write application-specific macros or subprograms with.\nPAWN is not the appropriate language for implementing business applications\nor operating systems in. PAWN is designed to be easily integrated with, and\nembedded in, other systems/applications."]}),"\n",(0,r.jsx)(t.p,{children:"As an extension language, PAWN programs typically manipulate objects of\nthe host application. In an animation system, PAWN scripts deal with sprites,\nevents and time intervals; in a communication application, PAWN scripts handle\npackets and connections. I assume that the host application will make\n(a subset of) its resources and functionality available via functions, handles,\nmagic cookies. . . in a similar way that a contemporary operating system\nprovides an interface to processes written in C/C++ \u2014e.g., the Win32 API (\u201Chandles\neverywhere\u201D) or GNU/Linux\u2019 \u201Cglibc\u201D. To that end, PAWN has a simple and\nefficient interface to the \u201Cnative\u201D functions of the host application. A PAWN\nscript manipulates data objects in the host application through function calls,\nbut it cannot access the data of the host application directly."}),"\n",(0,r.jsx)(t.p,{children:"The first and foremost criterions for the PAWN language were execution speed\nand reliability. Reliability in the sense that a PAWN program should not be\nable to crash the application or tool in which it is embedded \u2014at least, not\neasily. Although this limits the capabilities of the language significantly,\nthe advantages are twofold:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"the application vendor can rest assured that its application will not crash due to user additions or macros,"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"the user is free to experiment with the language with no (or little) risk of damaging the application files."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Speed is essential:"})," PAWN programs would probably run in an abstract ma-\nchine, and abstract machines are notoriously slow. I had to make a language\nthat has low overhead and a language for which a fast abstract machine can be\nwritten. Speed should also be reliable, in the sense that a PAWN script should\nnot slow down over time or have an occasional performance hiccup. Conse-\nquently, PAWN excludes any required \u201Cbackground process\u201D, such as garbage\ncollection, and the core of the abstract machine does not implicitly\nallocate any system or application resources while it runs. That is, PAWN does\nnot allocate memory or open files, not without the help of a native function that\nthe script calls explicitly."]}),"\n",(0,r.jsxs)(t.p,{children:["As Dennis Ritchie said, by intent the C language confines itself to facilities\nthat can be mapped relatively efficiently and directly to machine instructions. The\nsame is true for PAWN, and this is also a partial explication why PAWN looks\nso much like C. Even though PAWN runs on an abstract machine, the goal is to\nkeep that abstract machine small and quick. PAWN is used in tiny embedded\nsystems with ram sizes of 32 kiB or less, as well as in high-performance games\nthat need every processor cycle for their graphics engine and game-play.",(0,r.jsx)(t.br,{}),"\n","In both environments, a heavy-weight scripting support is difficult to swallow."]}),"\n",(0,r.jsxs)(t.p,{children:["A brief analysis showed that the instruction decoding logic for an abstract ma-\nchine would quickly become the bottleneck in the performance of the abstract\nmachine. To keep the decoding simple, each opcode should have the",(0,r.jsx)(t.br,{}),"\n","same size (excluding operands), and the opcode should fully specify the instruction\n(including the addressing methods, size of the operands, etc.). That meant\nthat for each operation on a variable, the abstract machine needed a separate\nopcode for every combination of variable type, storage class and access method\n(direct, or dereferenced). For even three types (int, char and unsigned int),\ntwo storage classes (global and local) and three access methods (direct, indi-\nrect or indexed), a total of 18 opcodes (3",(0,r.jsx)(t.em,{children:"2"}),"3) are needed to simply fetch the\nvalue of a variable."]}),"\n",(0,r.jsx)(t.p,{children:"At the same time, to keep the abstract machine small and manageable, I set the\ngoal at approximately 100 instructions.\u2217 With 18 opcodes to load a variable\nin a register, 18 more to store a register into a variable, another 18 to get\nthe address of a variable, etc. . . I was quickly exceeding my self-imposed limit\nof a hundred opcodes."}),"\n",(0,r.jsx)(t.p,{children:"The languages bob and rexx inspired me to design a typeless language. This\nsaved me a lot of opcodes. At the same time, the language could no longer be\ncalled a \u201Csubset of C\u201D. I was changing the language. Why, then, not go a foot\nfurther in changing the language? This is where a few more design guidelines came into play:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"give the programmer a general purpose tool, not a special purpose solution"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"avoid error prone language constructs; promote error checking"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"be pragmatic"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"A general purpose tool:"})," PAWN is targeted as an extension language, with-\nout specifying exactly what it will extent. Typically, the application or",(0,r.jsx)(t.br,{}),"\n","the tool that uses PAWN for its extension language will provide many, optimized\nroutines or commands to operate on its native objects, be it text, database\nrecords or animated sprites. The extension language exists to permit the user\nto do what the application developer forgot, or decided not to include. Rather\nthan providing a comprehensive library of functions to sort data, match reg-\nular expressions, or draw cubic B\xb4ezier splines, PAWN should supply a (general\npurpose) means to use, extend and combine the specific (\u201Cnative\u201D) functions\nthat an application provides."]}),"\n",(0,r.jsxs)(t.p,{children:["PAWN lacks a comprehensive standard library. By intent, PAWN also lacks fea-\ntures like pointers, dynamic memory allocation, direct access to the operating\nsystem or to the hardware, that are needed to remain competitive in the field of\ngeneral purpose application or system programming. You cannot build linked\nlists or dynamic tree data structures in PAWN, and neither can you access any\nmemory beyond the boundaries of the abstract machine. That is not to say\nthat a PAWN program can never use dynamic, sorted symbol tables, or change\na parameter in the operating system; it can do that, but it needs",(0,r.jsx)(t.br,{}),"\n","to do so by calling a \u201Cnative\u201D function that an application provides to the abstract machine."]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h6,{id:"-136-opcodes-are-defined-at-this-writing-plus-20-macro-opcodes-to-exploit-performance-gains-by-forcing-proper-alignment-of-memory-words-essential-on-arm-microprocessors-the-current-abstract-machine-uses-32-bit-opcodes-there-is-no-technical-limit-on-the-number-of-opcodes-but-in-the-interest-of-a-small-footprint-the-number-of-opcodes-should-be-restricted",children:"\u2217 136 Opcodes are defined at this writing, plus 20 \u201Cmacro\u201D opcodes. To exploit performance gains by forcing proper alignment of memory words (essential on ARM microprocessors), the current abstract machine uses 32-bit opcodes. There is no technical limit on the number of opcodes, but in the interest of a small footprint, the number of opcodes should be restricted."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:"In other words, if an application chooses to implement the well known peek and\npoke functions (from BASIC) in the abstract machine, a PAWN program can\naccess any byte in memory, insofar the operating system permits this. Likewise,\nan application can provide native functions that insert, delete or search\nsymbols in a table and allows several operations on them. The proposed core functions\ngetproperty and setproperty are an example of native functions that build\na linked list in the background."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Promote error checking:"})," As you may have noticed, one of the foremost\ndesign criterions of the C language, \u201Ctrust the programmer\u201D, is absent from\nmy list of design criterions. Users of script languages may not be experienced\nprogrammers; and even if they are, PAWN will probably not be their primary\nlanguage. Most PAWN programmers will keep learning the language as they\ngo, and will even after years not have become experts. Enough reason, hence,\nto replace error prone elements from the C language (pointers) with",(0,r.jsx)(t.br,{}),"\n","saver, albeit less general, constructs (references).\u2020 References are copied from C++.\nThey are nothing else than pointers in disguise, but they are",(0,r.jsx)(t.br,{}),"\n","restricted in various, mostly useful, ways. Turn to a C\u207A\u207A book to find more justification for references."]}),"\n",(0,r.jsxs)(t.p,{children:["I find it sad that many, even modern, programming languages have so",(0,r.jsx)(t.br,{}),"\n","little built-in, or easy to use, support for confirming that programs do",(0,r.jsx)(t.br,{}),"\n","as the programmer intended. I am not referring to theoretical correctness (which is\ntoo costly to achieve for anything bigger than toy programs), but",(0,r.jsx)(t.br,{}),"\n","practical, easy to use, verification mechanisms as a help to the programmer.\nPAWN provides both compile time and execution time assertions to use for preconditions, postconditions and invariants."]}),"\n",(0,r.jsx)(t.p,{children:"The typing mechanism that most programming languages use is also an auto-\nmatic \u201Ccatcher\u201D of a whole class of bugs. By virtue of being a typeless\nlanguage, PAWN lacked these error checking abilities. This was clearly a weakness, and I\ncreated the \u201Ctag\u201D mechanism as an equivalent for verifying function parameter\npassing, array indexing and other operations."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h6,{id:"-you-should-see-this-remark-in-the-context-of-my-earlier-assertion-that-many-pawn-programmers-will-be-novice-programmers-in-my-teaching-experience-novice-programmers-make-many-pointer-errors-as-opposed-to-experienced-cc-programmers",children:"\u2020 You should see this remark in the context of my earlier assertion that many \u201CPAWN\u201D programmers will be novice programmers. In my (teaching) experience, novice programmers make many pointer errors, as opposed to experienced C/C++ programmers"}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsxs)(t.p,{children:["The quality of the tools: the compiler and the abstract machine, also have a\ngreat impact on the robustness of code \u2014whatever the language. Although\nthis is only very loosely related to the design of the language, I set out to\nbuild the tools such that they promote error checking. The warning system of PAWN\ngoes a step beyond simply reporting where the parser fails to",(0,r.jsx)(t.br,{}),"\n","interpret the data according to the language grammar. At several occasions, the compiler\nruns checks that are completely unrelated to generating code and that are im-\nplemented specifically to catch possible errors. Likewise, the \u201Cdebugger hook\u201D\nis designed right into the abstract machine, it is not an add-on implemented\nas an after-thought."]}),"\n",(0,r.jsxs)(t.p,{children:["Be pragmatic: The object-oriented programming paradigm has not entirely\nlived up to its promise, in my opinion. On the one hand, OOP solves many\ntasks in an easier or cleaner way, due to the added abstraction layer. On the\nother hand, contemporary object-oriented languages leave you struggling with\nthe language as much as with the task at hand. Object-oriented languages are\nattractive mainly because of the comprehensive class libraries that they come\nwith \u2014but leaning on a standard library goes against one of the design goal\nfor PAWN. Object-oriented programming is not a solution for a",(0,r.jsx)(t.br,{}),"\n","non-expert programmer with little patience for artificial complexity. The criterion\n\u201Cbe pragmatic\u201D is a reminder to seek solutions, not elegancy."]}),"\n",(0,r.jsx)(t.h3,{id:"-practical-design-criterions",children:"\u2022 Practical design criterions"}),"\n",(0,r.jsx)(t.p,{children:"The fact that PAWN looks so much like C cannot be a coincidence, and it isn\u2019t.\nPAWN started as a C dialect and stayed that way, because C has a proven track\nrecord. The changes from C were mostly born out of necessity after rubbing\nout the features of C that I did not want in a scripting language: no pointers\nand no \u201Ctyping\u201D system."}),"\n",(0,r.jsxs)(t.p,{children:["PAWN, being a typeless language, needed a different means to declare variables.\nIn the course of modifying this, I also dropped the C requirement",(0,r.jsx)(t.br,{}),"\n","that all variables should be declared at the top of a compound statement. PAWN is a\nlittle more like C\u207A\u207A in this respect."]}),"\n",(0,r.jsxs)(t.p,{children:["C language functions can pass \u201Coutput values\u201D via pointer arguments. The\nstandard function scanf, for example, stores the values or strings that it reads\nfrom the console into its arguments. You can design a function in C so that\nit optionally returns a value through a pointer argument; if the caller of the\nfunction does not care for the return value, it passes NULL as the pointer\nvalue. The standard function strtol is an example of a function that does this. This\ntechnique frequently saves you from declaring and passing dummy variables.\nPAWN replaces pointers with references, but references cannot be NULL. Thus,\nPAWN needed a different technique to \u201Cdrop\u201D the values that a function returns\nvia references. Its solution is the use of an \u201Cargument placeholder\u201D\nthat is written as an underscore character (\u201C \u201D); Prolog programmers will recognize\nit as a similar feature in that language. The argument placeholder",(0,r.jsx)(t.br,{}),"\n","reserves a temporary anonymous data object (a \u201Ccell\u201D or an array of cells)",(0,r.jsx)(t.br,{}),"\n","that is automatically destroyed after the function call."]}),"\n",(0,r.jsx)(t.p,{children:"The temporary cell for the argument placeholder should still have a value, be-\ncause the function may see a reference parameters as input/output. Therefore,\na function must specify for each passed-by-reference argument what value it\nwill have upon entry when the caller passes the placeholder instead of an ac-\ntual argument. By extension, I also added default values for arguments that\nare \u201Cpassed-by-value\u201D. The feature to optionally remove all arguments with\ndefault values from the right was copied from C++."}),"\n",(0,r.jsx)(t.p,{children:"When speaking of BCPL and B, Dennis Ritchie said that C was invented in part\nto provide a plausible way of dealing with character strings when one begins\nwith a word-oriented language. PAWN provides two options for working with\nstrings, packed and unpacked strings. In an unpacked string, every character"}),"\n",(0,r.jsxs)(t.p,{children:["fits in a cell. The overhead for a typical 32-bit implementation is large: one\ncharacter would take four bytes. Packed strings store up to four characters\nin one cell, at the cost of being significantly more difficult",(0,r.jsx)(t.br,{}),"\n","to handle if you could only access full cells. Modern BCPL implementations provide two array\nindexing methods: one to get a word from an array and one to get a character\nfrom an array. PAWN copies this concept, although the syntax differs from that\nof BCPL. The packed string feature also led to the new operator char."]}),"\n",(0,r.jsxs)(t.p,{children:["Unicode applications often have to deal with two characters sets:",(0,r.jsx)(t.br,{}),"\n","8-bit for legacy file formats and standardized transfer formats (like many of the Internet\nprotocols) and the 16-bit Unicode character set (or the 31-bit UCS-4 character\nset). Although the PAWN compiler has an option that makes characters 16-bit\n(so only two characters fit in a 32-bit cell), it is usually more\nconvenient to store single-byte character strings in packed strings and multi-byte strings in\nunpacked strings. This turns a weakness in PAWN \u2014the need to distinguish\npacked strings from unpacked strings\u2014 into a strength: PAWN can make that"]}),"\n",(0,r.jsx)(t.p,{children:"distinction quite easily. And instead of needing two implementations for every\nfunction that deals with strings (an ascii version and a Unicode version \u2014look\nat the Win32 API, or even the standard C library), PAWN enables functions to\nhandle both packed and unpacked strings with ease."}),"\n",(0,r.jsx)(t.p,{children:"Notwithstanding the above mentioned changes, plus those in the chapter \u201CPit-\nfalls: differences from C\u201D (page 134), I have tried to keep PAWN close to C. A\nfinal point, which is unrelated to language design, but important nonetheless,\nis the license: PAWN is distributed under a liberal license allowing you to use\nand/or adapt the code with a minimum of restrictions \u2014see appendix D."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"Support for Unicode string literals: 139"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"license",children:"License"}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsxs)(t.p,{children:["The software toolkit \u201CPAWN\u201D (the compiler, the abstract machine and",(0,r.jsx)(t.br,{}),"\n","the documentation) are copyright c 1997\u20132006 by ITB CompuPhase. The Intel\nassembler implementation of the abstract machine and the just-in-time com-\npiler (specifically the files amxexec.asm, amxjitr.asm and amxjits.asm)\nare copyright c 1998-2003 Marc Peter. The file amxjitsn.asm is translated\nfrom amxjits.asm and is partially c 2004 G.W.M. Vissers. The file amxex-\necn.asm is translated from amxexec.asm and is partially c 2004\u20132005 ITB CompuPhase."]}),"\n",(0,r.jsx)(t.p,{children:"PAWN is distributed under the \u201CzLib/libpng\u201D license, which is reproduced be-\nlow:"}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:"This software is provided \u201Cas-is\u201D, without any express or implied warranty. In\nno event will the authors be held liable for any damages arising from the use\nof this software."}),"\n",(0,r.jsx)(t.p,{children:"Permission is granted to anyone to use this software for any purpose, including\ncommercial applications, and to alter it and redistribute it freely, subject\nto the following restrictions:"}),"\n",(0,r.jsx)(t.p,{children:"1 The origin of this software must not be misrepresented; you must not claim\nthat you wrote the original software. If you use this software in a product,\nan acknowledgment in the product documentation would be appreciated\nbut is not required."}),"\n",(0,r.jsx)(t.p,{children:"2 Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software."}),"\n",(0,r.jsx)(t.p,{children:"3 This notice may not be removed or altered from any source distribution."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:"The zLib/libpng license has been approved by the \u201COpen Source Initiative\u201D organization."}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"/th/docs/scripting/language/reference/Contents",children:"Go Back to Contents"})})]})}function h(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},50065:function(e,t,n){n.d(t,{Z:()=>o,a:()=>a});var s=n(67294);let r={},i=s.createContext(r);function a(e){let t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);