"use strict";(self.webpackChunkomp_web=self.webpackChunkomp_web||[]).push([["85821"],{70159:function(e,n,i){i.r(n),i.d(n,{frontMatter:()=>a,toc:()=>d,default:()=>h,metadata:()=>s,assets:()=>o,contentTitle:()=>r});var s=JSON.parse('{"id":"scripting/callbacks/OnDialogResponse","title":"OnDialogResponse","description":"This callback is called when a player responds to a dialog shown using ShowPlayerDialog. The response can be by clicking a button, pressing ENTER/ESC, or double-clicking a list item (in the case of a list-style dialog).","source":"@site/docs/scripting/callbacks/OnDialogResponse.md","sourceDirName":"scripting/callbacks","slug":"/scripting/callbacks/OnDialogResponse","permalink":"/hu/docs/scripting/callbacks/OnDialogResponse","draft":false,"unlisted":false,"editUrl":"https://github.com/openmultiplayer/web/edit/master/frontend/docs/scripting/callbacks/OnDialogResponse.md","tags":[{"inline":true,"label":"dialog","permalink":"/hu/docs/tags/dialog"}],"version":"current","frontMatter":{"title":"OnDialogResponse","sidebar_label":"OnDialogResponse","description":"This callback is called when a player responds to a dialog shown using ShowPlayerDialog. The response can be by clicking a button, pressing ENTER/ESC, or double-clicking a list item (in the case of a list-style dialog).","tags":["dialog"]},"sidebar":"docsSidebar","previous":{"title":"OnClientMessage","permalink":"/hu/docs/scripting/callbacks/OnClientMessage"},"next":{"title":"OnEnterExitModShop","permalink":"/hu/docs/scripting/callbacks/OnEnterExitModShop"}}'),l=i(85893),t=i(50065);let a={title:"OnDialogResponse",sidebar_label:"OnDialogResponse",description:"This callback is called when a player responds to a dialog shown using ShowPlayerDialog. The response can be by clicking a button, pressing ENTER/ESC, or double-clicking a list item (in the case of a list-style dialog).",tags:["dialog"]},r=void 0,o={},d=[{value:"Description",id:"description",level:2},{value:"Returns",id:"returns",level:2},{value:"Examples",id:"examples",level:2},{value:"Notes",id:"notes",level:2},{value:"Related Functions",id:"related-functions",level:2}];function c(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,l.jsx)(n.p,{children:"This callback is called when a player responds to a dialog shown using ShowPlayerDialog. The response can be by clicking a button, pressing ENTER/ESC, or double-clicking a list item (in the case of a list-style dialog)."}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Name"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"playerid"}),(0,l.jsx)(n.td,{children:"The ID of the player who responded to the dialog."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"dialogid"}),(0,l.jsx)(n.td,{children:"The ID of the dialog the player responded to, as assigned in ShowPlayerDialog."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"response"}),(0,l.jsx)(n.td,{children:"1 for the left button, and 0 for the right button (if only one button is shown, it will always be 1)"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"listitem"}),(0,l.jsx)(n.td,{children:"The ID of the list item selected by the player (starts at 0). For non-list dialogs, it will be -1."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"inputtext[]"}),(0,l.jsx)(n.td,{children:"The text entered in the input box by the player, or the selected list item text."})]})]})]}),"\n",(0,l.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:"This callback is always called first in filterscripts. Returning 1 blocks other filterscripts from processing it."}),"\n",(0,l.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"DIALOG_STYLE_MSGBOX"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:'// Define the dialog ID for handling responses\n#define DIALOG_RULES 1\n\n// In some command\nShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, "Server Rules", "- No Cheating\\n- No Spamming\\n- Respect Admins\\n\\nDo you agree to these rules?", "Yes", "No");\n\npublic OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])\n{\n    if (dialogid == DIALOG_RULES)\n    {\n        if (response) // If the left button was pressed or ENTER was pressed\n        {\n            SendClientMessage(playerid, COLOR_GREEN, "Thank you for agreeing to the server rules!");\n        }\n        else // ESC was pressed or the right button was pressed\n        {\n            Kick(playerid);\n        }\n        return 1; // Return 1 to indicate the dialog was handled.\n    }\n\n    return 0; // Return 0 for unhandled dialogs.\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"DIALOG_STYLE_INPUT"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:'#define DIALOG_LOGIN 2\n\n// In some command\nShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "Login", "Please enter your password:", "Login", "Cancel");\n\npublic OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])\n{\n    if (dialogid == DIALOG_LOGIN)\n    {\n        if (!response) // ESC was pressed or the right button was pressed\n        {\n            Kick(playerid);\n        }\n        else // ESC was pressed or the right button was pressed\n        {\n            if (CheckPassword(playerid, inputtext))\n            {\n                SendClientMessage(playerid, COLOR_RED, "You are now logged in!");\n            }\n            else\n            {\n                SendClientMessage(playerid, COLOR_RED, "LOGIN FAILED.");\n\n                // Re-show the login dialog\n                ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "Login", "Please enter your password:", "Login", "Cancel");\n            }\n        }\n        return 1; // Return 1 to indicate the dialog was handled.\n    }\n\n    return 0; // Return 0 for unhandled dialogs.\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"DIALOG_STYLE_LIST"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:'#define DIALOG_WEAPONS 3\n\n// In some command\nShowPlayerDialog(playerid, DIALOG_WEAPONS, DIALOG_STYLE_LIST, "Weapons", "Desert Eagle\\nAK-47\\nCombat Shotgun", "Select", "Close");\n\npublic OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])\n{\n    if (dialogid == DIALOG_WEAPONS)\n    {\n        if (response) // The right button was clicked or an item was double-clicked.\n        {\n            // Give the player the selected weapon.\n            switch (listitem)\n            {\n                case 0:\n                {\n                    GivePlayerWeapon(playerid, WEAPON_DEAGLE, 14); // Give the player a desert eagle.\n                }\n                case 1:\n                {\n                    GivePlayerWeapon(playerid, WEAPON_AK47, 120); // Give the player an AK-47.\n                }\n                case 2:\n                {\n                    GivePlayerWeapon(playerid, WEAPON_SHOTGSPA, 28); // Give the player a Combat Shotgun.\n                }\n            }\n        }\n        return 1; // Return 1 to indicate the dialog was handled.\n    }\n\n    return 0; // Return 0 for unhandled dialogs.\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"DIALOG_STYLE_TABLIST"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-c",children:'#define DIALOG_WEAPONS 3\n\n// In some command\nShowPlayerDialog(playerid, DIALOG_WEAPONS, DIALOG_STYLE_TABLIST, "Weapons",\n"Weapon\\tAmmo\\tPrice\\n\\\nM4\\t120\\t500\\n\\\nMP5\\t90\\t350\\n\\\nAK-47\\t120\\t400",\n"Select", "Close");\n\npublic OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])\n{\n    if (dialogid == DIALOG_WEAPONS)\n    {\n        if (response) // If they clicked \'Select\' or double-clicked a weapon\n        {\n            // Give them the weapon\n            switch (listitem)\n            {\n                case 0:\n                {\n                    GivePlayerWeapon(playerid, WEAPON_M4, 120); // Give them an M4\n                }\n                case 1:\n                {\n                    GivePlayerWeapon(playerid, WEAPON_MP5, 90); // Give them an MP5\n                }\n                case 2:\n                {\n                    GivePlayerWeapon(playerid, WEAPON_AK47, 120); // Give them an AK-47\n                }\n            }\n        }\n        return 1; // We handled a dialog, so return 1. Just like OnPlayerCommandText.\n    }\n\n    return 0; // You MUST return 0 here! Just like OnPlayerCommandText.\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsxs)(n.p,{children:["The parameters can have different values depending on the dialog's style. (",(0,l.jsx)(n.a,{href:"../resources/dialogstyles",children:"Click here for more examples"}),")."]})}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsx)(n.p,{children:"Using a switch-case statement instead of if blocks is an appropriate method for handling multiple dialogs."})}),"\n",(0,l.jsxs)(n.admonition,{type:"warning",children:[(0,l.jsx)(n.p,{children:"A player's dialog doesn't automatically close when the gamemode restarts."}),(0,l.jsx)(n.p,{children:'If a player responds to a dialog after the server was restarted, the server will print the warning: "Warning: PlayerDialogResponse PlayerId: 0 dialog ID doesn\'t match last sent dialog ID".'})]}),"\n",(0,l.jsx)(n.h2,{id:"related-functions",children:"Related Functions"}),"\n",(0,l.jsx)(n.p,{children:"The following functions might be useful, as they're related to this callback in one way or another."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"../functions/ShowPlayerDialog",children:"ShowPlayerDialog"}),": Show a dialog to a player."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"../functions/GetPlayerDialogID",children:"GetPlayerDialogID"}),": Get the ID of the dialog currently show to the player."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"../functions/GetPlayerDialogData",children:"GetPlayerDialogData"}),": Get the data of the dialog currently show to the player."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"../functions/HidePlayerDialog",children:"HidePlayerDialog"}),": Hides the dialog currently show to the player."]}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},50065:function(e,n,i){i.d(n,{Z:()=>r,a:()=>a});var s=i(67294);let l={},t=s.createContext(l);function a(e){let n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);