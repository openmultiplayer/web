"use strict";(self.webpackChunkomp_web=self.webpackChunkomp_web||[]).push([["65902"],{29553:function(e,a,n){n.r(a),n.d(a,{frontMatter:()=>i,toc:()=>c,default:()=>u,metadata:()=>r,assets:()=>o,contentTitle:()=>t});var r=JSON.parse('{"id":"scripting/callbacks/OnPlayerDeath","title":"OnPlayerDeath","description":"Descripci\xf3n","source":"@site/i18n/es/docusaurus-plugin-content-docs/current/scripting/callbacks/OnPlayerDeath.md","sourceDirName":"scripting/callbacks","slug":"/scripting/callbacks/OnPlayerDeath","permalink":"/es/docs/scripting/callbacks/OnPlayerDeath","draft":false,"unlisted":false,"editUrl":"https://github.com/openmultiplayer/web/edit/master/frontend/docs/scripting/callbacks/OnPlayerDeath.md","tags":[{"inline":true,"label":"player","permalink":"/es/docs/tags/player"}],"version":"current","frontMatter":{"t\xedtulo":"OnPlayerDeath","descripci\xf3n":"Este callback se llama cuando un jugador muere, ya sea suicid\xe1ndose o siendo asesinado por otro jugador.","tags":["player"]},"sidebar":"docsSidebar","previous":{"title":"OnPlayerConnect","permalink":"/es/docs/scripting/callbacks/OnPlayerConnect"},"next":{"title":"OnPlayerDisconnect","permalink":"/es/docs/scripting/callbacks/OnPlayerDisconnect"}}'),s=n(85893),l=n(50065);let i={"t\xedtulo":"OnPlayerDeath","descripci\xf3n":"Este callback se llama cuando un jugador muere, ya sea suicid\xe1ndose o siendo asesinado por otro jugador.",tags:["player"]},t=void 0,o={},c=[{value:"Descripci\xf3n",id:"descripci\xf3n",level:2},{value:"Devoluciones",id:"devoluciones",level:2},{value:"Ejemplos",id:"ejemplos",level:2},{value:"Notas",id:"notas",level:2},{value:"Funciones Relacionadas",id:"funciones-relacionadas",level:2}];function d(e){let a={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"descripci\xf3n",children:"Descripci\xf3n"}),"\n",(0,s.jsx)(a.p,{children:"Este callback se llama cuando un jugador muere, ya sea suicid\xe1ndose o siendo asesinado por otro jugador."}),"\n",(0,s.jsxs)(a.table,{children:[(0,s.jsx)(a.thead,{children:(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.th,{children:"Nombre"}),(0,s.jsx)(a.th,{children:"Descripci\xf3n"})]})}),(0,s.jsxs)(a.tbody,{children:[(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"playerid"}),(0,s.jsx)(a.td,{children:"El ID del jugador que muri\xf3."})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"killerid"}),(0,s.jsx)(a.td,{children:"El ID del jugador que mat\xf3 al jugador que muri\xf3, o INVALID_PLAYER_ID si no fue ninguno."})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsxs)(a.td,{children:["WEAPON",":reason"]}),(0,s.jsx)(a.td,{children:"El ID de la causa de la muerte del jugador."})]})]})]}),"\n",(0,s.jsx)(a.h2,{id:"devoluciones",children:"Devoluciones"}),"\n",(0,s.jsx)(a.p,{children:"1 - Prevendr\xe1 a otros filterscripts de recibir este callback."}),"\n",(0,s.jsx)(a.p,{children:"0 - Indica que este callback ser\xe1 pasado al siguiente filterscript."}),"\n",(0,s.jsx)(a.p,{children:"Siempre se llama primero en filterscripts."}),"\n",(0,s.jsx)(a.h2,{id:"ejemplos",children:"Ejemplos"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c",children:"new PlayerDeaths[MAX_PLAYERS];\nnew PlayerKills[MAX_PLAYERS];\n\npublic OnPlayerDeath(playerid, killerid, WEAPON:reason)\n{\n    SendDeathMessage(killerid, playerid, reason); //Muestra el asesinato en la tabla de asesinatos\n\n    //Comprueba si 'killerid' es v\xe1lida antes de hacer cualquier cosa con ella.\n    if (killerid\xa0!= INVALID_PLAYER_ID)\n    {\n        PlayerKills[killerid] ++;\n    }\n\n    //Fuera de la comprobaci\xf3n, hacer cosas sobre playerid (siempre es v\xe1lido)\n    PlayerDeaths[playerid] ++;\n    return 1;\n}\n"})}),"\n",(0,s.jsx)(a.h2,{id:"notas",children:"Notas"}),"\n",(0,s.jsx)(a.admonition,{type:"tip",children:(0,s.jsx)(a.p,{children:"La raz\xf3n retornar\xe1 37 (lanzallamas) por cualquier origen de fuego (ej. molotov, 18). La raz\xf3n retornar\xe1 51 de cualquier arma que cree una explosi\xf3n (ej. Lanzamisiles, granada). No es necesario comprobar si killerid es v\xe1lido antes de usarlo en SendDeathMessage, ya que INVALID_PLAYER_ID es un par\xe1metro v\xe1lido en esa funci\xf3n. playerid es el \xfanico que puede llamar el callback. (bueno saberlo para anti fake death)"})}),"\n",(0,s.jsx)(a.admonition,{type:"warning",children:(0,s.jsx)(a.p,{children:"TEN\xc9S que comprobar que 'killerid' sea v\xe1lido (no INVALID_PLAYER-ID) antes de usarlo en un array (o realmente en donde sea), ya que causar\xe1 que el script OnPlayerDeath crashee (no el script entero). Esto es debido a que INVALID_PLAYER_ID es definido como 65535, y si un array s\xf3lo tiene 'MAX_PLAYERS' elementos, ejemplo 500, vas a estar intentando acceder a un \xedndice por arriba de 499, que est\xe1 fuera de alcance (out of bonds)."})}),"\n",(0,s.jsx)(a.h2,{id:"funciones-relacionadas",children:"Funciones Relacionadas"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.a,{href:"../functions/SendDeathMessage",children:"SendDeathMessage"}),": A\xf1adir un asesinato a la lista de muertes."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.a,{href:"../functions/SetPlayerHealth",children:"SetPlayerHealth"}),": Establecer la salud (vida) de un jugador."]}),"\n"]})]})}function u(e={}){let{wrapper:a}={...(0,l.a)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},50065:function(e,a,n){n.d(a,{Z:()=>t,a:()=>i});var r=n(67294);let s={},l=r.createContext(s);function i(e){let a=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(l.Provider,{value:a},e.children)}}}]);