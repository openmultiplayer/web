version: 3

tasks:
  default:
    deps: [build]
    cmds:
      - ./server.exe
    sources:
      - server/**/*.go

  build:
    cmds:
      - go build -o server.exe -ldflags="-X 'github.com/openmultiplayer/web/server/src/version.Version={{.VERSION}}'" ./server/
    vars:
      VERSION:
        sh: git describe --always --dirty --tags

  # Production deployment run - migrate DB first, then
  production:
    cmds:
      - npx prisma migrate deploy
      - ./server.exe

  deploy:
    cmds:
      - docker compose up --detach

  services:
    cmds:
      - docker-compose -f docker-compose.dev.yml up -d

  generate:
    cmds:
      # Calling the Go generator from the Prisma CLI is not supported yet...
      # - npx @prisma/cli generate
      # so we call it directly:
      - go run github.com/prisma/prisma-client-go generate
      # Also generate TypeScript type declarations from some backend structs.
      - go run types.go

  docsindex:
    cmds:
      - go run ./server/indexbuilder/main.go

  migrate:
    cmds:
      - npx prisma migrate dev

  dbuild:
    cmds:
      - docker build -t southclaws/openmp-index .
      - docker build -t southclaws/openmp-frontend -f Dockerfile.frontend .

  upload-assets:
    dir: frontend/public
    cmds:
      - mc cp --recursive images omp/assets

  build-email-templates:
    dir: emails
    cmds:
      - npm run build

  # Run the web frontend and use a local API server.
  web:
    dir: frontend
    env:
      NEXT_PUBLIC_API_ADDRESS: "http://localhost:8000"
      NEXT_PUBLIC_WEB_ADDRESS: "http://localhost:3000"
    cmds:
      - npm run dev

  # Run the web frontend and use the live API.
  web-live:
    dir: frontend
    env:
      NEXT_PUBLIC_API_ADDRESS: "https://api.open.mp"
    cmds:
      - npm run dev
