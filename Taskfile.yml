version: 3

dotenv: [.env]

tasks:
  default:
    deps: [build]
    cmds:
      - ./server.exe
    sources:
      - app/**/*.go
      - internal/**/*.go
      - cmd/**/*.go

  build:
    cmds:
      - go build -o server.exe -ldflags="-X 'github.com/openmultiplayer/web/internal/version.Version={{.VERSION}}'" ./cmd/server

  # Production deployment run - migrate DB first, then
  production:
    cmds:
      - npx prisma migrate deploy
      - ./server.exe

  deploy:
    cmds:
      - docker compose up --detach

  services:
    cmds:
      - docker-compose -f docker-compose.dev.yml up -d

  generate:
    cmds:
      # Generate main database bindings
      - npx prisma generate
      # Generate Burgershot (MyBB) database bindings
      - npx prisma generate --schema=./prisma/burgershot.prisma
      # Also generate TypeScript type declarations from some backend structs.
      - go run types.go

  docsindex:
    cmds:
      - go run ./cmd/indexbuilder/main.go

  migrate:
    cmds:
      - npx prisma migrate dev

  dbuild:
    cmds:
      - docker build -t southclaws/openmp-index .
      - docker build -t southclaws/openmp-frontend -f Dockerfile.frontend .

  upload-assets:
    dir: frontend/public
    cmds:
      - mc cp --recursive images omp/assets

  build-email-templates:
    dir: emails
    cmds:
      - npm run build

  # Run the web frontend and use a local API server.
  web:
    dir: frontend
    env:
      NEXT_PUBLIC_API_ADDRESS: "http://localhost:8000"
      NEXT_PUBLIC_WEB_ADDRESS: "http://localhost:3000"
    cmds:
      - npm run dev

  # Run the web frontend and use the live API.
  web-live:
    dir: frontend
    env:
      NEXT_PUBLIC_API_ADDRESS: "https://api.open.mp"
    cmds:
      - npm run dev

  db-copy:
    vars:
      LOCAL_OUTPUT_PATH: data/dump.tar
    cmds:
      # - mkdir -p outputs/database
      - pg_dump
        --format=c
        --file={{.LOCAL_OUTPUT_PATH}}
        --schema=public
        {{.DATABASE_URL_SOURCE}}
      - pg_restore
        --format=c
        --schema=public
        --single-transaction
        --if-exists
        --clean
        --dbname={{.DATABASE_URL_DEST}}
        {{.LOCAL_OUTPUT_PATH}}
